./ ADD NAME=@DESCR@  0100-81027-81027-1503-00003-00003-00000-GRZ027  00
EINE BESCHREIBUNG DER EINZELNEN MACROS FINDET SICH IN
           "GMD.INFO.MACLIB".
SIE KANN MIT "UPRINT" AUSGEDRUCKT WERDEN.
./ ADD NAME=BLANK    0100-21053-21053-1621-00060-00060-00000-GRZ027  53
         MACRO
&LABEL   BLANK &FIELD,&LENGTH,&CHAR
.*                                                       05APR72-GEIST
.*  PAD FIELD WITH &CHAR                                 06AUG73-PAHL   06AUG731
.*
.*  &FIELD  : RS-ADDR   START ADDR OF FIELD TO BE PADDED WITH &CHAR
.*  &LENGTH : ABS.EXPR (1<VALUE<258) | SELF.DEF.TERM>0
.*            LENGTH OF FIELD
.*  &CHAR   : ABS.EXPR<256   FILL CHARACTER; DEFAULT IS C' '
.*
         LCLA  &P,&L,&LI
         LCLC  &PLUS,&C
         AIF   ('&FIELD' EQ '').YFIELD
         AIF   ('&LENGTH(1)' NE '&LENGTH').YLENGTH "(...)" NOTATION    -06AUG732
                                       COULD MEAN GPR                   06AUG733
         AIF   ('&CHAR' NE '').A
&C       SETC  'C'' '''                SET DEFAULT FILL CHARACTER
.A       AIF   ('&FIELD'(1,1) EQ '(').CONTIN
&PLUS    SETC  '+'
.CONTIN  ANOP                                                           23JUL73P
&LABEL   MVI   0&PLUS&FIELD,&CHAR&C    INSERT FILL CHARACTER            23JUL73P
         AIF   (T'&LENGTH EQ 'N').SELFDEF
.*
.*  LENGTH IS SPECIFIED AS ABS.EXPR
.*
         AIF   ('&LENGTH' NE '').EXPR
         AIF   ('&FIELD'(K'&FIELD,1) EQ ')').YLENGTH
&C       SETC  '&FIELD'(1,7)'#'        DEFAULT LENGTH: &FIELD.#
         MVC   0(&C-1,0),0             PROPAGATE PADDING CHAR
         AGO   .ORG
.EXPR    MVC   0(&LENGTH-1,0),0        PROPAGATE PADDING CHAR
.ORG     ORG   *-4
         DC    S(1&PLUS&FIELD,0&PLUS&FIELD)
         MEXIT
.*
.*  LENGTH IS SPECIFIED AS SELF.DEF.TERM
.*
.SELFDEF AIF   (&LENGTH EQ 0).YLENGTH
         AIF   (&LENGTH EQ 1).MEND
.*  GENERATE SEQUENCE OF MVC'S UNTIL &LENGTH IS EXHAUSTED
&L       SETA  &LENGTH-1               INITIAL REMAINING LENGTH
&P       SETA  1                       INITIAL OFFSET
.MVLOOP  AIF   (&L LE 0).MEND
         AIF   (&L EQ 1).MVLI
&LI      SETA  256
         AIF   (&L GT 256).MVL1
&LI      SETA  &L
.MVL1    MVC   0(&LI,0),0              PROPAGATE PADDING CHAR
         ORG   *-4
         DC    S(&P&PLUS&FIELD,0&PLUS&FIELD)
&L       SETA  &L-256
&P       SETA  &P+256
         AGO   .MVLOOP
.MVLI    MVI   &P&PLUS&FIELD,&CHAR&C
         MEXIT
.YLENGTH MNOTE 12,'****** BLANK: ILLEGAL OR INDETERMINATE LENGTH'
         MEXIT
.YFIELD  BMCERMAC BLANK,10,FIRST,,,&LABEL                               23JUL73P
.MEND    MEND
./ ADD NAME=BLANKL   0102-79040-81232-1741-00027-00027-00000-GRZ003  00
         MACRO
&LABEL   BLANKL &FIELD,&LENGTH,&CHAR
.*                                                   20AUG81-BIRKENBIHL
.*  PAD FIELD WITH &CHAR (LONG)                                         06AUG731
.*
.*  &FIELD  : RS-ADDR   START ADDR OF FIELD TO BE PADDED WITH &CHAR
.*  &LENGTH : ABS.EXPR (1<VALUE<4096) | SELF.DEF.TERM>0 |
.*            <RX-ADDRESS> | (GPR)
.*            LENGTH OF FIELD
.*  &CHAR   : ABS.EXPR<256   FILL CHARACTER; DEFAULT IS C' '
.*
         LCLC  &L,&C
         AIF   ('&FIELD' EQ '').YFIELD
         AIF   ('&LENGTH' NE '').C
&L       SETC  'L''&FIELD'
.C       AIF   ('&CHAR' NE '').A
&C       SETC  'C'' '''                SET DEFAULT FILL CHARACTER
.A       ANOP                                                           23JUL73P
&LABEL   BMCLA 14,&FIELD               GET FIELD ADR                    23JUL73P
         BMCLA 15,&LENGTH&L            LEN OF FIELD
         BMCLA 1,&CHAR&C
         SLL   1,24                    SHIFT AS PAD CHAR
         MVCL  14,0                    MOVE CHAR AND PAD
         MEXIT
.YFIELD  BMCERMAC BLANKL,10,FIRST,,,&LABEL                              23JUL73P
.MEND    MEND
./ ADD NAME=BMCERMAC 0100-21053-21053-1621-00216-00216-00000-GRZ027  53
         MACRO                                                          19FEB73P
         BMCERMAC &MAC,&N,&OPRND,&BAD,&NEW,&LABEL,&DETAIL=,&SC=         19FEB73P
.*                                                         11MAR70-PAHL 19FEB73P
.*  MACRO GENERATION ERROR MESSAGES (MNOTES)               06AUG73-PAHL 06AUG73P
.*                                                                      19FEB73P
.*  &MAC    : NAME OF CALLING MACRO                                     19FEB73P
.*  &N      : DECIMAL<998   ERROR MESSAGE CODE                          19FEB73P
.*  &OPRND  : IDENTIFIES THE OPERAND IN ERROR                           19FEB73P
.*  &BAD    : VALUE OF THE ERRONEOUS OPERAND (USUALLY)                  19FEB73P
.*  &NEW    : VALUE SUBSTITUTED FOR &BAD (..4 MESSAGES)                 19FEB73P
.*  &LABEL  : LABEL OPERAND OF CALLING MACRO (GENERATE &LABEL DS 0H)    19FEB73P
.*  &DETAIL : CHAR.STRING   OPTIONAL EXTRA INFORMATION ABOUT ERROR,     19FEB73P
.*            WILL BE DISPLAYED IN A SECOND MNOTE.                      19FEB73P
.*  &SC     : DECIMAL<4096|* MNOTE SEVERITY CODE (OVERRIDES DEFAULTS)   19FEB73P
.*                                                                      19FEB73P
.*             ERROR CODE "SYSTEM":                                     19FEB73P
.*              10-19  OPERAND MISSING                                  19FEB73P
.*              20-29  OPERAND INVALID                                  19FEB73P
.*              30-39  OPERAND INCONSISTENT                             19FEB73P
.*              40-49  OPERAND IGNORED                                  19FEB73P
.*              60-69  OPERANDS EXCLUSIVE  ETC.                         20JUL73P
.*              70-79  OPERAND NOT SUPPORTED YET                        19FEB73P
.*              80-87  OPERAND ILLEGAL WITH MF=&NEW                     19FEB73P
.*              .0  STANDARD CASE                                       19FEB73P
.*              .1  ... HERE ...                                        19FEB73P
.*              .3  ... - ASSUMED &NEW                                  19FEB73P
.*              .4  ... - IGNORED                                       19FEB73P
.*              .5  ... REGISTER REQUIRED                               19FEB73P
.*              .6  ... REGISTER NOT PERMITTED                          19FEB73P
.*              .8  ... WITH MF=&NEW                                    19FEB73P
.*              .9  ... HERE ... WITH MF=&NEW                           19FEB73P
.*             (NEARLY) NO SYSTEM FOR &N>100: NUMEROUS INDIVIDUAL MSGS  19FEB73P
.*                                                                      19FEB73P
         GBLA  &BMCERSC            HIGHEST SEVERITY CODE                19FEB73P
         LCLC  &MC                 SEVERITY CODE FOR MNOTE              19FEB73P
         LCLC  &ID1,&H                                                  19FEB73P
         AIF   (T'&N NE 'N' OR K'&N GE 4).Y998                          20JUL73P
.*  SET MNOTE SEVERITY CODE                                             19FEB73P
&MC      SETC  '0'                                                      19FEB73P
         AIF   ('&SC' EQ '').MCDEF NO EXTERNALLY SPECIFIED SC           19FEB73P
&MC      SETC  '&SC'                                                    19FEB73P
         AGO   .MCMAX                                                   19FEB73P
.MCDEF   AIF   (&N EQ 146 OR &N EQ 213).MCMAX                           19FEB73P
&MC      SETC  '4'                 ..4, 40-49, 140-149                  20JUL73P
         AIF   ('&N'(K'&N,1) EQ '4' OR                                 -20JUL73P
               &N GE 40 AND &N LE 49 OR &N GE 140 AND &N LE 149).MCMAX  20JUL73P
&MC      SETC  '8'                 ..3 FROM 13 TO 193                   06AUG73P
         AIF   ('&N'(K'&N,1) EQ '3' AND &N GE 13 AND &N LE 193).MCMAX   06AUG73P
&MC      SETC  '12'                ALL ELSE                             19FEB73P
.*  HIGHEST SEVERITY CODE FOR USE BY CALLING MACRO                      19FEB73P
.MCMAX   AIF   ('&MC' EQ '*').SETMSGI                                   19FEB73P
         AIF   (&BMCERSC GE &MC).SETMSGI                                19FEB73P
&BMCERSC SETA  &MC                 UPDATE HIGHEST SEVERITY CODE         19FEB73P
.*  CONSTRUCT MESSAGE ID: NUMBER, MACRO NAME                            19FEB73P
.SETMSGI ANOP                                                           19FEB73P
&ID1     SETC  '0000'(1,4-K'&N)'&N'                                     19FEB73P
&ID1     SETC  'BMC'.'&ID1'(2,3)' '                                     19FEB73P
.*  SELECT MESSAGE FINALLY                                              19FEB73P
         AIF   (&N EQ 1).E1                                             19FEB73P
         AIF   (&N EQ 2).E2                                             19FEB73P
         AIF   (&N EQ 3).E3                                             19FEB73P
         AIF   (&N EQ 4).E4                                             19FEB73P
         AIF   ('&N'(K'&N,1) NE '1' AND '&N'(K'&N,1) NE '9').GOON       19FEB73P
&H       SETC  ' HERE'                                                  19FEB73P
.GOON    AIF   (&N GE 100).GO100                                        19FEB73P
         AIF   (&N EQ 10 OR &N EQ 11).E10                               19FEB73P
         AIF   (&N EQ 13).E13                                           19FEB73P
         AIF   (&N EQ 18).E18                                           19FEB73P
         AIF   (&N EQ 20 OR &N EQ 21).E20                               19FEB73P
         AIF   (&N EQ 23).E23                                           19FEB73P
         AIF   (&N EQ 24).E24                                           19FEB73P
         AIF   (&N EQ 25).E25                                           19FEB73P
         AIF   (&N EQ 27).E27                                           19FEB73P
         AIF   (&N EQ 28).E28                                           19FEB73P
         AIF   (&N EQ 30 OR &N EQ 31).E30                               19FEB73P
         AIF   (&N EQ 34).E34                                           19FEB73P
         AIF   (&N EQ 40 OR &N EQ 41).E40                               19FEB73P
         AIF   (&N EQ 60 OR &N EQ 61).E60                               20JUL73P
         AIF   (&N EQ 64).E64                                           20JUL73P
         AIF   (&N EQ 67).E67                                           20JUL73P
         AIF   (&N EQ 70).E70                                           19FEB73P
         AIF   (&N EQ 73).E73                                           19FEB73P
         AIF   (&N EQ 80).E80                                           19FEB73P
         AIF   (&N EQ 84).E84                                           19FEB73P
         AIF   (&N EQ 86).E86                                           19FEB73P
         AGO   .Y999                                                    19FEB73P
.GO100   AIF   (&N EQ 110 OR &N EQ 111).E110                            19FEB73P
         AIF   (&N EQ 113).E113                                         19FEB73P
         AIF   (&N EQ 123).E123                                         19FEB73P
         AIF   (&N EQ 130 OR &N EQ 131).E130                            19FEB73P
         AIF   (&N EQ 132).E132                                         19FEB73P
         AIF   (&N EQ 135).E135                                         19FEB73P
         AIF   (&N EQ 136).E136                                         19FEB73P
         AIF   (&N EQ 140 OR &N EQ 141).E140                            19FEB73P
         AIF   (&N EQ 146).E146                                         19FEB73P
         AIF   (&N EQ 190).E190                                         19FEB73P
         AIF   (&N EQ 213).E213                                         19FEB73P
         AGO   .Y999                                                    19FEB73P
.E1      MNOTE &MC,'&ID1&MAC: MISSING OPERAND(S)'                       19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E2      MNOTE &MC,'&ID1&MAC: INVALID OPERAND(S)'                       19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E3      MNOTE &MC,'&ID1&MAC: INCONSISTENT OPERANDS'                    19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E4      MNOTE &MC,'&ID1&MAC: OPERAND(S) IGNORED'                       19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E10     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND MUST BE SPECIFIED&H'       19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E13     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND NOT SPECIFIED - "&NEW" ASS-19FEB73P
               UMED'                                                    19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E18     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND REQUIRED WITH MF=&NEW'     19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E20     MNOTE &MC,'&ID1&MAC:&H INVALID &OPRND OPERAND SPECIFIED - "&BA-19FEB73P
               D"'                                                      19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E23     MNOTE &MC,'&ID1&MAC: INVALID &OPRND OPERAND "&BAD" SUBSTITUTED-19FEB73P
                BY "&NEW"'                                              19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E24     MNOTE &MC,'&ID1&MAC: INVALID &OPRND OPERAND IGNORED - "&BAD"'  19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E25     MNOTE &MC,'&ID1&MAC: INVALID &OPRND OPERAND "&BAD" - MUST SPEC-19FEB73P
               IFY REGISTER'                                            19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E27     MNOTE &MC,'&ID1&MAC: INVALID &OPRND OPERAND "&BAD" - MUST SPEC-19FEB73P
               IFY SYMBOL'                                              19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E28     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND HAS INVALID VALUE FOR MF=&-19FEB73P
               NEW - "&BAD"'                                            19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E30     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND&H INCONSISTENT - "&BAD"'   19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E34     MNOTE &MC,'&ID1&MAC: INCONSISTENT &OPRND OPERAND IGNORED "&BAD-19FEB73P
               "'                                                       19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E40     AIF   ('&BAD' EQ '').E40A                                      19FEB73P
         MNOTE &MC,'&ID1&MAC: &OPRND OPERAND&H IGNORED - "&BAD"'        19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E40A    MNOTE &MC,'&ID1&MAC: &OPRND OPERAND&H IGNORED'                 19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E60     MNOTE &MC,'&ID1&MAC: &OPRND, &BAD OPERANDS&H MUTUALLY EXCLUSIV-20JUL73P
               E'                                                       20JUL73P
         AGO   .DETAIL                                                  20JUL73P
.E64     MNOTE &MC,'&ID1&MAC: &OPRND, &BAD OPERANDS MUTUALLY EXCLUSIVE -20JUL73P
               - &BAD IGNORED'                                          20JUL73P
         AGO   .DETAIL                                                  20JUL73P
.E67     MNOTE &MC,'&ID1&MAC: &OPRND, &BAD OPERANDS MUST NOT BE EQUAL'  20JUL73P
         AGO   .DETAIL                                                  20JUL73P
.E70     AIF   ('&BAD' NE '').E70A                                      19FEB73P
         MNOTE &MC,'&ID1&MAC: &OPRND OPERAND NOT SUPPORTED YET'         19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E70A    MNOTE &MC,'&ID1&MAC: &OPRND = &BAD NOT SUPPORTED YET'          19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E73     MNOTE &MC,'&ID1&MAC: VALUE "&BAD" OF &OPRND OPERAND PRESENTLY -19FEB73P
               NOT SUPPORTED - "&NEW" ASSUMED'                          19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E80     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND ILLEGAL WITH MF=&NEW'      19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E84     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND ILLEGAL WITH MF=&NEW, IGNO-19FEB73P
               RED'                                                     19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E86     MNOTE &MC,'&ID1&MAC: &OPRND OPERAND, REGISTER NOTATION INVALID-19FEB73P
                WITH MF=&NEW - "&BAD"'                                  19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E110    MNOTE &MC,'&ID1&MAC: &OPRND KEYWORD MUST NOT BE SET TO NULL&H' 19FEB73P
         MEXIT                                                          19FEB73P
.E113    MNOTE &MC,'&ID1&MAC: &OPRND KEYWORD MUST NOT BE SET TO NULL - -19FEB73P
               "&NEW" ASSUMED'                                          19FEB73P
         MEXIT                                                          19FEB73P
.E123    MNOTE &MC,'&ID1&MAC: INVALID VALUE "&BAD" OF YES/NO KEYWORD &O-19FEB73P
               PRND - "&NEW" ASSUMED'                                   19FEB73P
         MEXIT                                                          19FEB73P
.E130    MNOTE &MC,'&ID1&MAC: R= OPERAND MUST SPECIFY 2 AUXILIARY REGIS-19FEB73P
               TERS&H'                                                  19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E132    MNOTE &MC,'&ID1&MAC: R=0 NOT PERMITTED WITH &OPRND=&BAD'       19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E135    MNOTE &MC,'&ID1&MAC: &OPRND AND R= OPERANDS BOTH SPECIFY REGIS-19FEB73P
               TER 0'                                                   19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E136    MNOTE &MC,'&ID1&MAC: &OPRND AND R= OPERANDS MUST NOT SPECIFY S-19FEB73P
               AME REGISTER'                                            19FEB73P
         AGO   .DETAIL                                                  20JUL73P
.E140    MNOTE &MC,'&ID1&MAC: LBLID OPERAND&H INVALID WITH DSECT - IGNO-19FEB73P
               RED'                                                     19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E146    MNOTE &MC,'&ID1&MAC: LBLID OPERAND TRUNCATED TO 3 CHARACTERS'  19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E190    MNOTE &MC,'&ID1&MAC: PREREQUESITIVE MACRO "&OPRND" NOT CALLED -19FEB73P
               BEFORE'                                                  19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E213    AIF   ('&NEW' EQ '').E213A                                     19FEB73P
         MNOTE &MC,'&ID1&MAC: NO &OPRND SPECIFIED, "&NEW" ASSUMED'      19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.E213A   MNOTE &MC,'&ID1&MAC: NO &OPRND SPECIFIED, ALL ASSUMED'         19FEB73P
         AGO   .DETAIL                                                  19FEB73P
.*                                                                      19FEB73P
.Y998    MNOTE 16,'BMC998 BMCERMAC: ILLEGAL ERROR CODE &N FROM &MAC'    19FEB73P
&BMCERSC SETA  16                                                       19FEB73P
         AGO   .DETAIL                                                  20JUL73P
.Y999    MNOTE 16,'BMC999 BMCERMAC: UNKNOWN ERROR CODE &N FROM &MAC'    19FEB73P
&BMCERSC SETA  16                                                       19FEB73P
.*                                                                      19FEB73P
.*   OPTIONALLY GENERATE SECOND MNOTE GIVING DETAIL INFORMATION         19FEB73P
.DETAIL  AIF   ('&DETAIL' EQ '').LABEL                                  19FEB73P
         AIF   ('&DETAIL'(1,1) EQ '''').DETAILQ                         19FEB73P
         MNOTE '               &DETAIL'                                 19FEB73P
         AGO   .LABEL                                                   19FEB73P
.DETAILQ MNOTE &DETAIL                                                  19FEB73P
.*                                                                      19FEB73P
.*  GENERATE LABEL FOR CALLING MACRO TO AVOID SECONDARY ERRORS          19FEB73P
.*  (UNDEFINED LABEL)                                                   19FEB73P
.LABEL   AIF   ('&LABEL' EQ '').MEXIT                                   19FEB73P
&LABEL   DC    0H'0'                                                    19FEB73P
.MEXIT   MEND                                                           19FEB73P
./ ADD NAME=BMCLA    0100-21053-21053-1621-00038-00038-00000-GRZ027  53
         MACRO
&LABEL   BMCLA   &REG,&PAR
.*                                                        16MAR70-GEIST
.*  LOAD REGISTER &REG WITH &PAR                          12JUN72-PAHL
.*
.*  &REG    : ABS.EXPR<16   REGISTER TO BE LOADED.
.*  &PAR    : RX-ADDR|(REG)|<RX-ADDR>   ADDR/VALUE TO BE LOADED INTO
.*            REGISTER.
.*
         LCLC  &C1,&C2
         AIF   ('&PAR' EQ '').NAMEIT
         AIF   ('&PAR'(1,1) EQ '(').LR
         AIF   ('&PAR'(1,1) EQ '<').L
.*  &PAR = RX-ADDR
         AIF   ('&PAR' EQ '0').LA0
&LABEL   LA    &REG,&PAR
         MEXIT
.LA0     ANOP
&LABEL   SR    &REG,&REG
         MEXIT
.*  &PAR = (REG)
.LR      AIF   ('&PAR(1)' EQ '&REG(1)').NAMEIT
&LABEL   LR    &REG,&PAR(1)
         MEXIT
.*  &PAR = <RX-ADDR>
.L       AIF   (K'&PAR GT 10).LTWO
&C1      SETC  '&PAR'(2,K'&PAR-2)
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&PAR'(2,8)
&C2      SETC  '&PAR'(10,K'&PAR-10)
.LOAD    ANOP
&LABEL   L     &REG,&C1&C2
         MEXIT
.NAMEIT  AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=BMCLAM   0100-21053-21053-1621-00041-00041-00000-GRZ027  53
         MACRO
&LABEL   BMCLAM
.*                                                         11MAR70-PAHL
.*  LOAD REGISTER &SYSLIST(&K-1) WITH &SYSLIST(&K)         12JUN72-PAHL
.*
.*  &SYSLIST(&K-1) : ABS.EXPR<16   REGISTER TO BE LOADED
.*  &SYSLIST(&K)   : RX-ADDR|(REG)|<RX-ADDR>   ADDR/VALUE TO BE LOADED
.*                   INTO REGISTER &SYSLIST(&K-1)
.*
         LCLA  &K
         LCLC  &C1,&C2
         AIF   ('&LABEL' EQ '').LOOP
&LABEL   DC    0H'0'
.LOOP    AIF   (&K GE N'&SYSLIST).MEND
&K       SETA  &K+2
         AIF   ('&SYSLIST(&K)' EQ '').LOOP
         AIF   ('&SYSLIST(&K)'(1,1) EQ '(').LR
         AIF   ('&SYSLIST(&K)'(1,1) EQ '<').L
.*  &SYSLIST(&K) = RX-ADDR
         AIF   ('&SYSLIST(&K)' EQ '0').LA0
         LA    &SYSLIST(&K-1),&SYSLIST(&K)
         AGO   .LOOP
.LA0     SR    &SYSLIST(&K-1),&SYSLIST(&K-1)
         AGO   .LOOP
.*  &SYSLIST(&K) = (REG)
.LR      AIF   ('&SYSLIST(&K,1)' EQ '&SYSLIST(&K-1,1)').LOOP
         LR    &SYSLIST(&K-1),&SYSLIST(&K,1)
         AGO   .LOOP
.*  &SYSLIST(&K) = <RX-ADDR>
.L       AIF   (K'&SYSLIST(&K) GT 10).LTWO
&C1      SETC  '&SYSLIST(&K)'(2,K'&SYSLIST(&K)-2)
&C2      SETC  ''
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&SYSLIST(&K)'(2,8)
&C2      SETC  '&SYSLIST(&K)'(10,K'&SYSLIST(&K)-10)
.LOAD    ANOP
         L     &SYSLIST(&K-1),&C1&C2
         AGO   .LOOP
.MEND    MEND
./ ADD NAME=BMCLETP  0100-21053-21053-1621-00059-00059-00000-GRZ027  53
         MACRO
&LABEL   BMCLETP &A,&VALUE,&R=0,&L=
.*                                                        20FEB73-PAHL
.*  LET &A -> &VALUE                                      23JUL73-PAHL  23JUL73P
.*
.*  &A      : RX-ADDR (RS-ADDR IF L=C)   STORAGE LOCATION WHICH IS TO
.*            RECEIVE THE VALUE
.*  &VALUE  : RX-ADDR       : THIS ADDRESS VALUE IS STORED TO A (LA,ST)
.*            | <RX-ADDR>   : THE CONTENT OF THE FIELD ADDRESSED BY
.*                            RX-ADDR IS STORED TO &A
.*            | (REG0-15)   : THE CONTENT OF THE GPR IS STORE TO &A
.*  &L      : |H|C   LENGTH MODIFIER: SPECIFY THE LENGTH OF THE FIELD
.*            &A, AS WELL AS OF THE FIELD ADDRESSED BY NOTATION
.*            <RX-ADDR> ...
.*  &R      : REG0-15   AUXILIARY REGISTER
.*
         LCLC  &C1,&C2
         AIF   ('&VALUE' EQ '').LABEL
         AIF   ('&L' NE '' AND '&L' NE 'H' AND '&L' NE 'C').YL
         AIF   ('&VALUE'(1,1) EQ '(').STREG
         AIF   ('&VALUE'(1,1) EQ '<').LOAD
.*  &VALUE = RX-ADDR
         AIF   ('&L' EQ 'C').MVI
.LAST    AIF   ('&VALUE' EQ '0').STZ
&LABEL   LA    &R,&VALUE
         ST&L  &R,&A
         MEXIT
.STZ     ANOP
&LABEL   SR    &R,&R
         ST&L  &R,&A
         MEXIT
.MVI     AIF   ('&VALUE'(K'&VALUE,1) EQ ')').LAST
&LABEL   MVI   &A,&VALUE
         MEXIT
.*  &VALUE = (REG)
.STREG   ANOP
&LABEL   ST&L  &VALUE(1),&A
         MEXIT
.*  &VALUE = <RX-ADDR>
.LOAD    AIF   (K'&VALUE GT 10).LTWO
&C1      SETC  '&VALUE'(2,K'&VALUE-2)
         AGO   .LOADIT
.LTWO    ANOP
&C1      SETC  '&VALUE'(2,8)
&C2      SETC  '&VALUE'(10,K'&VALUE-10)
.LOADIT  AIF   ('&L' EQ 'C').IC
&LABEL   L&L   &R,&C1&C2
         ST&L  &R,&A                                                    23JUL73P
         MEXIT
.IC      ANOP
&LABEL   IC    &R,&C1&C2                                                23JUL73P
         STC   &R,&A                                                    23JUL73P
         MEXIT                                                          23JUL73P
.*
.YL      BMCERMAC BMCLETP,20,L,&L
.LABEL   AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=BMCSSP   0100-21053-21053-1621-00035-00035-00000-GRZ027  53
         MACRO
&LABEL   BMCSSP &WORD,&PARM,&R=(0,15)
.*                                                         19MAY72-PAHL
.*  STORE STRING POINTER INTO FULLWORD                     12JUN72-PAHL
.*
.*  &WORD   : RS-ADDR   WHERE TO BUILD THE STRING POINTER
.*  &PARM  ADDR|(ADDR,LEN)   STRING ADDRESS AND LENGTH
.*            IF ONLY ADDR SPECIFIED LENGTH IS ASSUMED TO COME FROM
.*            HI-O BYTE OF ADDR
.*            IF (ADDR,LEN) SPECIFIED AND A SUBOPERAND OMITTED, THE
.*            CONTENTS OF THE CORR. FIELD IN THE STRING POINTER REMAIN
.*            UNCHANGED.
.*     ADDR : (REG)|RX-ADDR|<RX-ADDR>
.*      LEN : (REG)|ABS.EXPR<256
.*
.*  &R(2) USED BY THIS, &R(1) BY BMCLETP MACRO
.*
         AIF   (N'&PARM GT 1).PAIR
&LABEL   BMCLETP &WORD,&PARM,R=&R(1)
         MEXIT
.PAIR    AIF   ('&PARM(2)' NE '').FULL
         AIF   ('&R(2)' EQ '').YR2
&LABEL   IC    &R(2),&WORD             SAVE LENGTH BYTE
         BMCLETP &WORD,&PARM(1),R=&R(1)
         STC   &R(2),&WORD             RESTORE LENGTH BYTE
         MEXIT
.FULL    ANOP
&LABEL   BMCLETP &WORD,&PARM(1),R=&R(1)
         BMCLETP &WORD,&PARM(2),L=C,R=&R(1)
         MEXIT
.YR2     BMCERMAC BMCSSP,131
         AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=BPARM    0100-21053-21053-1621-00037-00037-00000-GRZ027  53
         MACRO                                                          BPAR0001
&LABEL   BPARM &LIST                                                    BPAR0002
.*                                                             -BLASIUS BPAR0004
.* BPARM BUILDS A PARAMETER LIST (EXECUTE FORM ONLY).      19JUL73-PAHL 19JUL73P
.*                                                                      BPAR0005
.* MACRO INSTRUCTION FORMAT:   LABEL   BPARM   PARLIST-ADDRX,<LIST>     BPAR0006
.* <LIST> IS A LIST OF MACRO INSTRUCTION OPERANDS EACH OF WHICH MUST    BPAR0007
.*        BE OF THE FORM   ADDRX                                        BPAR0008
.*                    OR   (<FLAGS>,PARAMETER-ADDRX)                    BPAR0009
.* <FLAGS> MUST BE A SELF-DEFINING TERM OF A VALUE NOT EXCEEDING 255.   BPAR0010
.*                                                                      BPAR0011
.* THE LAST WORD OF THE PARAMETER LIST BUILT BY BPARM WILL HAVE THE     BPAR0012
.* HIGH ORDER BIT SET TO 1.                                             BPAR0013
.*                                                                      BPAR0014
.* EXAMPLE:    LAB   BPARM   LIST1,PAR1,(X'20',PAR2),PAR3               BPAR0015
.*                                                                      BPAR0016
         LCLA  &I,&J,&OFF                                               19JUL73P
         AIF   ('&LABEL' EQ '').GO                                      19JUL73P
&LABEL   DS    0H                                                       19JUL73P
.GO      AIF   (N'&SYSLIST LE 1).Y1                                     19JUL73P
&I       SETA  1                                                        19MAY72P
.B       ANOP                                                           19JUL73P
&I       SETA  &I+1                                                     BPAR0026
&OFF     SETA  &I*4-8                                                   19JUL73P
&J       SETA  N'&SYSLIST(&I)                                           BPAR0027
         AIF   (&J EQ 0).NEXT                                           19JUL73P
         AIF   ('&SYSLIST(&I,&J)' EQ '').MVI                            19JUL73P
         LA    0,&SYSLIST(&I,&J)                                        19JUL73P
         ST    0,&OFF+&LIST                                             19JUL73P
.MVI     AIF   (&J EQ 1 OR '&SYSLIST(&I,1)' EQ '').NEXT                 19JUL73P
         MVI   &OFF+&LIST,&SYSLIST(&I,1)                                19JUL73P
.NEXT    AIF   (&I LT N'&SYSLIST).B                                     BPAR0033
         OI    &OFF+&LIST,X'80'                                         19JUL73P
         MEXIT                                                          19JUL73P
.Y1      BMCERMAC BPARM,001                                             19JUL73P
         MEND                                                           BPAR0035
./ ADD NAME=BTMLAST  0100-21053-21053-1621-00044-00044-00000-GRZ027  53
         MACRO
&LABEL   BTMLAST &PAR,&ADDR,&R=0,&L=
.*                                                        14MAY71-PAHL
.*  LOAD PARAMETER ADDRESS AND STORE IT
.*       &PAR    : RX-ADDR|(REG)|<RX-ADDR>  PARAMETER ADDR/VALUE
.*       &ADDR   : RX-ADDR   LOCATION TO WHICH &PAR IST TO BE STORED
.*
         LCLC  &C1,&C2
         MNOTE 0,'****** MACRO "BTMLAST" CALLED -- "BMCLETP" SHOULD BE -
               USED'
         AIF   ('&PAR' EQ '').NAMEIT
         AIF   ('&PAR'(1,1) EQ '(').LR
         AIF   ('&PAR'(1,1) EQ '<').L
.*  &PAR = RX-ADDR
         AIF   ('&L' EQ 'C').MVI
         AIF   ('&PAR' EQ '0').STZ
&LABEL   LA    &R,&PAR
         ST&L  &R,&ADDR
         MEXIT
.STZ     ANOP
&LABEL   SR    &R,&R
         ST&L  &R,&ADDR
         MEXIT
.MVI     MVI   &ADDR,&PAR
         MEXIT
.*  &PAR = (REG)
.LR      ANOP
&LABEL   ST&L  &PAR(1),&ADDR
         MEXIT
.*  &PAR = <RX-ADDR>
.L       AIF   (K'&PAR GT 10).LTWO
&C1      SETC  '&PAR'(2,K'&PAR-2)
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&PAR'(2,8)
&C2      SETC  '&PAR'(10,K'&PAR-10)
.LOAD    ANOP
&LABEL   L     &R,&C1&C2
         ST&L  &R,&ADDR
         MEXIT
.NAMEIT  AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=BTSERMAC 0100-21053-21053-1621-00038-00038-00000-GRZ027  53
         MACRO
         BTSERMAC &MAC,&N,&OPRND,&BAD,&NEW,&SC=
.*
.*  BTSERMAC SUBSTITUTE: TRANSLATES THE OLD BTSERMAC MESSAGE NUMBERS
.*  TO BMCERMAC MESSAGE NUMBERS
.*
.*  DONE AS FOLLOWS:
.*  0   IS TRANSLATED TO   70
.*  &T ARRAY IS SET TO TRANSLATE THOSE NUMBERS THAT ARE DIFFERENT
.*  IF NEW NUMBER IS THE SAME AS OLD, &T(OLD) = 0.
.*
.*  FOR MEANING OF MACRO OPERAND SEE BMCERMAC.
.*
         LCLA  &T(131),&NN
         MNOTE 0,'****** BTSERMAC CALLED BY &MAC - MACRO &MAC SHOULD BE-
                CHANGED TO CALL BMCERMAC'
         AIF   (T'&N NE 'N' OR K'&N GT 4).CALLN ERR MSG BY BMCERMAC
         AIF   (&N GT 131).CALLN       SAME
&NN      SETA  70
         AIF   (&N EQ  0).CALLT        0 -> 70
&T(13)   SETA  14
&T(14)   SETA  13
&T(19)   SETA  18
&T(23)   SETA  24
&T(33)   SETA  34
&T(83)   SETA  40
&T(90)   SETA  80
&T(91)   SETA  18
&T(93)   SETA  84
&T(110)  SETA  86
&T(120)  SETA  136
&NN      SETA  &T(&N)
         AIF   (&NN EQ 0).CALLN        NO TRANSLATE
.CALLT   BMCERMAC &MAC,&NN,&OPRND,&BAD,&NEW,SC=&SC
         MEXIT
.CALLN   BMCERMAC &MAC,&N,&OPRND,&BAD,&NEW,SC=&SC
         MEND
./ ADD NAME=BTSLA    0100-21053-21053-1621-00038-00038-00000-GRZ027  53
         MACRO
&LABEL   BTSLA   &REG,&PAR
.*                                                        16MAR70-GEIST
.*  LOAD REGISTER &REG WITH &PAR
.*             &REG   -ABS.EXPR    REGISTER TO BE LOADED
.*             &PAR   -ADDRX|(REG)|<ADDRX>
.*
         LCLC  &C1,&C2
         MNOTE 0,'****** MACRO "BTSLA" CALLED -- "BMCLA" SHOULD BE USED-
               '
         AIF   ('&PAR' EQ '').NAMEIT
         AIF   ('&PAR'(1,1) EQ '(').LR
         AIF   ('&PAR'(1,1) EQ '<').L
.*                                      &PAR = ADDRX
         AIF   ('&PAR' EQ '0').LA0
&LABEL   LA    &REG,&PAR
         MEXIT
.LA0     ANOP
&LABEL   SR    &REG,&REG
         MEXIT
.*                                      &PAR = (REGISTER)
.LR      AIF   ('&PAR(1)' EQ '&REG(1)').NAMEIT
&LABEL   LR    &REG,&PAR(1)
         MEXIT
.*                                      &PAR = <ADDRX>
.L       AIF   (K'&PAR GT 10).LTWO
&C1      SETC  '&PAR'(2,K'&PAR-2)
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&PAR'(2,8)
&C2      SETC  '&PAR'(10,K'&PAR-10)
.LOAD    ANOP
&LABEL   L     &REG,&C1&C2
         MEXIT
.NAMEIT  AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=BTSLAM   0100-21053-21053-1621-00041-00041-00000-GRZ027  53
         MACRO
&LABEL   BTSLAM
.*                                                         11MAR70-PAHL
.*  LOAD REGISTER &SYSLIST(&K-1) WITH &SYSLIST(&K)
.*             &SYSLIST(&K-1)   -ABS.EXPR    REGISTER TO BE LOADED
.*             &SYSLIST(&K)     -ADDRX|(REG)|<ADDRX>
.*
         LCLA  &K
         LCLC  &C1,&C2
         MNOTE 0,'****** MACRO "BTSLAM" CALLED -- "BMCLAM" SHOULD BE US-
               ED'
         AIF   ('&LABEL' EQ '').LOOP
&LABEL   DC    0H'0'
.LOOP    AIF   (&K GE N'&SYSLIST).MEND
&K       SETA  &K+2
         AIF   ('&SYSLIST(&K)' EQ '').LOOP
         AIF   ('&SYSLIST(&K)'(1,1) EQ '(').LR
         AIF   ('&SYSLIST(&K)'(1,1) EQ '<').L
.*                                      &SYSLIST(&K) = ADDRX
         AIF   ('&SYSLIST(&K)' EQ '0').LA0
         LA    &SYSLIST(&K-1),&SYSLIST(&K)
         AGO   .LOOP
.LA0     SR    &SYSLIST(&K-1),&SYSLIST(&K-1)
         AGO   .LOOP
.*                                      &SYSLIST(&K) = (REG)
.LR      AIF   ('&SYSLIST(&K,1)' EQ '&SYSLIST(&K-1,1)').LOOP
         LR    &SYSLIST(&K-1),&SYSLIST(&K,1)
         AGO   .LOOP
.*                                      &SYSLIST(&K) = <ADDRX>
.L       AIF   (K'&SYSLIST(&K) GT 10).LTWO
&C1      SETC  '&SYSLIST(&K)'(2,K'&SYSLIST(&K)-2)
&C2      SETC  ''
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&SYSLIST(&K)'(2,8)
&C2      SETC  '&SYSLIST(&K)'(10,K'&SYSLIST(&K)-10)
.LOAD    ANOP
         L     &SYSLIST(&K-1),&C1&C2
         AGO   .LOOP
.MEND    MEND
./ ADD NAME=BTXCODE  0100-21053-21053-1621-00119-00119-00000-GRZ027  53
         MACRO
&LABEL   BTXCODE &LIST,&FAIL=,&COUNT=,&MF=L
.*                                                         10AUG70-PAHL
.*  SCAN LIST FOR CHARACTER STRING CODE                    19JUL73-PAHL 19JUL73P
.*
.*  &LIST   : (MF=L) LIST OF LEGAL CODES: CHAR.STRINGS WITHOUT QUOTES
.*            (MF=E) RX-ADDR|<RX-ADDR>|(REG2-12)|(15)
.*            ADDR OF STRING POINTER DEFINING PARAMETER TO BE DECODED
.*  &FAIL   : (MF=E) RX-ADDR, BRANCH EXIT IF PARAMETER NOT IN CODE LIST
.*  &COUNT  : (MF=L) CODE F|H|C|# : GENERATES EQU (#&LABEL) OR COUNT
.*            FIELD OF SPECIFIED LENGTH IN FRONT OF LIST LABEL, SPECIFY
.*            ING HOW MANY ENTRIES IN CODE LIST.
.*
         LCLA  &K,&N,&SLEN
         LCLC  &C                                                       19JUL73P
         AIF   ('&MF' NE 'L').MFE
.*  MF=L
&N       SETA  N'&LIST
         AIF   ('&FAIL' EQ '').L1
         BMCERMAC BTXCODE,84,FAIL,,&MF
.L1      AIF   (N'&SYSLIST LE 1).L2
         BMCERMAC BTXCODE,40,SECOND_AND_FF.,&SYSLIST(2)...
.L2      AIF   ('&COUNT' EQ '').NOCNT
         AIF   ('&COUNT' NE '#').CNTC
&C       SETC  '&LABEL'(1,7)                                            19JUL73P
#&C      EQU   &N
         AGO   .NOCNT
.CNTC    AIF   ('&COUNT' NE 'C').CNTH
         DC    AL1(&N)
         AGO   .NOCNT
.CNTH    AIF   ('&COUNT' NE 'H').CNTF
         DC    H'&N'
         AGO   .NOCNT
.CNTF    AIF   ('&COUNT' NE 'F').YCNT
         DC    F'&N'
         AGO   .NOCNT
.YCNT    BMCERMAC BTXCODE,24,COUNT,&COUNT
.NOCNT   ANOP
&LABEL   DS    0C
.LOOP    AIF   (&K GE &N).TERM
&K       SETA  &K+1
&SLEN    SETA  K'&LIST(&K)
         AIF   (&SLEN LE 0).LOOP       IGNORE NULL ENTRIES              19JUL73P
         AIF   ('&LIST(&K)'(1,1) NE '''').LUNQ
&SLEN    SETA  &SLEN-2                 ACCOUNT ENCLOSING QUOTES
         AIF   (&SLEN LE 0).LOOP       IGNORE NULL ENTRIES
         DC    AL1(&SLEN),C&LIST(&K)
         AGO   .LOOP
.LUNQ    DC    AL1(&SLEN),C'&LIST(&K)'                                  19JUL73P
         AGO   .LOOP
.TERM    DC    AL1(0)                  TERMINATOR
         MEXIT
.*
.MFE     AIF   (N'&MF NE 2 OR '&MF(1)' NE 'E').MFSUBR
.*  MF=(E,LISTADDR)
         AIF   ('&COUNT' EQ '').E1
         BMCERMAC BTXCODE,84,COUNT,,&MF(1)
.E1      ANOP
&LABEL   BMCLAM 15,&LIST,1,&MF(2)
         BAL   14,BTXCODE
         AIF   ('&FAIL' EQ '').YFAIL
         BC    15,&FAIL                FAILURE EXIT
         MEXIT
.YFAIL   BMCERMAC BTXCODE,18,FAIL,,&MF(1),SC=8
         NOP   0                       DUMMY FAILURE EXIT
         MEXIT
.*
.MFSUBR  AIF   ('&MF' NE 'SUBR').YMF
.*  MF=SUBR
         AIF   ('&LABEL' EQ '').SUBR91
         BMCERMAC BTXCODE,84,LABEL,,&MF
.SUBR91  AIF   ('&LIST' EQ '').SUBR92
         BMCERMAC BTXCODE,84,LIST,,&MF
.SUBR92  AIF   ('&FAIL' EQ '').SUBR93
         BMCERMAC BTXCODE,84,FAIL,,&MF
.SUBR93  AIF   ('&COUNT' EQ '').SUBR94
         BMCERMAC BTXCODE,84,COUNT,,&MF
.SUBR94  SPACE
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*   BTXCODE -- IDENTIFY A CHARACTER CODE PARAMETER VALUE              *
*                                                                     *
* INPUT: (R1)    : -> LIST OF LEGAL VALUES, GENERATED BY BTXCODE MF=L *
*        (R15)   : -> STRING POINTER DESCRIBING THE PARAMETER VALUE   *
* OUTPUT:(R2)    : 0 -- PARAMETER VALUE WAS NULL (PARAMETER OMITTED)  *
*                  1 TO N -- INDEX IDENTIFYING THE MATCHED VALUE      *
*                  (1ST TO N-TH IN THE LIST OF LEGAL VALUES).         *
*        (R15)-(R1) : CONTENTS DESTROYED                              *
* EXIT-NORMAL: 4(R14) -- CODE FOUND                                   *
* EXIT-ERROR:  0(R14) -- UNKNOWN CODE VALUE                           *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
BTXCODE  SR    0,0
         IC    0,0(,15)                LENGTH OF PARAMETER VALUE
         LTR   2,0
         BZ    4(,14)                  ZERO: PARAMETER OMITTED
         L     15,0(,15)               -> PARAMETER VALUE
         LA    15,0(,15)               GET A COUNT BYTE
BMC&SYSNDX.A AL 15,BMC&SYSNDX.D        COUNT LIST ENTRIES
         IC    2,0(,1)                 LENGTH OF VALUE IN LIST ENTRY
         CLR   2,0                     COMPARE WITH LENGTH OF PARM
         BE    BMC&SYSNDX.B            EQUAL: COMPARE VALUES
         LA    1,1(2,1)                -> NEXT ENTRY IN LIST
         LTR   2,2                     END OF LIST?
         BNZ   BMC&SYSNDX.A            NO, CONTINUE.
         BR    14                      FAILURE: CODE NOT FOUND
BMC&SYSNDX.B BCTR 2,0                  COMPARE LIST ENTRY AND
         EX    2,BMC&SYSNDX.C          PARAMETER VALUE
         LA    1,2(2,1)                -> NEXT ENTRY IN LIST
         BNE   BMC&SYSNDX.A            NO MATCH, CONTINUE.
         LR    2,15                    GET COUNT IDENTIFYING THE ENTRY
         SRL   2,24                    INTO LOW-ORDER BYTE
         B     4(,14)                  RETURN SUCCESS.
BMC&SYSNDX.C CLC 0(0,15),1(1)
BMC&SYSNDX.D DC FS24'1'
         SPACE 2
         MEXIT
.*
.YMF     BMCERMAC BTXCODE,20,MF,&MF,,&LABEL
         MEND
./ ADD NAME=BTXCVB   0100-21053-21053-1621-00061-00061-00000-GRZ027  53
         MACRO
&LABEL   BTXCVB &STRING,&FAIL=,&TEMP8=TEMP8,&MF=E
.*                                                         11AUG70-PAHL
.*  CONVERT EBCDIC DECIMAL STRING TO BINARY NUMBER         27OCT72-PAHL
.*
.*  &STRING : (MF=E) RX-ADDR|(REG)|<RX-ADDR>   ADDR OF STRING POINTER
.*            DESCRIBING THE CHAR STRING TO BE CONVERTED.
.*  &FAIL   : (MF=E) RX-ADDR|(REG)   BRANCH ADDR TO BE TAKEN IF STRING
.*            NOT ALL VALID DECIMAL DIGITS.
.*  &TEMP8  : (MF=SUBR)   DOUBLEWORD FOR CONVERSION.
.*
         AIF   ('&MF' NE 'E').MFSUBR
.*  MF=E
&LABEL   BMCLA 1,&STRING
         BAL   14,BTXCVB
         AIF   ('&FAIL' EQ '').YFAIL
         BC    15,&FAIL                FAILURE EXIT
         MEXIT
.YFAIL   BMCERMAC BTXCODE,18,FAIL,,&MF,SC=8
         NOP   0                       DUMMY FAILURE EXIT
         MEXIT
.*
.MFSUBR  AIF   ('&MF' NE 'SUBR').YMF
.*  MF=SUBR
         AIF   ('&LABEL' EQ '').SUBR1
         BMCERMAC BTXCVB,84,LABEL,,&MF
.SUBR1   AIF   ('&STRING' EQ '').SUBR2
         BMCERMAC BTXCVB,84,STRING,,&MF
.SUBR2   SPACE
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*        BTXCVB - DECIMAL INTEGER (CHARACTER) INPUT                   *
*                                                                     *
* INPUT: (R1) -> STRING POINTER DEFINING THE EBCDIC DECIMAL STRING    *
* OUTPUT:(R0) CONTAINS BINARY VALUE, CONDITION CODE IS SET            *
* EXIT-NORMAL:    4(R14)    (R0 CONTAINS ZERO IF NULL STRING)         *
* EXIT-ERROR:     0(R14)  - ILLEGAL CHARACTER IN INPUT, (R0) UNDEFINED*
* REGISTERS USED:   R14 - R2                                          *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
BTXCVB   DS    0H
         SR    2,2
         IC    2,0(,1)
         LTR   0,2
         BZ    4(,14)
         L     1,0(,1)
         LR    15,1
         CLI   0(15),C'0'
         BCR   4,14 .                  INVALID DECIMAL DIGIT
         LA    15,1(,15)
         BCT   0,*-10
         BCTR  2,0
         EX    2,*+14
         CVB   0,&TEMP8
         LTR   0,0 .                   SET CONDITION CODE
         B     4(,14)
         PACK  &TEMP8,0(,1)
         SPACE
         MEXIT
.*
.YMF     BMCERMAC BTXCVB,20,MF,&MF
         MEND
./ ADD NAME=BTXMVC   0100-21053-21053-1621-00059-00059-00000-GRZ027  53
         MACRO
&LABEL   BTXMVC &TO,&FROM,&LEN,&MF=E
.*                                                         13AUG70-PAHL
.*   VARIABLE LENGTH MOVE                                  12JUN72-PAHL
.*
.*  &TO     : RX-ADDR|(REG)|<RX-ADDR>   WHERE-TO FIELD ADDR
.*  &FROM   : RX-ADDR|(REG)|<RX-ADDR>   WHERE-FROM FIELD ADDR
.*  &LEN    : ABS.EXPR|(REG)            LENGTH TO BE MOVED
.*
         AIF   ('&MF' NE 'E').MFSUBR
&LABEL   BMCLAM 1,&TO,15,&FROM,0,&LEN
         BAL   14,BTXMVC
         MEXIT
.*
.MFSUBR  AIF   ('&MF' NE 'SUBR').YMF
         AIF   ('&LABEL' EQ '').SUBR1
         BMCERMAC BTXMVC,84,LABEL,,&MF
.SUBR1   AIF   ('&TO' EQ '').SUBR2
         BMCERMAC BTXMVC,84,FIRST,,&MF
.SUBR2   AIF   ('&FROM' EQ '').SUBR3
         BMCERMAC BTXMVC,84,SECOND,,&MF
.SUBR3   AIF   ('&LEN' EQ '').SUBR4
         BMCERMAC BTXMVC,84,THIRD,,&MF
.SUBR4   SPACE
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*        B T X M V C  - VARIABLE MOVE SUBROUTINE                      *
*                                                                     *
* INPUT:    (R1)  -> TO-AREA                                          *
*           (R15) -> FROM-AREA                                        *
*           (R0)  LENGTH TO BE MOVED                                  *
* OUTPUT:   (R1)  -> BEHIND TO-AREA                                   *
*           (R15) -> BEHIND FROM-AREA                                 *
*           (R0)  UNDEFINED                                           *
* EXIT:      (R14)                                                    *
* REGISTERS USED:   (R2)                                              *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
BTXMVC   DS    0H
         BCTR  0,0 .                   LENGTH - 1
         LTR   2,0
         BCR   4,14 .                  NULL LENGHT, DON'T MOVE
         SRA   0,8 .                   NUMBER OF FULL 256-BLOCKS
         BNP   *+28 .                  NONE, ONE VARIABLE MVC.
         MVC   0(256,1),0(15) .        MOVE ONE 256-BLOCK
         LA    1,256(,1)
         LA    15,256(,15)
         BCT   0,*-14
         LA    0,255
         NR    2,0 .                   MASK OUT RESIDUAL LENGTH
         EX    2,*+14 .                MOVE LAST INCOMPLETE BLOCK
         LA    1,1(2,1) .              SET BEHIND TO-AREA
         LA    15,1(2,15) .            SET BEHIND FROM-AREA
         BR    14
         MVC   0(,1),0(15)
         SPACE
         MEXIT
.*
.YMF     BMCERMAC BTXMVC,20,MF,&MF,,&LABEL
         MEND
./ ADD NAME=CLIM     0100-21053-21053-1621-00091-00091-00000-GRZ027  53
         MACRO
&LABEL   CLIM  &ADDRS,&MASK,&MPAT,&BNE=,&BE=
.*                                                        05APR71-GEIST
.*  COMPARE LOGICAL IMMEDIATE UNDER MASK                  27OCT72-PAHL
.*
.*  &ADDRS  : RS-ADDR   BYTE TO BE INTERROGATED
.*  &MASK   : SELF.DEF.TERM<16|'B0B1B2B3B4B5B6B7'   VALUE TO BE FOUND
.*            WHERE    BI = 1 :BIT I IS COMPARED WITH 1
.*                        = 0 :BIT I IS COMPARED WITH 0
.*                        = . :BIT I IS IGNORED
.*  &MPAT   : SELF.DEF.TERM<16   BIT SELECTION MASK FOR COMPARISON IF
.*            &MASK SPECFD IN 1ST ALTERNATIVE (DONE BY 1 AND 0 IN 2ND)
.*  &BNE    : RX-ADDR   BRANCH TO BE TAKEN IF NOT EQUAL
.*  &BE     : RX-ADDR   BRANCH TO BE TAKEN IF EQUAL (AT LEAST ONE OF
.*            &BNE AND &BE MUST BE SPECIFIED)
.*
         GBLA  &BMCERSC
         LCLA  &I
         LCLB  &O(8),&Z(8),&B1,&B0,&BP
         LCLC  &EQ
&BMCERSC SETA  0
         AIF   ('&LABEL' EQ '').GO
&LABEL   DC    0H'0'
.GO      AIF   ('&ADDRS' NE '').TSTBE
         BMCERMAC CLIM,10,FIRST
.TSTBE   AIF   ('&BNE&BE' NE '').TSTMASK
         BMCERMAC CLIM,10,BE_OR_BNE
.TSTMASK AIF   ('&MASK' NE '').TSTMSK2
         BMCERMAC CLIM,10,SECOND
         AGO   .MEND
.TSTMSK2 AIF   ('&MASK'(1,1) NE '''' ).SYMB
.*
.*  &MASK IS SPECIFIED AS PATTERN OF 1,0, AND .
.*
         AIF   ('&MPAT' EQ '').LENCHK
         BMCERMAC CLIM,41,THIRD
.LENCHK  AIF   (K'&MASK EQ 10).ANYERR
         BMCERMAC CLIM,20,SECOND,&MASK,DETAIL=BAD_LENGTH
.ANYERR  AIF   (&BMCERSC GT 0).MEND
.LOOP1   ANOP
&I       SETA  &I+1
&O(&I)   SETB  ('&MASK'(&I+1,1) EQ '1')
&Z(&I)   SETB  ('&MASK'(&I+1,1) EQ '0')
&BP      SETB  (&BP OR NOT (&O(&I) OR &Z(&I)))   OCCURRENCE OF A POINT
&B1      SETB  (&B1 OR &O(&I))         INDICATES OCCURRENCE OF A ONE
&B0      SETB  (&B0 OR &Z(&I))         INDICATES OCCURRENCE OF A ZERO
.CONT    AIF   (&I LE 7).LOOP1
         AIF   (&BP).NOCLI
         CLI   &ADDRS,B&MASK
.LAST0   ANOP
&EQ      SETC  'E'
.LAST    AIF   ('&BNE' EQ '').NOBNE3
         BN&EQ &BNE
         AIF   ('&BE' EQ '').MEND
.NOBNE3  B&EQ  &BE
         MEXIT
.NOCLI   AIF   (NOT &B1).NOONE
         TM    &ADDRS,B'&O(1)&O(2)&O(3)&O(4)&O(5)&O(6)&O(7)&O(8)'
&EQ      SETC  'O'
         AIF   (NOT &B0).LAST
         AIF   ('&BNE' EQ '').NOBNE1
         BNO   &BNE
         AGO   .TM2
.NOBNE1  BNO   *+12
         AGO   .TM2
.NOONE   AIF   (NOT &B0).YMASK0
.TM2     TM    &ADDRS,B'&Z(1)&Z(2)&Z(3)&Z(4)&Z(5)&Z(6)&Z(7)&Z(8)'
&EQ      SETC  'Z'
         AGO   .LAST
.*
.*  &MASK SPECIFIES VALUE THAT IS TO BE FOUND IN THOSE BITS SELECTED
.*  BY THE VALUE &MPAT
.*
.SYMB    AIF   (&BMCERSC GT 0).MEND
         AIF   ('&MPAT' NE '').MPAT
         CLI   &ADDRS,&MASK
         AGO   .LAST0
.MPAT    TM    &ADDRS,&MASK
&EQ      SETC  'O'
         AIF   ('&MASK' EQ '&MPAT').LAST
         AIF   ('&BNE' EQ '').B12
         BNO   &BNE
         AGO   .TM4
.B12     BNO   *+12
.TM4     TM    &ADDRS,&MPAT-(&MASK)
&EQ      SETC  'Z'
         AGO   .LAST
.YMASK0  MNOTE 8,'****** CLIM: NULL PATTERN (2ND OPERAND) - NO INSTRUCT-
               IONS'
.MEND    MEND
./ ADD NAME=DECR     0100-21053-21053-1621-00053-00053-00000-GRZ027  53
         MACRO                                                          06AUG73P
&LABEL   DECR  &A,&DECR,&L=,&R=0                                        06AUG73P
.*                                                         16MAR70-PAHL 06AUG73P
.*  DECREMENT COUNTER                                      06AUG73-PAHL 06AUG73P
.*                                                                      06AUG73P
.*  &A      : RX-ADDR|(GPR0-15)   COUNTER TO BE DECREMENTED             06AUG73P
.*            TAINING THE COUNTER                                       06AUG73P
.*  &DECR   : ABS.EXPR<4096|(GPR0-15)   VALUE BY WHICH THE COUNTER IS   06AUG73P
.*            TO BE DECREMENTED.                                        06AUG73P
.*  &L      : LENGTH CODE: '' FOR FULLWORD, 'H' FOR HALFWORD, 'C' FOR   06AUG73P
.*            BYTE FIELD, APPLICABLE IF &A IS RX-ADDR.                  06AUG73P
.*  &R      : AUXILIARY REGISTER, REQUIRED IF &A IS RX-ADDR.            06AUG73P
.*                                                                      06AUG73P
         AIF   ('&A' EQ '').YA                                          06AUG73P
         AIF   ('&A'(1,1) EQ '(').REG                                   06AUG73P
.*  COUNTER IS IN STORAGE                                               06AUG73P
         AIF   ('&L' EQ 'C').IC                                         06AUG73P
         AIF   ('&L' NE '' AND '&L' NE 'H').YL                          06AUG73P
&LABEL   L&L   &R,&A                                                    06AUG73P
.SUB     AIF   ('&DECR' EQ '' OR '&DECR' EQ '1').SUB1                   06AUG73P
         AIF   ('&DECR'(1,1) EQ '(').SUBREG                             06AUG73P
         SH    &R,=Y(&DECR)                                             06AUG73P
.ST      ST&L  &R,&A                                                    06AUG73P
         MEXIT                                                          06AUG73P
.IC      ANOP                                                           06AUG73P
&LABEL   IC    &R,&A                                                    06AUG73P
         AGO   .SUB                                                     06AUG73P
.SUB1    BCTR  &R,0                                                     06AUG73P
         AGO   .ST                                                      06AUG73P
.SUBREG  AIF   ('&DECR(1)' EQ '&R(1)').YR                               06AUG73P
         SR    &R,&DECR(1)                                              06AUG73P
         AGO   .ST                                                      06AUG73P
.*  COUNTER IS IN REGISTER                                              06AUG73P
.REG     AIF   ('&DECR' EQ '' OR '&DECR' EQ '1').SUB1R                  06AUG73P
         AIF   ('&DECR'(1,1) EQ '(').REGREG                             06AUG73P
&LABEL   SH    &A(1),=Y(&DECR)                                          06AUG73P
         AGO   .IGNOREL                                                 06AUG73P
.SUB1R   ANOP                                                           06AUG73P
&LABEL   BCTR  &A(1),0                                                  06AUG73P
         AGO   .IGNOREL                                                 06AUG73P
.REGREG  ANOP                                                           06AUG73P
&LABEL   SR    &A(1),&DECR(1)                                           06AUG73P
.IGNOREL AIF   ('&L' EQ '').MEND                                        06AUG73P
         BMCERMAC DECR,41,L,&L                                          06AUG73P
         MEXIT                                                          06AUG73P
.*                                                                      06AUG73P
.YA      BMCERMAC DECR,10,FIRST,,,&LABEL                                06AUG73P
         MEXIT                                                          06AUG73P
.YL      BMCERMAC DECR,20,L,&L,,&LABEL                                  06AUG73P
         MEXIT                                                          06AUG73P
.YR      BMCERMAC DECR,136,SECOND                                       06AUG73P
.MEND    MEND                                                           06AUG73P
./ ADD NAME=DSLD     0100-21053-21053-1621-00083-00083-00000-GRZ027  53
         MACRO
&LABEL   DSLD
.*                                                         11AUG72-PAHL
.*  DATA SET LABELS  (OS/360; FILES ON MAGNETIC TAPE)      23FEB73-PAHL
.*
.*  &SYSLIST(&I)   CODE SPECIFYING THE LABEL TO BE GENERATED
.*           "FL1"   - IBM STANDARD FILE LABEL 1 (HDR1,EOF1,EOV1)
.*           "FL2"   - IBM STANDARD FILE LABEL 2 (HDR2,EOF2,EOV2)
.*       IF MORE THAN ONE IS SPECIFIED, ALL DESCRIPTIONS USE THE SAME
.*       ORIGIN
.*
         LCLA  &I
         LCLB  &FL1,&FL2
         LCLC  &C,&ORGNAME
         AIF   ('&LABEL' EQ '').DSECT
&LABEL   DS    0F
         AGO   .QNULL
.DSECT   ANOP
DSL      DSECT
.QNULL   AIF   (N'&SYSLIST GT 0).COMPILE
         BMCERMAC DSLD,213,LABEL-TYPE,SC=*
&FL1     SETB  1
&FL2     SETB  1
         AGO   .GO
.COMPILE AIF   (&I GE N'&SYSLIST).GO
&I       SETA  &I+1
&C       SETC  '&SYSLIST(&I)'
         AIF   ('&C' EQ '').COMPILE
         AIF   ('&C' NE 'FL1' AND '&C' NE 'FL2').YLIST
&FL1     SETB  (&FL1 OR '&C' EQ 'FL1')
&FL2     SETB  (&FL2 OR '&C' EQ 'FL2')
         AGO   .COMPILE
.YLIST   BMCERMAC DSLD,24,&I-TH,&SYSLIST(&I)
         AGO   .COMPILE
.*
.GO      AIF   (NOT &FL1).FL2
&ORGNAME SETC  'FL1'
         AIF   ('&LABEL' EQ 'FL1').FL1A
FL1      DS    0CL80
.FL1A    ANOP
FL1LABI  DS    CL3                 LABEL IDENTIFIER: HDR/EOF/EOV
FL1NO    DC    C'1'                DATA SET LABEL NUMBER
FL1ID    DC    CL17' '             DATA SET IDENTIFIER: LAST 17 CHAR OF-
                                   DSNAME
FL1FILSR DC    CL6' '              DATA SET SERIAL NUMBER
FL1VOLSQ DC    CL4'0'              VOLUME SEQUENCE NUMBER
FL1FILSQ DS    CL4                 DATA SET SEQUENCE NUMBER
FL1GNO   DC    CL4' '              GENERATION NUMBER OF THE DATA SET
FL1VNG   DC    CL2' '              VERSION NUMBER
FL1CREDT DS    CL6' YYDDD'         CREATION DATE
FL1EXPDT DS    CL6' YYDDD'         EXPIRATION DATE
FL1FSEC  DC    C'0'                DATA SET SECURITY INDICATOR: 0/1/3
FL1BLKCT DC    CL6'0'              EOF/EOV: BLOCK COUNT
FL1SYSCD DC    CL13' '
         DC    CL7' '              ( RESERVED )
.*
.FL2     AIF   (NOT &FL2).MEND
         AIF   ('&ORGNAME' NE '').FL2ORG
&ORGNAME SETC  'FL2'
         AGO   .FL2GO
.FL2ORG  ORG   &ORGNAME
.FL2GO   AIF   ('&LABEL' EQ 'FL2').FL2A
FL2      DS    0CL80
.FL2A    ANOP
FL2LABI  DS    CL3                 LABEL IDENTIFIER: HDR/EOF/EOV
FL2NO    DC    C'2'                DATA SET LABEL NUMBER
FL2RECFM DS    C                   RECORD FORMAT: F/V/U/D
FL2BLKL  DC    CL5'0'              BLOCK LENGTH
FL2LRECL DC    CL5'0'              RECORD LENGTH
FL2DEN   DC    C'2'                TAPE DENSITY: 0/1/2/3
FL2FILP  DC    C'0'                DATA SET POSITION: 0/1
FL2JOBD  DC    CL8' '              JOB IDENTIFICATION
FL2JSSP  DC    C'/'
FL2STEPD DC    CL8' '              STEP IDENTIFICATION
FL2TRTCH DC    CL2'  '             TAPE RECORDING TECHNIQUE
FL2CNTRL DC    C' '                PRINTER CONTROL: ' '/A/M
         DC    C' '                ( RESERVED )
FL2BLKA  DC    C' '                BLOCK ATTRIBUTE: ' '/B/S/R
         DC    CL41' '             ( RESERVED )
.*
.MEND    SPACE
         MEND
./ ADD NAME=ECALL    0100-21053-21053-1621-00064-00064-00000-GRZ027  53
         MACRO
&LABEL   ECALL &EP,&ARG1,&ARG0
.*                                                         18MAR70-PAHL
.*  CALL EXTERNAL SUBROUTINE (BOUND TO LOAD MODULE* BY LINK-EDIT)
.*                                                         07NOV72-PAHL
.*  &EP     : ENTRY POINT AND OFFSET.  FOLLOWING FORMS ARE VALID:
.*              EPNAME
.*              EPNAME+OFFSET
.*              EPNAME(REG)
.*              EPNAME+OFFSET(REG)     WHERE EPNAME IS EXTERNAL SYMBOL
.*            NOTE: (15) ALWAYS WILL CONTAIN EPNAME ADDR
.*  &ARG1   : RX-ADDR|<RX-ADDR>|(REG)|(1)   PARAMETER VALUE REGISTER 1
.*  &ARG0   : RX-ADDR|<RX-ADDR>|(REG)|(0)   PARAMETER VALUE REGISTER 0
.*
         LCLA  &K,&N
         LCLC  &REG,&OFF,&EPNAME
.*
&LABEL   BMCLAM 1,&ARG1,0,&ARG0
         AIF   ('&EP' EQ '').YEP
.*
.*  ANALYSE &EP OPERAND: BREAK INTO COMPONENTS
.*
&N       SETA  K'&EP
         AIF   ('&EP'(&N,1) NE ')').QOFFS
.*  INDEX REGISTER SPECIFIED
&K       SETA  &N-2
.SINDEX  AIF   ('&EP'(&K,1) EQ '(').INDEX
&K       SETA  &K-1
         AIF   (&K GT 1).SINDEX
         AGO   .YINDEX
.INDEX   ANOP
&REG     SETC  '&EP'(&K+1,&N-&K-1)
&N       SETA  &K-1
.*
.QOFFS   AIF   (&N LE 1).CALL
&K       SETA  &N-1
.SOFFS   AIF   ('&EP'(&K,1) EQ '+').OFFS
&K       SETA  &K-1
         AIF   (&K GT 1).SOFFS
         AGO   .CALL
.OFFS    ANOP
&OFF     SETC  '&EP'(&K+1,&N-&K)
&N       SETA  &K-1
.*  FINALLY GENERATE CALL
.CALL    ANOP
&EPNAME  SETC  '&EP'(1,&N)
         AIF   ('&EPNAME'(1,1) EQ '(').EPR
         L     15,=V(&EPNAME)
         AGO   .QBAL
.EPR     AIF   ('&EPNAME' EQ '(15)').QBAL
         LR    15,&EPNAME
.QBAL    AIF   ('&REG&OFF' NE '').BAL
         BALR  14,15
         MEXIT
.BAL     AIF   ('&OFF' NE '').BAL1
&OFF     SETC  '0'
.BAL1    BAL   14,&OFF.(&REG,15)
         MEXIT
.*
.YEP     BMCERMAC ECALL,10,FIRST(EP)
         MEXIT
.YINDEX  BMCERMAC ECALL,20,FIRST,&EP,DETAIL=BAD_INDEX_SPEC
         MEND
./ ADD NAME=EDDATE   0101-80066-80066-1848-00025-00025-00001-GRZ027  00
         MACRO ,
&LABEL   EDDATE &REPR
.*                                       SYLVESTER (GMD-RZ.BN   06MAR80
.*    GENERATES A GBLC-CONSTANT &EDDATE FROM &SYSDATE :
.*
.*   &REPR = DIN  ==>   YY-MM-DD
.*
.*   &REPR = GMD  ==>   DDCCCYY        CCC = JAN,FEB,...
.*
.*
.*
         GBLC  &EDDATE
         LCLC  &M,&D,&Y,&CCC
.*
&M       SETC  '&SYSDATE'(1,2)         GET MONTH
&D       SETC  '&SYSDATE'(4,2)         GET DAY
&Y       SETC  '&SYSDATE'(7,2)         GET YEAR
         AIF   ('&REPR' EQ 'GMD').GMD
&EDDATE  SETC  '&Y-&M-&D'              BUILD A DIN-DATA
         MEXIT
.*
.GMD     ANOP
&CCC     SETC  'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'(3*&M-2,3)
&EDDATE  SETC  '&D&CCC&Y'
         MEND
./ ADD NAME=EDITDATE 0100-21053-21053-1621-00147-00147-00000-GRZ027  53
         MACRO
&LABEL   EDITDATE &LENCODE,&TIME=,&DATE=,&FIELD=,&TEMP8=TEMP8
.*                                                         18JAN71-PAHL
.*  EDIT TIME/DATE INTO PRINTABLE FORMAT                   21JUL72-PAHL
.*
.*  &LENCODE: "LONG"|"SHORT"  SHORT FORMAT CONTAINS NO EXTRA TEXT
.*            LONG IS DEFAULT.
.*  &TIME   : (0)|(REG2-12)|<RX-ADDR>   TIME IN (NEARLY)PACKED DECIMAL:
.*            REGISTER OR FULLWORD CONTAINING 'HHMMSSTH'
.*  &DATE   : (1)|(REG2-12)|<RX-ADDR>   DATE IN PACKED DECIMAL:
.*            REGISTER OF FULLWORD CONTAINING '00YYDDDF'
.*  &FIELD  : RX-ADDR|<RX-ADDR>|(REG2-12)   OUTPUT AREA ADDR; REQUIRED
.*            LENGTH DEPENDS ON FORMAT, SEE BELOW.
.*  &TEMP8  : SYMBOL   CONVERSION AREA OF 1 DOUBLE-WORD
.*
.*
.* &LENCODE,...        'OUTPUT IMAGE':            OUTPUT LENGTH/BYTES:
.*
.* SHORT,TIME          ' HH:MM:SS.TH'                    12
.* LONG,TIME           ' TIME HH:MM:SS.TH'               17
.* SHORT,DATE          ' DDMMMYY'                         8
.* LONG,DATE           ' DATE DDMMMYY'                   13
.* SHORT,TIME+DATE     ' HH:MM:SS/DDMMMYY'               17
.* LONG,TIME+DATE      ' TIME HH:MM:SS   DATE DDMMMYY'   29
.*
.*       EDITDATE DESTROYS THE CONTENTS OF REGS 14-1.
.*       AFTER EXECUTION:
.*       REG 1 CONTAINS THE ADDRESS OF THE GIVEN OUTPUT AREA.
.*
         LCLA  &PATLEN,&PATOFF,&BOFF,&TEMPOFF
         LCLB  &SHORT
         LCLC  &CTIME,&CDATE
.*
         AIF   ('&TIME&DATE' EQ '').YNOP
         AIF   ('&LENCODE' EQ '').FIELD
&SHORT   SETB  ('&LENCODE'(1,1) EQ 'S')
         AIF   (NOT &SHORT AND '&LENCODE'(1,1) NE 'L').E2
.FIELD   AIF   ('&FIELD' EQ '' OR '&FIELD' EQ '(1)').EFIELD
         AIF   ('&TEMP8'  EQ '').ETEMP
         AIF   ('&TEMP8'(K'&TEMP8,1) EQ ')').ETEMP
.*
         AIF   ('&DATE' EQ '').TIME
         AIF   ('&TIME' EQ '').DATE
.*
.*   TIME AND DATE
.*
&PATLEN  SETA  17
&CDATE   SETC  '/'
         AIF   (&SHORT).TD1
&PATLEN  SETA  29
&PATOFF  SETA  5
&CTIME   SETC  'TIME '
&CDATE   SETC  '   DATE '
.TD1     MNOTE *,'LENGTH &PATLEN, GENERATED PATTERN IS '' &CTIME.HH:MM:-
               SS&CDATE.DDMMMYY'''
         AGO   .BRANCH
.*
.*   DATE ONLY
.*
.DATE    ANOP
&TEMPOFF SETA  3                       TO MODIFY 'ED' INSTR PROPERLY
&PATLEN  SETA  8
&CDATE   SETC  ' '
         AIF   (&SHORT).DATE1
&PATLEN  SETA  13
&PATOFF  SETA  5
&CDATE   SETC  ' DATE '
.DATE1   MNOTE *,'LENGTH &PATLEN, GENERATED PATTERN IS ''&CDATE.DDMMMYY-
               '''
.*
.BRANCH  ANOP
&BOFF    SETA  52+(&PATLEN+1)/2*2
         B     *+&BOFF                 BRANCH AROUND CONSTANTS
BMC&SYSNDX DC  FL1'31,28,31,30,31,30,31,31,30,31,30,31'
         DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
         AIF   ('&TIME' EQ '').DCDATE
         DC    C' &CTIME',X'21207A20207A2020'
.DCDATE  DC    C'&CDATE',X'21204020202020'
.*
.*   MAIN PART - GENERATE CODE FOR DATE CONVERION
.*
&LABEL   BMCLAM 0,&TIME,1,&DATE
         XC    &TEMP8.(6),&TEMP8
         STH   1,&TEMP8+6
         CVB   15,&TEMP8               CONVERT DAY OF YEAR INTO BINARY
         STM   0,1,&TEMP8              0=HHMMSSTH,1=00YYDDDF
         SR    1,1
         SR    14,14                   COUNTS THE MONTHS
         IC    1,BMC&SYSNDX.(14)       DAYS OF A MONTH
         BCT   14,*+24
         TM    &TEMP8+5,X'01'          TEST YEAR
         BO    *+16                    IF ODD NO LEAP YEAR
         TM    &TEMP8+5,X'12'
         BM    *+8                     IF MIXED NO LEAP YEAR
         LA    1,1(,1)                 UPDATE FEBRUARY
         LA    14,2(,14)
         SR    15,1                    THE RIGHT MONTH IS FOUND IF (15)
         BP    *-34                    LE 0, ELSE KEEP ON LOOKING.
         AR    15,1                    GET DAY OF THAT MONTH.
         LM    0,1,&TEMP8              SAVE CONTENTS,
         CVD   15,&TEMP8               CONVERT DAY TO DECIMAL,
         ST    0,&TEMP8                RESTORE LEFT HALF,
         MVO   &TEMP8+3(2),&TEMP8+6(2)   AND PUT DAY INTO RIGHT PLACE.
         ST    1,&TEMP8+4              RESTORE RIGHT HALF.
         BMCLA  1,&FIELD
         MVC   0(&PATLEN,1),BMC&SYSNDX+48 MOVE PATTERN INTO OUTPUT
         ED    &PATOFF.(&PATLEN-&PATOFF,1),&TEMP8+&TEMPOFF AND EDIT.
         AIF   ('&TIME' NE '').MONTH
         OI    &PATOFF+1(1),C'0'
.MONTH   LA    15,0(14,14)              (14): MONTH NUMBER 1-12
         ALR   14,15                    (14)=3*(14)
         LA    14,BMC&SYSNDX+12-3(14)
&PATOFF  SETA  &PATLEN-5
         MVC   &PATOFF.(3,1),0(14)     INSERT NAME OF MONTH.
         SPACE
         MEXIT
.*
.*   TIME ONLY
.*
.TIME    ANOP
&PATLEN  SETA  12
         AIF   (&SHORT).TIME1
&PATLEN  SETA  17
&PATOFF  SETA  5
&CTIME   SETC  'TIME '
.TIME1   MNOTE *,'LENGTH &PATLEN, GENERATED PATTERN IS '' &CTIME.HH:MM:-
               SS.TH'''
&BOFF    SETA  4+(&PATLEN+1)/2*2
         B     *+&BOFF                 BRANCH AROUND CONSTANT
BMC&SYSNDX DC  C' &CTIME',X'21207A20207A20204B2020'
&LABEL   BMCLA 0,&TIME
         ST    0,&TEMP8
         BMCLA  1,&FIELD
         MVC   0(&PATLEN,1),BMC&SYSNDX MOVE PATTERN INTO OUTPUT FIELD
         ED    &PATOFF.(&PATLEN-&PATOFF,1),&TEMP8  AND EDIT THE TIME.
         SPACE
         MEXIT
.*
.YNOP    BMCERMAC EDITDATE,10,TIME_OR_DATE,,,&LABEL
         MEXIT
.E2      BMCERMAC EDITDATE,20,LENGTH_CODE,&LENCODE
         MEXIT
.EFIELD  BMCERMAC EDITDATE,20,FIELD,&FIELD,,&LABEL
         MEXIT
.ETEMP   BMCERMAC EDITDATE,20,TEMP8,&TEMP8,,&LABEL
         MEND
./ ADD NAME=EPILOG   0101-79282-86085-2007-00067-00067-00000-GRZ004  00
         MACRO
&LABEL   EPILOG &SA=D,&RC=0,&DROP=,&LTORG=YES,&R0=,&R1=                 19APR77C
.*                       GMD-RZ.BN 1977                                 13APR77B
.*                                                         13MAR70-PAHL
.*                                                         01FEB74-PAHL 01FEB74P
.*  PROGRAM EPILOGUE: UNCHAIN SA (+RELEASE IF DYNAMIC) AND RETURN
.*                                       NO SUBROUTINE: 13APR77-BLASIUS 13APR77B
.*  PARAMETERS &R0 AND &R1                           19APR77-BIRKENBIHL 19APR77C
.*             &RC=  ERROR CORRECTED                 25APR77-BIRKENBIHL 25APR77C
.*                                                                      19APR77C
.*  &SA     : 'D'|'S'   TYPE OF SAVE AREA: DYNAMIC|STATIC
.*            CORRESPONDS TO &DSA RESP. &SSA PARAMETER OF MACRO PROLOG
.*  &RC     : (15)|(REG)|ABS.EXPR<4096   RETURN CODE
.*  &R0     : (0)|(REG)|ABS.EXPR<4096    VALUE IN REGISTER 0            19APR77C
.*  &R1     : (1)|(REG)|ABS.EXPR<4096    VALUE IN REGISTER 1            19APR77C
.*  &DROP   : REG|LIST OF REGS   BASE REGISTER(S) TO BE DROPPED
.*  &LTORG  : 'YES'|'NO'   GENERATE (NO) 'LTORG'
.*
         LCLA  &N
         AIF   ('&LABEL' EQ '').NOLAB                                   25APR77C
&LABEL   DS    0H                      GET RETURN CODE                  25APR77C
.NOLAB   AIF   ('&R0' EQ '' AND '&R1' EQ '' AND '&RC' EQ '').NOVAL      19APR77C
         L     14,4(,13)               GET CALLER'S SAVE AREA           19APR77C
         AIF   ('&RC' EQ '').R0                                         19APR77C
         BMCLA 15,&RC                  GET RETURN CODE                  25APR77C
         ST    15,4+8+4(,14)           SET RC IN SAVEAREA               25APR77C
.R0      AIF   ('&R0' EQ '').R1                                         25APR77C
         BMCLA 0,&R0                                                    19APR77C
         ST    0,4+8+8(,14)            SET R0 IN SAVEAREA               19APR77C
.R1      AIF   ('&R1' EQ '').NOVAL                                      19APR77C
         BMCLA 1,&R1                                                    19APR77C
         ST    1,4+8+12(,14)           SET R1 IN SAVEAREA               19APR77C
.NOVAL   AIF   ('&SA' EQ '').YSA0
         AIF   ('&SA'(1,1) EQ 'S').STATIC
         AIF   ('&SA'(1,1) NE 'D').YSA1
.*  DYNAMIC SAVE AREA                                                   13APR77B
.DYNAMIC ANOP                                                           14APR77B
         LR    1,13                    =A(DYNAMIC AREA TO BE FREED)     13APR77B
         L     0,0(,1)                 =LENGTH OF THIS AREA + SUBPOOL   13APR77B
         LM    13,14,4(13)             GET CALLER'S SAVE AREA           13APR77B
         ST    14,8(,13)               POP LOW POINTER                  13APR77B
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC AREA                13APR77B
         RETURN (14,12),T              RETURN TO CALLER                 25APR77C
         AGO   .DROP
.*  STATIC SAVE AREA
.STATIC  ANOP
         LM    13,14,4(13)             -> HSA, OLD LSA POINTER          01FEB74P
         ST    14,8(,13)               RESTORE OLD LSA POINTER          03OCT73P
         RETURN (14,12),T                                               25APR77C
.*   DROP BASE REGISTERS AS SPECIFIED
.DROP    AIF   ('&DROP' EQ 'NO').LTORG                            (OLD)
.DROP1   AIF   (&N GE N'&DROP).LTORG
&N       SETA  &N+1
         DROP  &DROP(&N)
         AGO   .DROP1
.*   REQUEST LITERAL POOL IF SPECIFIED
.LTORG   AIF   ('&LTORG' EQ '' OR '&LTORG' EQ 'NO').MEND
         AIF   ('&LTORG' NE 'YES').YLTORG
         LTORG
         MEXIT
.YSA0    BMCERMAC EPILOG,113,SA,,D
         AGO   .DYNAMIC
.YSA1    BMCERMAC EPILOG,23,SA,&SA,D
         AGO   .DYNAMIC
.YLTORG  BMCERMAC EPILOG,123,LTORG,&LTORG,NO
.MEND    MEND
./ ADD NAME=GETDATE  0100-21053-21053-1621-00059-00059-00000-GRZ027  53
         MACRO
&LABEL   GETDATE &TYPE,&LENCODE,&FIELD=,&TEMP8=TEMP8
.*                                                         18JAN71-PAHL
.*  GET TIME/DATE AND EDIT IT INTO PRINTABLE FORMAT        03NOV72-PAHL
.*
.*  &TYPE   : "(TIME,DATE)"|"TIME"|"DATE"   WHAT TO BE RETRIEVED/EDITED
.*            FIRST OPTION IS DEFAULT.
.*  &LENCODE: "LONG"|"SHORT"  SHORT FORMAT CONTAINS NO EXTRA TEXT
.*            LONG IS DEFAULT.
.*  &FIELD  : RX-ADDR|(REG)|<RX-ADDR>  OUTPUT AREA (REQUIRED LENGTH DE-
.*            PENDS ON FORMAT, SEE BELOW.
.*  &TEMP8  : SYMBOL   CONVERSION AREA OF 1 DOUBLE-WORD
.*
.*
.* &TYPE,&LENCODE      'OUTPUT IMAGE':            OUTPUT LENGTH/BYTES:
.*
.* TIME,SHORT          ' HH:MM:SS.TH'                    12
.* TIME,LONG           ' TIME HH:MM:SS.TH'               17
.* DATE,SHORT          ' DDMMMYY'                         8
.* DATE,LONG           ' DATE DDMMMYY'                   13
.* (TIME,DATE),SHORT   ' HH:MM:SS/DDMMMYY'               17
.* (TIME,DATE),LONG    ' TIME HH:MM:SS   DATE DDMMMYY'   29
.*
.*       GETDATE DESTROYS THE CONTENTS OF REGS 14-1.
.*       AFTER EXECUTION:
.*       REG 1 CONTAINS THE ADDRESS OF THE GIVEN OUTPUT AREA.
.*
         LCLB  &NOTIME,&NODATE
.*
         AIF   ('&TYPE(1)' EQ '').TYPE2
&NOTIME  SETB  ('&TYPE(1)'(1,1) NE 'T')
&NODATE  SETB  ('&TYPE(1)'(1,1) NE 'D')
         AIF   (&NOTIME AND &NODATE).YTYPE
.TYPE2   AIF   ('&TYPE(2)' EQ '').EDIT
&NOTIME  SETB  ('&TYPE(2)'(1,1) NE 'T' AND &NOTIME)
&NODATE  SETB  ('&TYPE(2)'(1,1) NE 'D' AND &NODATE)
         AIF   (&NOTIME OR &NODATE).YTYPE
.EDIT    AIF   ('&FIELD' EQ '').YFIELD
         AIF   (&NOTIME).DATE
&LABEL   LA    1,2                     TIME UNIT: DEC
         SVC   11                      SVC-TIME
         AIF   (&NODATE).TIME
         EDITDATE &LENCODE,TIME=(0),DATE=(1),FIELD=&FIELD,TEMP8=&TEMP8
         MEXIT
.TIME    EDITDATE &LENCODE,TIME=(0),FIELD=&FIELD,TEMP8=&TEMP8
         MEXIT
.DATE    ANOP
&LABEL   SR    1,1                     TIME UNIT: TU
         SVC   11                      SVC-TIME
         EDITDATE &LENCODE,DATE=(1),FIELD=&FIELD,TEMP8=&TEMP8
         MEXIT
.*
.YTYPE   BMCERMAC GETDATE,20,TYPE,&TYPE
         AGO   .LABEL
.YFIELD  BMCERMAC GETDATE,10,FIELD
.LABEL   AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=INCR     0100-21053-21053-1621-00058-00058-00000-GRZ027  53
         MACRO
&LABEL   INCR  &A,&INCR,&R=0,&L=
.*                                                         16JUL71-PAHL
.*  INCREMENT COUNTER                                      06AUG73-PAHL 06AUG73P
.*
.*  &A      : RX-ADDR|(GPR0-15)  COUNTER TO BE INCREMENTED
.*  &INCR   : ABS.EXPR<4096|(GPR0-15)   INCREMENT                       06AUG73P
.*  &R      : GPR0-15   AUXILIARY REGISTER
.*  &L      :  |'H'|'C'   LOAD INSTR MODIFIER: LENGTH TYPE OF &A FIELD
.*
         AIF   ('&INCR' EQ '').INCR1
         AIF   ('&A' EQ '').YA
         AIF   ('&A'(1,1) EQ '(').REG
.*  COUNTER IS IN STORAGE                                               06AUG73P
         AIF   ('&L' EQ 'C').IC
         AIF   ('&L' NE '' AND '&L' NE 'H').YL                          06AUG73P
         AIF   ('&INCR'(1,1) EQ '(').ADDREG                             06AUG73P
&LABEL   LA    &R,&INCR
         A&L   &R,&A
.ST      ST&L  &R,&A
         MEXIT
.ADDREG  ANOP                                                           06AUG73P
&LABEL   L&L   &R,&A                                                    06AUG73P
.ADDREGC AR    &R,&INCR(1)                                              06AUG73P
         AGO   .ST                                                      06AUG73P
.IC      ANOP                                                           06AUG73P
&LABEL   IC    &R,&A
         AIF   ('&INCR'(1,1) EQ '(').ADDREGC                            06AUG73P
         AIF   ('&R(1)' EQ '0' OR '&R(1)' EQ 'R0').YLC                  06AUG73P
         LA    &R,&INCR.(,&R)
         AGO   .ST
.*  COUNTER IS IN REGISTER                                              06AUG73P
.REG     AIF   ('&INCR'(1,1) EQ '(').REGREG                             06AUG73P
         AIF   ('&A(1)' EQ '0' OR '&A(1)' EQ 'R0').REG0                 06AUG73P
&LABEL   LA    &A(1),&INCR.(,&A(1))
         AGO   .IGNOREL
.REG0    AIF   ('&R(1)' EQ '0' OR '&R(1)' EQ 'R0').YR                   06AUG73P
&LABEL   LA    &R,&INCR
         AR    &A(1),&R
         AGO   .IGNOREL                                                 06AUG73P
.REGREG  ANOP                                                           06AUG73P
&LABEL   AR    &A(1),&INCR(1)                                           06AUG73P
.IGNOREL AIF   ('&L' EQ '').MEND
         BMCERMAC INCR,41,L,&L
         MEXIT
.INCR1   ANOP
&LABEL   INCR  &A,1,R=&R,L=&L
         MEXIT
.*
.YA      BMCERMAC INCR,10,FIRST,,,&LABEL
         MEXIT
.YL      BMCERMAC INCR,20,L,&L,,&LABEL
         MEXIT
.YR      BMCERMAC INCR,135,FIRST,,,&LABEL                               06AUG73P
         MEXIT
.YLC     BMCERMAC INCR,132,L,&L                                         06AUG73P
.MEND    MEND
./ ADD NAME=LBD      0100-21053-21053-1621-00028-00028-00000-GRZ027  53
         MACRO
&LABEL   LBD   &R1,&BD,&W=TEMP4,&OPCODE=LA
.*                                                        08APR70-GEIST
.*  LOAD FROM BASE/DISPLACEMENT FORM  ( LA,L,LH )         19FEB73-PAHL
.*
.*  &R1     : REG0-15   REGISTER TO BE LOADED
.*  &BD     : RS-ADDR   ADDR OF BASE/DISPLACEMENT ADDR (S-TYPE ADDR)
.*  &W      : RS-ADDR   AUXILIARY STORAGE (FULLWORD)
.*
         AIF   ('&R1' EQ '' OR '&BD' EQ '').YNULL
         AIF   ('&OPCODE' NE 'LA').NOLA
&LABEL   MVI   &W,X'41'
         AGO   .CONT
.NOLA    AIF   ('&OPCODE' NE 'L').NOL
&LABEL   MVI   &W,X'58'
         AGO   .CONT
.NOL     AIF   ('&OPCODE' NE 'LH').NOLH
&LABEL   MVI   &W,X'48'
         AGO   .CONT
.NOLH    BMCERMAC LBD,20,OPCODE,&OPCODE
&LABEL   MVI   &W,X'00'                      INVALID OP-CODE
.CONT    MVI   1+&W,16*&R1
         DC    X'D201',S(2+&W,&BD)           MVC ...+2(2),...
         EX    0,&W
         MEXIT
.YNULL   BMCERMAC LBD,1,,,,&LABEL
         MEND
./ ADD NAME=LCBA     0100-21053-21053-1623-00114-00114-00000-GRZ027  26
         MACRO
&LABEL   LCBA  &R,&CB,&RINIT,&INIT
.*
.*  LOAD CONTROL BLOCK ADDRESS
.*  GENERATE SEQUENCE OF 'L' INSTRUCTIONS FINDING THEIR WAY FROM THE
.*  ROOT OF THE CB TREE TO THE CB INQUIRED
.*
.*  &R    : REGISTER INTO WHICH THE CB ADDR IS TO BE LOADED
.*  &CB   : CODE NAMING THE CB TO BE FOUND
.*  OPTIONAL :
.*  &RINIT: REGISTER
.*  &INIT : CODE NAMING A CB THE ADDR OF WHICH IS ALREADY IN &RINIT
.*
.*  KNOWN CONTROL BLOCK NAMES :
.*  OS/VS2 : CVT,CVTTCBP,TCB,TIOT,TIOTDD(=TIOELNGH),MSS,LLS,FSA,JFCB
.*  TSO    : ASCB,ASXB,LWA,PSCB,UPT,ECT(IOSRL,INSTACK)
.*
         LCLB  &CVT,&CVTTCBP,&TCB,&TIOT,&MSS,&LLS,&FSA,&JSCB
         LCLB  &ASCB,&ASXB,&LWA,&PSCB,&UPT,&ECT,&IOSRL,&INSTACK
.*  TRUE = 1 MEANS TO BE LOADED
         AIF   ('&LABEL' EQ '').A
&LABEL   DC    0H'0'
.A       AIF   ('&INIT' EQ '' OR '&RINIT' EQ '' OR '&RINIT' EQ '&R').NO-
               INIT
         LR    &R,&RINIT             INITIALIZE WITH GIVEN ADDR
.NOINIT  AIF   ('&R' EQ '' OR '&CB' EQ '').Y1
.*  SET LOG. VARIABLES
.*  TSO CONTROL BLOCKS
&UPT     SETB  ('&CB' EQ 'UPT')
&PSCB    SETB  ('&CB' EQ 'PSCB' OR &UPT)
&INSTACK SETB  ('&CB' EQ 'INSTACK')
&IOSRL   SETB  ('&CB' EQ 'IOSRL' OR &INSTACK)
&ECT     SETB  ('&CB' EQ 'ECT' OR &IOSRL)
&LWA     SETB  ('&CB' EQ 'LWA' OR &ECT OR &PSCB)
&ASXB    SETB  ('&CB' EQ 'ASXB' OR &LWA)
&ASCB    SETB  ('&CB' EQ 'ASCB' OR &ASXB)
.*  OS/VS2 CONTROL BLOCKS (COMMON TO BOTH)
&TIOT    SETB  ('&CB'(1,3) EQ 'TIO')
&MSS     SETB  ('&CB' EQ 'MSS')
&LLS     SETB  ('&CB' EQ 'LLS')
&FSA     SETB  ('&CB' EQ 'FSA')
&JSCB    SETB  ('&CB' EQ 'JSCB')
&TCB     SETB  ('&CB' EQ 'TCB' OR &TIOT OR &MSS OR &LLS OR &FSA        -
               OR &JSCB)
&CVTTCBP SETB  ('&CB' EQ 'CVTTCBP' OR &TCB OR &ASCB)
&CVT     SETB  ('&CB' EQ 'CVT' OR &CVTTCBP)
         AIF   (NOT &CVT).YCB
         AIF   ('&INIT' EQ '').CVT
         AIF   ('&INIT' EQ 'CVT' AND &CVT).CVTTCBP
         AIF   ('&INIT' EQ 'CVTTCBP' AND &CVTTCBP).TCBASCB
         AIF   ('&INIT' EQ 'TCB' AND &TCB).TCBX
         AIF   ('&INIT' EQ 'TIOT' AND &TIOT).TIOT0
         AIF   ('&INIT' EQ 'ASCB' AND &ASCB).ASXB
         AIF   ('&INIT' EQ 'ASXB' AND &ASXB).LWA
         AIF   ('&INIT' EQ 'LWA' AND &LWA).ECTPSCB
         AIF   ('&INIT' EQ 'ECT' AND &ECT).IOSRL
         AIF   ('&INIT' EQ 'IOSRL' AND &IOSRL).INSTACK
         AIF   ('&INIT' EQ 'INSTACK' AND &INSTACK).INSTCK0
         AIF   ('&INIT' EQ 'PSCB' AND &PSCB).UPT
         AIF   ('&INIT' EQ 'UPT' AND &UPT).UPT0
         MNOTE 4,'**** LTSOCBA : 4TH PARAMETER ILLEGAL OR NOT USEFUL'
.*  LOAD ADDRESSES INTO &R
.CVT     L     &R,16                     ->CVT
.CVTTCBP AIF   (NOT &CVTTCBP).MEND
         L     &R,0(,&R)                 ->CVTTCBP
.TCBASCB AIF   (NOT &TCB AND NOT &ASCB).MEND
         AIF   (&ASCB).TSOCB
         L     &R,4(,&R)                 ->TCB
.TCBX    AIF   ('&CB' EQ 'TCB').MEND
         AIF   (&TIOT).TIOT
         AIF   (&MSS).MSS
         AIF   (&LLS).LLS
         AIF   (&FSA).FSA
         AIF   (&JSCB).JSCB
         AGO   .YCB
.TIOT    L     &R,12(,&R)                ->TIOT
.TIOT0   AIF   ('&CB' EQ 'TIOT').MEND
         AIF   ('&CB' NE 'TIOELNGH' AND '&CB' NE 'TIOTDD').YCB
         L     &R,24(,&R)                ->TIOTDD
         AGO   .MEND
.MSS     L     &R,24(,&R)                ->MSS
         AGO   .MEND
.LLS     L     &R,36(,&R)                ->LLS
         AGO   .MEND
.FSA     L     &R,112(,&R)               ->FSA
         LA    &R,0(,&R)
         AGO   .MEND
.JSCB    L     &R,180(,&R)               ->JSCB
         LA    &R,0(,&R)
         AGO   .MEND
.*
.TSOCB   L     &R,12(,&R)                ->ASCB
.ASXB    AIF   (NOT &ASXB).MEND
         L     &R,X'6C'(,&R)             ->ASXB
.LWA     AIF   (NOT &LWA).MEND
         L     &R,X'14'(,&R)             ->LWA
.ECTPSCB AIF   (NOT &ECT AND NOT &PSCB).MEND
         AIF   (&ECT).ECT0
         L     &R,X'18'(,&R)             ->PSCB
.UPT     AIF   (NOT &UPT).MEND
         L     &R,X'34'(,&R)             ->UPT
.UPT0    AGO   .MEND
.*
.ECT0    L     &R,X'20'(,&R)             ->ECT
.IOSRL   AIF   (NOT &IOSRL).MEND
         L     &R,X'04'(,&R)             ->IOSRL
.INSTACK AIF   (NOT &INSTACK).MEND
         L     &R,X'00'(,&R)             ->INSTACK
.INSTCK0 MEXIT
.**********************************************************************
.Y1      BMCERMAC LCBA,10,FIRST/SECOND
         MEXIT
.YCB     BMCERMAC LCBA,20,CB_NAME,&CB
.MEND    MEND
./ ADD NAME=LIST     0100-21053-21053-1621-00221-00221-00000-GRZ027  53
         MACRO
&LABEL   LIST        &LIST,&VL,&R1=NO,&MF=L
.*                                                        18DEC70-GEIST
.*  GENERATE/DEFINE (PARAMETER) LIST                      12JAN73-PAHL
.*
.*  &LIST=(&PARM1,...,&PARMN)  DEFINES CONTENTS OF ONE PARAMETER WORD
.*           EACH:
.*   &PARMI: &FLAG&FLAG&FLAG&FLAG&ADDRX
.*    &FLAG:  |'ZZ'|X'ZZ'|C'K'   FLAG BYTE
.*   &ADDRX:  |RX-ADDR|<RX-ADDR|(REG)   ADDR PART - IS LEFT TRUNCATED
.*           ONE BYTE FOR EACH SPECIFIED FLAG BYTE
.*  &R1    : NO|YES   (MF=E)  IS GPR 1 TO BE LOADED WITH LIST ADDR?
.*
         LCLC  &B1,&B2,&PLUS,&P,&X,&F(24)
         LCLA  &NR,&R(4),&J,&K,&N,&I,&O,&J1,&J2,&J3,&C
         AIF   ('&MF(1)' NE 'E').LIST
.*
.*       EXECUTE FORM
.*
&R(1)    SETA  14
&R(2)    SETA  15
&R(3)    SETA  0
         AIF   ('&LABEL' EQ '').E0
&LABEL   DC    0H'0'
.E0      AIF   ('&MF(2)' EQ '').ERRORE1
         AIF   ('&MF(2)'(1,1) EQ '(').E1
         AIF   ('&MF(2)'(1,1) EQ '<').E2
&B1      SETC  '&MF(2)'
&B2      SETC  '&MF(2)'
&PLUS    SETC  '+'
         AGO   .E13
.E1      ANOP
&B1      SETC  '(,'.'&MF(2)'(2,K'&MF(2)-1)
&B2      SETC  '&MF(2)'
         AIF   ('&MF(2)' EQ '(0)').E17O
         AIF   ('&MF(2)' EQ '(15)').E17F
         AIF   ('&MF(2)' EQ '(14)').E17E
.E13     ANOP
&NR      SETA  4
&R(4)    SETA  1
         AGO   .E4
.E17O    ANOP
&NR      SETA  2
         AGO   .E4
.E17F    ANOP
&NR      SETA  2
&R(1)    SETA  0
&R(2)    SETA  1
         AGO   .E4
.E17E    ANOP
&R(1)    SETA  15
&R(2)    SETA  0
&R(3)    SETA  1
&NR      SETA  3
         AGO   .E4
.E2      ANOP
&B1      SETC  '&MF(2)'(2,K'&MF(2)-2)
         L     1,&B1
&B1      SETC  '(,1)'
&B2      SETC  '(1)'
&NR      SETA  3
.E4      ANOP
&N       SETA  N'&LIST
&J       SETA  1
.E5      ANOP
&K       SETA  &K+1
&J3      SETA  4
         AIF   (&K GT &N).E7
         AIF   ('&LIST(&K)' EQ '').E75                          ASM-H
&P       SETC  '&LIST(&K)'(1,8)                                 ASM-H
&C       SETA  1
.*.E53   AIF   ('&P' EQ '').E75
.E53     AIF   ('&P'(1,1) EQ '&P').E55                          ASM-H
         AIF   ('&P'(1,1) EQ '''').E6
         AIF   ('&P'(2,1) EQ '''').E62
         AIF   ('&P'(1,1) EQ '(' AND &I LE 1).E57
.E55     AIF   (K'&LIST(&K) LT &C+8).E551
&X       SETC  '&LIST(&K)'(&C+8,8)
         AGO   .E5515
.E551    ANOP
&X       SETC  ''
.E5515   ANOP
&I       SETA  &I+1
.E552    BMCLA   &R(&I),&P&X
         AIF   (&I LT &NR).E5
.E555    AIF   (&I NE 1).E557
         ST    &R(1),&O&PLUS&B1
         AGO   .E9
.E557    STM   &R(1),&R(&I),&O&PLUS&B2
         AGO   .E9
.E57     AIF   (&I NE 1).E575
         ST    &R(1),&O&PLUS&B1
&O       SETA  &O+4
.E575    ANOP
&P       SETC  '&LIST(&K)'(&C+1,K'&LIST(&K)-&C-1)  REMOVE ( )
         ST    &P,&O&PLUS&B1
         AGO   .E9
.E6      ANOP
&X       SETC  'X'
&J1      SETA  2                                                17DEC70
         AGO   .E635                                            17DEC70
.E62     ANOP
&X       SETC  ''
&J1      SETA  3
.E635    AIF   ('&P'(&J1,1) EQ '''').E64
&J1      SETA  &J1+1
         AGO   .E635
.E64     AIF   ('&P'(&J1-1,2) EQ '''''').ERRE2
&F(&J+1) SETC  '&X'.'&LIST(&K)'(&C,&J1)
.E645    ANOP
&J2      SETA  &K*4-&J3
&F(&J)   SETC  '&J2'
&J       SETA  &J+2
&J3      SETA  &J3-1
&C       SETA  &C+&J1
         AIF   (&C GT K'&LIST(&K)).E75         ONLY FLAGS
&P       SETC  '&LIST(&K)'(&C,8)
         AGO   .E53
.E7      AIF   (&I GT 0).E555
         AGO   .E99E
.E75     AIF   (&I GT 0).E555
&O       SETA  &O+4
         AIF   (&K LT &N).E5
         AGO   .E995
.E9      AIF   ('&F(1)' EQ '').E990
&I       SETA  1
.E910    AIF   (&I GE &J).E930
&O       SETA  &N*4-4
         AIF   ('&F(&I)' EQ '&O').E920
.E915    MVI   &F(&I)&PLUS&B2,&F(&I+1)
&I       SETA  &I+2
         AGO   .E910
.E920    AIF   ('&VL' NE 'VL').E915
         MVI   &F(&I)&PLUS&B2,&F(&I+1)+X'80'
&I       SETA  &I+2
         AGO   .E910
.E930    ANOP
&I       SETA  0
&O       SETA  &K*4
&F(1)    SETC  ''
         AGO   .E4
.E990    AIF   (&K LT &N).E930
.E995    AIF   ('&VL' NE 'VL').MEND
&O       SETA  &N*4-4
         MVI   &O&PLUS&B2,X'80'
.E99E    AIF   ('&R1' EQ 'NO' OR '&R1' EQ '').MEND
         AIF   ('&R1' NE 'YES').YR1
         BMCLA 1,&B2
         MEXIT
.ERRORE1 BMCERMAC LIST,20,MF
         MEXIT
.ERRE2   BMCERMAC LIST,23,LIST(&K)-FLAG,&LIST(&K),X''00''
&F(&J+1) SETC  'X''00'''
         AGO   .E645
.*
.* -------------------------------------  MF = L ---------------------
.LIST    AIF   ('&MF' NE 'L').MFERROR
&LABEL   DS    0A
&N       SETA  N'&LIST
.L2      ANOP
&J3      SETA  4
&K       SETA  &K+1
         AIF   (&K GT &N).MEND
         AIF   ('&LIST(&K)' EQ '').L4                             ASM-H
&P       SETC  '&LIST(&K)'(1,8)                                   ASM-H
&C       SETA  1
.*.L25   AIF   ('&P' EQ '').L4
.L25     AIF   ('&P'(1,1) EQ '(' OR '&P'(1,1) EQ '<').ERR1       ASM-H
         AIF   ('&P'(1,1) EQ '&P').L27
         AIF   ('&P'(1,1) EQ '''').L5
         AIF   ('&P'(2,1) EQ '''').L6
.L27     AIF   (&K EQ &N AND '&VL' EQ 'VL' AND &J3 EQ 4).L3
         AIF   (K'&LIST(&K) LT &C+8).L28
&X       SETC  '&LIST(&K)'(&C+8,8)
         AGO   .L29
.L28     ANOP
&X       SETC  ''
.L29     DC    AL&J3.(&P&X)
         AGO   .L2
.L3      ANOP
         DC    X'80',AL3(&LIST(&K))
         MEXIT
.L5      ANOP
&X       SETC  'X'
&J1      SETA  1                                                17DEC70
         AGO   .L8                                              17DEC70
.L6      ANOP
&X       SETC  ''
&J1      SETA  2
.L8      ANOP
&J1      SETA  &J1+1
         AIF   ('&P'(&J1,1) NE '''').L8
         AIF   ('&P'(&J1-1,2) EQ '''''').ERRL2
&X       SETC '&X'.'&P'(1,&J1)
.L85     ANOP
&C       SETA  &C+&J1
         AIF   (&K EQ &N AND '&VL' EQ 'VL' AND &J3 EQ 4).L9
         DC    &X
         AGO   .L10
.L9      DC    AL1(&X+X'80')
.L10     ANOP
&J3      SETA  &J3-1
         AIF   (&J3 LE 0).L2
         AIF   (&C GT K'&LIST(&K)).L4
&P       SETC  '&LIST(&K)'(&C,8)
         AGO   .L25
.ERR1    BMCERMAC LIST,28,LIST(&K),&LIST(&K),&MF
.L4      AIF   (&K EQ &N AND '&VL' EQ 'VL' AND &J3 EQ 4).L20
         DC    AL&J3.(0)
         AGO   .L2
.L20     DC    X'80',AL3(0)
         MEXIT
.ERRL2   BMCERMAC LIST,23,LIST(&K)-FLAG,&P,X''00''
&X       SETC  'X''00'''
         AGO   .L85
.*--------------------------------------------------------------------
.MFERROR BMCERMAC LIST,20,MF,&MF
         MEXIT
.YR1     BMCERMAC LIST,123,R1,&R1,NO
.MEND    MEND
./ ADD NAME=LSP      0100-21053-21053-1621-00032-00032-00000-GRZ027  53
         MACRO
&LABEL   LSP   &REGA,&REGL,&ADDR
.*                                                         12JUL73-PAHL
.*  LOAD STRING POINTER (INSTR.SET.EXTENSION; LENGTH=?)    20JUL73-PAHL 20JUL73P
.*
.*  &REGA   : GPR0-15   REGISTER TO RECEIVE THE STRING ADDR.
.*            THE HI-O BYTE IS SET TO ZERO
.*  &REGL   : GPR0-15   REGISTER TO RECEIVE THE STRING LENGTH IN ITS
.*            LO-O BYTE.  THE 3 HI-O BYTES ARE SET TO ZERO.
.*  &ADDR   : RX-ADDR  FULLWORD CONTAINING THE STRING POINTER.
.*       THE GENERATED CODE DIFFERS DEPENDENT ON WHETHER &REGL IS 0 OR
.*       NOT.
.*       THE CONDITION CODE IS NOT CHANGED.
.*
         AIF   ('&REGA' EQ '' OR '&REGL' EQ '' OR '&ADDR' EQ '').Y1     19JUL73P
         AIF   ('&REGA' EQ '&REGL').Y2                                  19JUL73P
         AIF   ('&REGL' EQ '0' OR '&REGL' EQ 'R0').R0
&LABEL   L     &REGL,&ADDR
         LA    &REGA,0(,&REGL)         STRING ADDR (PURE)
         SRL   &REGL,24                STRING LENGTH
         MEXIT
.R0      ANOP
&LABEL   L     &REGA,&ADDR
         LR    &REGL,&REGA
         LA    &REGA,0(,&REGA)         STRING ADDR (PURE)
         SRL   &REGL,24                STRING LENGTH
         MEXIT
.Y1      BMCERMAC LSP,001,,,,&LABEL                                     19JUL73P
         MEXIT                                                          19JUL73P
.Y2      BMCERMAC LSP,067,FIRST,SECOND,,&LABEL                          20JUL73P
         MEND
./ ADD NAME=LT       0100-21053-21053-1621-00016-00016-00000-GRZ027  53
         MACRO                                                          12JUL73P
&LABEL   LT    &REG,&ADDRX                                              12JUL73P
.*                                                                      12JUL73P
.*  LOAD AND TEST (INSTR.SET EXTENSION, LENGTH=?)                       12JUL73P
.*                                                                      12JUL73P
.*  &REG    : GPR0-15   REGISTER TO BE LOADED                           12JUL73P
.*  &ADDRX  : RX-ADDR   FULLWORD TO BE LOADED INTO &REG                 12JUL73P
.*       THE CONDITION CODE IS SET AS AFTER A "LTR" INSTRUCTION         12JUL73P
.*                                                                      12JUL73P
         AIF   ('&REG' EQ '' OR '&ADDRX' EQ '').Y                       12JUL73P
&LABEL   L     &REG,&ADDRX                                              12JUL73P
         LTR   &REG,&REG                                                12JUL73P
         MEXIT                                                          12JUL73P
.Y       BMCERMAC LT,1,,,,&LABEL                                        12JUL73P
         MEND                                                           12JUL73P
./ ADD NAME=MACHEAD  0100-78058-78058-1439-00101-00101-00000-GRZ019  00
NAME     TITLE 'NAME  --  MACRO DESCRIPTION'
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        N A M E                                                      *
*                                                                     *
* <CLASS/TYPE>:                                                       *
*        |                                                            *
*                                                                     *
* <FAMILY>:                                                           *
*        |                                                            *
*                                                                     *
* <FUNCTION/OPERATION>:                                               *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <PARAMETERS>:                                                       *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <OUTPUT>:                                                           *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <NORMAL EXIT>:                                                      *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <ERROR EXIT>:                                                       *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <REGISTERS USED>:                                                   *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <GLOBAL VECTORS SET>:                                               *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <SUBMACROS>:                                                        *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <RESTRICTIONS>:                                                     *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <RELATED MACROS>:                                                   *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <ASSEMBLER>:                                                        *
*                                                                     *
*      EXAMPLE CALL :                                                 *
*                                                                     *
*                                                                     *
* <STATUS>:                                                           *
*          CHANGE LEVEL - 0.0               28FEB78                   *
*                                                                     *
*                                                                     *
* <NOTES>:                                                            *
*        |                                                            *
*        |                                                            *
*        |                                                            *
*                                                                     *
*                                                                     *
* <AUTHOR>:                                                           *
*        B. SCHEID RZ.BN                                              *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
./ ADD NAME=MHELP    0100-21053-21053-1621-00005-00005-00000-GRZ027  53
         MACRO
         MHELP &NUMBER
         MNOTE 0,'****** MHELP: THERE IS NO MHELP FACILITY IN THIS ASSE-
               MBLER'
         MEND
./ ADD NAME=MOVE     0100-21053-21053-1621-00044-00044-00000-GRZ027  54
         MACRO                                                          MOVE 001
&LABEL   MOVE  &TO,&FROM,&LEN                                           MOVE 002
.*                                                                      MOVE 003
.*  'MVC' SUBSTITUTE                                                    MOVE 004
.*       IF &LEN=(GPR), AN EX'ED INSTR IS USED.                         MOVE 005
.*       VALUE OF &LEN MUST NOT EXCEED 256.                             MOVE 006
.*                                                                      MOVE 007
         LCLC  &L,&NAME                                                 MOVE 008
         AIF   ('&LEN' NE '').QLEN2                                     MOVE 009
.*
.*  LENGTH OMITTED: USE IMPLIED LENGTH                                  MOVE 010
.*
         AIF   (L'&TO EQ 0).TO#                                         MOVE 011
&LABEL   MVC   &TO,&FROM                                                MOVE 012
         MEXIT                                                          MOVE 013
.TO#     ANOP
&L       SETC  '&TO'(1,7)'#'                                            MOVE 015
&LABEL   MVC   &TO.(&L),&FROM                                           MOVE 016
         MEXIT
.*
.*  LENGTH SPECIFIED: ABS.EXPR OR (GPR)
.*
.QLEN2   ANOP
&L       SETC  '&LEN'
&NAME    SETC  '&LABEL'
         AIF   ('&LEN'(1,1) NE '(').MVC B.IF NOT (GPR)
&L       SETC  '0'
&NAME    SETC  ''
         B     *+10                    JUMP AROUND MVC
.*
.MVC     AIF   ('&TO'(K'&TO,1) EQ ')').CORG                             MOVE 020
&NAME    MVC   &TO.(&L),&FROM                                           MOVE 021
         AGO   .QGPR
.CORG    ANOP                                                           MOVE 023
&NAME    MVC   0(&L,0),&FROM                                            MOVE 024
         ORG   *-4                                                      MOVE 025
         DC    S(&TO)                                                   MOVE 026
         ORG   *+2
.*
.QGPR    AIF   ('&LEN'(1,1) NE '(').MEND
&LABEL   BCTR  &LEN(1),0                                                MOVE 031
         EX    &LEN(1),*-8                                              MOVE 032
         AL    &LEN(1),=F'1'                                            MOVE 033
.MEND    MEND                                                           MOVE 034
./ ADD NAME=OPENED   0100-21053-21053-1621-00019-00019-00000-GRZ027  54
         MACRO
&LABEL   OPENED &DCB,&YESBR,&NOBR
.*                                                         00JAN69-PAHL
.*  INQUIRE OPEN FLAG BIT IN DCB AND BRANCH ON RESULT      09JAN73-PAHL
.*
         AIF   ('&DCB' EQ '').YDCB
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
&LABEL   TM    48+&DCB,X'10'           TEST OPEN FLAG BIT
         AGO   .BRANCH
.DCBREG  ANOP
&LABEL   TM    48&DCB,X'10'            TEST OPEN FLAG BIT
.BRANCH  AIF   ('&YESBR' EQ '').BRANCH2
         BO    &YESBR
.BRANCH2 AIF   ('&NOBR' EQ '').MEND
         BZ    &NOBR
         MEXIT
.YDCB    BMCERMAC OPENED,10,FIRST(DCB),,,&LABEL
.MEND    MEND
./ ADD NAME=PARM     0100-21053-21053-1621-00170-00170-00000-GRZ027  54
         MACRO
&LABEL   PARM  &ADDRS,&FLAGS,&VL,&MF=L
.*                                                         00JAN70-PAHL
.*  GENERATE/SET PARAMETER LIST                            19FEB73-PAHL
.*
.*  &ADDRS  : LIST OF..   PARAMETER ADDRESSES
.*            (MF=L) REL.|ABS.EXPR
.*            (MF=E) RX-ADDR|<RX-ADDR>|(REG2-12)
.*  &FLAGS  : LIST OF.. FLAGS     &FLAG(&I) CORRESPONDS TO &ADDRS(&I)
.*            (MF=L) ABS.EXPR<128
.*            (MF=E) ABS.EXPR<128|(REG2-12)
.*  &VL     : "VL"   INDICATES THAT THE END-OF-LIST INDICATOR (X'80')
.*            IS TO SET IN THE HI-O BYTE OF THE LAST PARAMETER ENTRY
.*            THE LAST PARAMETER ENTRY IS DETERMINED BY THE NUMBER OF
.*            &ADDRS SUB-OPERANDS (INCLUDING OMITTED ONES), &FLAGS MAY
.*            NOT HAVE MORE OPERANDS THAN &ADDRS, UNLESS &ADDRS IS
.*            OMITTED, IN WHICH CASE THE NUMBER OF OPERANDS OF &FLAGS
.*            IS USED TO DETERMINE THE LENGTH OF THE PARAMETER LIST.
.*  IN MF=(E,LIST-ADDR):
.*  LIST-ADDR: RS-ADDR|(REG115)
.*
         LCLA  &N,&R,&NR,&I,&DPL
         LCLA  &REG(4)
         LCLB  &EOL
         LCLC  &PLUS,&C1,&C2
.*
         AIF   ('&FLAGS' EQ '''VL''').OLDPARM
&N       SETA  N'&ADDRS                LENGTH OF PARMLST (WORDS)
         AIF   (&N GE N'&FLAGS).EOL
         AIF   (&N GT 0).TRUNCF        0 < N'&ADDRS < N'&FLAGS
&N       SETA  N'&FLAGS                N'&ADDRS = 0
         AGO   .EOL
.TRUNCF  MNOTE 8,'****** PARM: EXCESSIVE NUMBER OF FLAGS -- TRUNCATED T-
               O &N'
.EOL     ANOP
&EOL     SETB  ('&VL' NE '')
         AIF   (NOT &EOL OR '&VL' EQ 'VL').MF
         BMCERMAC PARM,23,THIRD(VL),&VL,VL
.MF      AIF   ('&MF' NE 'L').MFE
.*
.*  MF=L
.*
         AIF   ('&LABEL' EQ '').LGO
&LABEL   DS    0A
.LGO     AIF   (&N LE 0).YEMPTY
.LLOOP   ANOP
&I       SETA  &I+1
&C1      SETC  ''
&C2      SETC  ''
         AIF   ('&ADDRS(&I)' NE '').LREGA
&C1      SETC  '0'                     ADDR FILLER
         AGO   .LFLAGS
.LREGA   AIF   ('&ADDRS(&I)'(1,1) NE '(').LFLAGS
         BMCERMAC PARM,86,ADDR(&I),&ADDRS(&I),&MF
.LFLAGS  AIF   ('&FLAGS(&I)' NE '').LTESTL
&C2      SETC  '0'                     FLAG FILLER
.LTESTL  AIF   (&I GE &N).LLAST
         DC    AL1(&C2&FLAGS(&I)),AL3(&C1&ADDRS(&I))
         AGO   .LLOOP
.LLAST   AIF   (&EOL).LLAST2
         DC    AL1(&C2&FLAGS(&I)),AL3(&C1&ADDRS(&I))
         MEXIT
.LLAST2  DC    BL.1'1',AL.7(&C2&FLAGS(&I)),AL3(&C1&ADDRS(&I))
         MEXIT
.*
.MFE     AIF   (N'&MF NE 2 OR '&MF(1)' NE 'E').YMF
.*
.*  MF=(E,ADDR)
.*
         AIF   ('&LABEL' EQ '').E1
&LABEL   DC    0H'0'
.E1      AIF   ('&MF(2)'(1,1) EQ '(').EADDRS
&PLUS    SETC  '+'                     &MF(2) IS SYMBOL
.EADDRS  AIF   ('&ADDRS' EQ '').EFLAGS
         AIF   ('&PLUS' NE '').EINIT4
         AIF   ('&MF(2)' EQ '(1)').EINIT3
         AIF   ('&MF(2)' EQ '(15)').EINIT2
         AIF   ('&MF(2)' NE '(14)').EINIT4
&REG(1)  SETA  15                      DEFINE AVAILABLE WORK REGISTERS
.*EG(2)  SETA  0
&REG(3)  SETA  1
&NR      SETA  3
         AGO   .ELOOP
.EINIT2  ANOP
.*EG(1)  SETA  0                       DEFINE AVAILABLE WORK REGISTERS
&REG(2)  SETA  1
&NR      SETA  2
         AGO   .ELOOP
.EINIT3  ANOP
&REG(1)  SETA  14                      DEFINE AVAILABLE WORK REGISTERS
&REG(2)  SETA  15
.*EG(3)  SETA  0
&NR      SETA  3
         AGO   .ELOOP
.EINIT4  ANOP
&REG(1)  SETA  14                      DEFINE AVAILABLE WORK REGISTERS
&REG(2)  SETA  15
.*EG(3)  SETA  0
&REG(4)  SETA  1
&NR      SETA  4
.*
.ELOOP   ANOP
&I       SETA  &I+1
         AIF   ('&ADDRS(&I)' EQ '').STORE
         AIF   ('&ADDRS(&I)'(1,1) EQ '(').RGTEST
&R       SETA  &R+1
         BMCLA &REG(&R),&ADDRS(&I)
         AIF   (&R LT &NR).ELOOP
         AGO   .STORE1
.RGTEST  AIF   (&R LT 1).RGST          NO REGISTER LOADED
         AIF   (&R GE &NR-1 OR '&ADDRS(&I+1)' EQ '').RGSTOR1 NEXT WOULD-
                                       STORE ANYHOW
&R       SETA  &R+1
         LR    &REG(&R),&ADDRS(&I)     PICK UP PARAMETER ADDR
         AGO   .ELOOP
.RGSTOR1 AIF   (&R GT 1).RGSTM
         ST    &REG(1),&DPL&PLUS&MF(2) STORE PARAMETER ADDR
&DPL     SETA  &DPL+4
         AGO   .RGST
.RGSTM   STM   &REG(1),&REG(&R),&DPL&PLUS&MF(2) STORE PARAMETER ADDRS
&DPL     SETA  &DPL+&R*4
.RGST    ST    &ADDRS(&I),&DPL&PLUS&MF(2) STORE REGISTER CONTENTS
         AGO   .ECONT
.STORE   AIF   (&R LT 1).ECONT         NO REGISTER LOADED
.STORE1  AIF   (&R GT 1).STM
         ST    &REG(1),&DPL&PLUS&MF(2) STORE PARAMETER ADDR
         AGO   .ECONT
.STM     STM   &REG(1),&REG(&R),&DPL&PLUS&MF(2) STORE PARAMETER ADDRS
.*
.ECONT   AIF   (&I GE &N).EFLAGS       LAST ENTRY DONE
&R       SETA  0
&DPL     SETA  &I*4
         AGO   .ELOOP
.*
.*  SET FLAG FIELDS
.*
.EFLAGS  AIF   ('&FLAGS' EQ '').EEOL
&I       SETA  1
.EFLAG   AIF   ('&FLAGS(&I)' EQ '').EFLAGC
&DPL     SETA  &I*4-4
         AIF   ('&FLAGS(&I)'(1,1) EQ '(').ESTC
         AIF   ('&FLAGS(&I)'(1,1) EQ '''').EMVIX
         MVI   &DPL&PLUS&MF(2),&FLAGS(&I) SET FLAG BYTE
         AGO   .EFLAGC
.EMVIX   MVI   &DPL&PLUS&MF(2),X&FLAGS(&I) SET FLAG BYTE
         AGO   .EFLAGC
.ESTC    STC   &FLAGS(&I),&DPL&PLUS&MF(2) STORE REG CONTAINING FLAG
.EFLAGC  AIF   (&I GE &N).EEOL
&I       SETA  &I+1
         AGO   .EFLAG
.*
.*  LAST ENTRY INDICATOR ?
.*
.EEOL    AIF   (NOT &EOL).MEND
&DPL     SETA  &N*4-4
         OI    &DPL&PLUS&MF(2),X'80'   TURN LAST ENTRY INDICATOR ON
         MEXIT
.*
.*   SUPPORT OF OLD PARM VERSION (WITHOUT EXTRA &VL PARAMETER BUT
.*   SPECIFICATION OF EITHER FLAG LIST OR ''VL'')
.*
.OLDPARM ANOP
&LABEL   PARM  &ADDRS,,VL,MF=&MF       ADJUST OPERAND LIST
         MEXIT
.*
.YEMPTY  BMCERMAC PARM,18,ADDRS_OR_FLAGS,,&MF
         MEXIT
.YMF     BMCERMAC PARM,20,MF,&MF,,&LABEL
.MEND    MEND
./ ADD NAME=PROLOG   0114-78093-78103-1519-00163-00154-00000-GRZ019  00
         MACRO
&LABEL   PROLOG &BASE=10,&ID=,&DSA=,&SSA=,&COPYR=NO,&SP=0,             -
               &EP=*,&NAME=,&LEN=             OLDIES FOR COMPATIBILITY
.*                       GMD-RZ.BN 1977                                 13APR77B
.*                                                         00JAN69-
.*  STANDARD PROGRAM INITIATION                            04NOV74-PAHL 04NOV74P
.*                                       NO SUBROUTINE: 13APR77-BLASIUS 13APR77B
.*                                      SUBPOOL NUMBER: 04APR78-BLASIUS 04APR78B
.*  &BASE   : REG212|(REG212,...,REG212)   BASE REGISTER(S) FOR PROGRAM
.*            ARE SET WITH 4K-DIFFERENCE BEGINNING AT FIRST BYTE OF
.*            MACRO EXPANSION.
.*  &ID     : CHAR.STR|'CHAR.STR'       ENTRY POINT IDENTIFICATION
.*            DEFAULT: &LABEL, IF OMITTED, &SYSECT.
.*  &DSA    : DSANAM|(DSANAM,LEN)|(,LEN)|*   REQUESTS THAT A DYNAMIC
.*            SAVE/WORK AREA BE OBTAINED.
.*   DSANAM : SYMBOL   NAMING THE DSECT DESCRIBING THE SAVE/WORK AREA
.*            IF NOT OMITTED, A 'USING DSANAM,13' IS ALSO GENERATED.
.*      LEN : ABS.EXPR   GIVES THE LENGTH OF THE DYNAMIC SAVE/WORK AREA
.*            IF IT IS OMITTED BUT DSANAM IS SPECIFIED, THE STANDARD
.*            LENGTH SYMBOL 'DSANAM.#' IS ASSUMED.
.*        * : ONLY THE MINIMUM SAVE AREA OF 72 BYTES IS TO BE OBTAINED.
.*  &SSA    : *|A-SYMBOL|(GPR0-14)|<RX-ADDR>  INDICATES THAT A STATIC   19JUL73P
.*            SAVE AREA IS TO BE USED.  IF "*" IS SPECIFIED, A MINIMUM  19JUL73P
.*            (72B) SAVE AREA IS GENERATED INLINE, THE OTHER NOTATIONS  19JUL73P
.*            SPECIFY THE ADDRESS OF THE SAVE AREA TO BE USED.          19JUL73P
.*  &DSA AND &SSA ARE EXCLUSIVE.  IF BOTH OMITTED, DSA=* IS ASSUMED.
.*  THE SAVE AREA IS CHAINED TO THE ACTIVE SAVE AREA CHAIN, THE END
.*  OF WHICH MUST BE ADDRESSED BY (R13) AT POINT OF MACRO CALL.
.*
.*  &COPYR  : YES|NO   GENERATE A GMD-RZ.BN ---------------- APPENDED   13APR77B
.*                     TO THE EP ID.                                    13APR77B
.*  &SP     : DEC.|SYMBOL  SUBPOOL NUMBER FOR GETMAIN                   04APR78B
.*--OLD KEYWORDS STILL SUPPORTED JUST FOR COMPATIBILITY--
.*  &EP     : ALTERNATE ENTRY POINT NAME, AFFECTS BASE REGISTER USING
.*            STATEMENTS ONLY.
.*  &NAME   : FORMER NAME OF ID KEYWORD.
.*  &LEN    : EQ. TO &DSA(2).
.*
         LCLA  &NA,&NB
         LCLC  &C
         AIF   ('&NAME' NE '').ONAME   ***OLD***
.GO1     AIF   ('&LEN' NE '').OLEN     ***OLD***
         DS    0H                                                       19JUL73P
.GO2     AIF   ('&BASE' EQ '').YBASE
         USING &EP,&BASE(1)            PROGRAM BASE
.USE2    AIF   (&NA+1 GE N'&BASE).USE15
&NA      SETA  &NA+1
         USING &EP+&NA*4096,&BASE(&NA+1)
         AGO   .USE2
.USE15   USING &EP,15
&LABEL   B     BMC&SYSNDX
         DC    AL1(BMC&SYSNDX.A-*-1)   ID LENGTH
         AIF   ('&ID' NE '').ID
&C       SETC  '&LABEL'                 IF NO EXTRA ID, USE LABEL
         AIF   ('&C' NE '').DID
&C       SETC  '&SYSECT'               IF NO LABEL EITHER, USE CSECT NM
         AIF   ('&C' NE '').DID
&C       SETC  '?'                     NO CSECT NAME EITHER.
         MNOTE 4,'****** PROLOG: NO ENTRY ID'
.DID     DC    C'&C'
         AGO   .COPYR
.ID      AIF   ('&ID'(1,1) EQ '''').IDQ
         AIF   ('&ID'(K'&ID,1) EQ '''').IDC
         DC    C'&ID'
         AGO   .COPYR
.IDC     DC    &ID
         AGO   .COPYR
.IDQ     DC    C&ID
.COPYR   AIF   ('&COPYR' NE 'YES').COPYR1                               19JUL73P
         DC    C' ----------------------------'                         13APR77B
         AGO   .IDEND                                                   19JUL73P
.COPYR1  AIF   ('&COPYR' EQ '' OR '&COPYR' EQ 'NO').IDEND               19JUL73P
         BMCERMAC PROLOG,123,COPYR,&COPYR,NO
.IDEND   ANOP
BMC&SYSNDX.A EQU *
         AIF   ('&SSA' NE '').SSA
.*
.*  DYNAMIC SAVE AREA SET-UP
.*
.DSA     AIF   ('&DSA(2)' NE '').DSA2
&C       SETC  '72'                    MINIMUM/DEFAULT LENGTH
         AIF   ('&DSA(1)' EQ '' OR '&DSA(1)' EQ '*').DSA72
&C       SETC  '&DSA(1)'(1,7)'#'       STANDARD LENGTH SYMBOL
.DSA72   DC    A(&C)                   LENGTH OF SAVE/WORK AREA
         AGO   .DSA3
.DSA2    DC    A(&DSA(2))              SAVE/WORK AREA LENGTH
.DSA3    AIF   ('&SP' EQ '0').SP0#1                                     04APR78B
         ORG   *-4                                                      04APR78B
BMC&SYSNDX.S DC AL1(&SP)               GENERATE SUBPOOL IF SPECIFIED    04APR78B
         ORG   *+3                                                      04APR78B
.SP0#1   ANOP
BMC&SYSNDX STM 14,12,12(13)
         L     0,*-8                   =LENGTH OF DYNAMIC AREA          13APR77B
         GETMAIN R,LV=(0)              GET SPACE UNCONDITIONALLY        13APR77B
         AIF   ('&SP' NE '0').SP0#2                                     04APR78B
         ST    0,0(,1)                 LENGTH INTO WORD 0 OF THE AREA   13APR77B
.SP0#2   L     14,8(,13)               PUSH LOW POINTER                 13APR77B
         STM   13,14,4(1)              HI + LO POINTER TO NEW SAVE AREA 13APR77B
         ST    1,8(,13)                NOW LOW POINTER TO HI SAVE AREA  13APR77B
         LM    13,1,8(13)              RESTORE REGISTERS                13APR77B
         AGO   .BASE
.*
.*  STATIC SAVE AREA SET-UP
.*
.SSA     AIF   ('&DSA' NE '').YSA
         AIF   ('&SP' EQ '0').SSA1
         BMCERMAC PROLOG,60,SP,SSA
.SSA1    AIF   ('&SSA' NE '*').SSAL
         DC    18F'0'                  STATIC SAVE AREA
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S REGISTERS
         LA    14,*-19*4               -> STATIC SAVE AREA
         AGO   .SACHAIN
.SSAL    AIF   ('&SSA'(1,1)  NE '<' AND '&SSA'(K'&SSA,1) NE ')').SSAADR 03OCT73P
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S  REGISTERS         19JUL73P
         BMCLA 14,&SSA                 -> STATIC SAVE AREA              19JUL73P
         AGO   .SACHAIN                                                 19JUL73P
.SSAADR  DC    A(&SSA)                                                  19JUL73P
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S REGISTERS
         L     14,*-8                  -> STATIC SAVE AREA
.SACHAIN SR    15,15                   LEN(NEW) = 0                     04NOV74P
         LR    0,13                    HSA(NEW) = OLD                   04NOV74P
         L     1,8(,13)                LSA(NEW) = LSA(OLD)              04NOV74P
         STM   15,1,0(14)              SET LENGTH, CHAINING             04NOV74P
         ST    14,8(,13)               LSA(OLD) = NEW
         LM    13,1,8(13)              -> NEW SAVE AREA, RESTORE REGS   04NOV74P
.*
.*  BASE REGISTER(S)
.*
.BASE    AIF   ('&BASE(1)' EQ '15').BASE1
         DROP  15                      DROP TEMPORARY BASE
         LR    &BASE(1),15             LOAD FIRST BASE REGISTER
.BASE1   AIF   (N'&BASE LT 2).DSAUSE
         LA    &BASE(N'&BASE),2048
.BASE2   LA    &BASE(&NB+2),2048(&BASE(N'&BASE),&BASE(&NB+1))
&NB      SETA  &NB+1
         AIF   (&NB+1 LT N'&BASE).BASE2
.DSAUSE  AIF   ('&SP' EQ '0' OR '&SSA' NE '').SP0#3                     04APR78B
         MVC   0(4,13),BMC&SYSNDX.S    LEN + SP INTO WORD 0 OF THE AREA 04APR78B
.SP0#3   AIF   ('&DSA(1)' EQ '' OR '&DSA(1)' EQ '*').END
         USING &DSA(1),13
         MEXIT
.*
.YSA     BMCERMAC PROLOG,34,DSA/SSA,SSA  EXCLUSIVE OPERANDS, SSA IGNORD
         AGO   .DSA
.YBASE   BMCERMAC PROLOG,110,BASE
         MEXIT
.*
.*  *** OLD VERSIONS COMPATIBILITY ***
.*
.ONAME   AIF   ('&ID' NE '').YNAME
&LABEL   PROLOG BASE=&BASE,ID=&NAME,DSA=&DSA,SSA=&SSA,COPYR=&COPYR,EP=&-
               EP,LEN=&LEN
         MEXIT
.YNAME   BMCERMAC PROLOG,40,NAME
         AGO   .GO1
.OLEN    AIF   ('&SSA' NE '' OR '&DSA(2)' NE '').YLEN
&LABEL   PROLOG BASE=&BASE,ID=&ID,DSA=(&DSA(1),&LEN),SSA=&SSA,COPYR=&CO-
               PYR,EP=&EP
         MEXIT
.YLEN    BMCERMAC PROLOG,40,LEN
         AGO   .GO2
.END     MEND
./ ADD NAME=PTHCONT  0100-21053-21053-1621-00055-00055-00000-GRZ027  54
         MACRO
&LABEL   PTHCONT &PATHS
.* DEFINE BRANCH ENTRY FOR PATHS                        V:07SEP72-GEIST
.* PARAMETERS:                                        REV:17JUL73-GEIST
.* P0 &LABEL   NAME OF BRANCH NODE / MANDATORY / SYMBOL
.* P1 &PATHS   NAMES OF ABNORMALLY ENTERING PATHS / OPTIONALLY /
.*                   LIST OF PATH NAMES
.*
         GBLA  &BMC0A01(12),&BMC0A02(12),&BMC0A03,&BMC0A04(12),&BMC0A05
         GBLB  &BMC0B01(12)
         GBLC  &BMC0C01,&BMC0C02,&BMC0C03,&BMC0C04(12),&BMC0C05(12)
         LCLA  &X,&I,&J,&K,&L,&TI,&Y,&M
         LCLC  &T(12)
&X       SETA  N'&PATHS
         AIF   ('&LABEL' EQ '').L1
&LABEL   DC    0H'0'
         AGO   .L2
.L1      AIF   ('&PATHS' EQ '').Y1
.L2      AIF   (&J GE &X).L3
&J       SETA  &J+1
&I       SETA  0
.L5      AIF   (&I GE &BMC0A03).L2
&I       SETA  &I+1
         AIF   ('&BMC0C04(&I)' NE '&PATHS(&J)').L5
&BMC0B01(&I) SETB 1
         AGO   .L2
.L3      AIF   (&K GE &BMC0A05).L6
&K       SETA  &K+1
         AIF   ('&BMC0C05(&K)' NE '&LABEL').L3
&BMC0C05(&K) SETC ''
&Y       SETA  &BMC0A04(&K)
         AIF   (&K NE &BMC0A05).L7
&BMC0A05 SETA  &BMC0A05-1
.L7      AIF   (&L GE &BMC0A03).L8
&L       SETA  &L+1
&X       SETA  &Y/2
&BMC0B01(&L) SETB (&BMC0B01(&L) OR (&X*2 NE &Y))
&Y       SETA  &X
         AGO   .L7
.L6      AIF   ('&PATHS' NE '').L8
         MNOTE 0,'PTH010 PTHCONT: &LABEL NOT PREVIUOSLY USED'
.L8      AIF   (&M GE &BMC0A03).L9
&M       SETA  &M+1
         AIF   (NOT &BMC0B01(&M)).L8
&T(&TI+1) SETC ',&BMC0C04(&M)'
&TI      SETA  &TI+1
         AGO   .L8
.L9      AIF   ('&T(1)' EQ '').MEND
&T(1)    SETC  '&T(1)'(2,7)
         MNOTE *,'CONT:&T(1)&T(2)&T(3)&T(4)&T(5)&T(6)&T(7)&T(8)&T(9)&T(-
               10)&T(11)&T(12)'
         MEXIT
.Y1      MNOTE  4,'PTH011 PTHCONT: LABEL OR PATHS MUST BE SPECIFIED'    17JUL73G
.MEND    MEND
./ ADD NAME=PTHDEF   0100-21053-21053-1621-00091-00091-00000-GRZ027  54
         MACRO
&LABEL   PTHDEF &PATHS,&R=,&TAB=,&SIZE=2
.*  DEFINE PATHNAMES AND PATH CONSTANTS                 V:07SEP72 GEIST
.*  PARAMETERS:                                       REV:17JUL73-GEIST
.*  P0 &LABEL      NO SPEC MEANING / OPTIONAL / SYMBOL
.*  P1 &PATHS      PATH NAMES / MANDATORY / LIST OF STRINGS(CHARS(1-7))
.*  K1 &R=         BXLE REGISTER / MANDATORY / GPR0-15 ODD REG
.*  K2 &TAB=       NAME OF TABLE / MANDATORY / SYMBOL
.*  K3 &SIZE=2     LENGTH OF TABLE ENTRIES / OPTIONAL / 1|2|4
.*
.* MEANING OF GLOBAL VARIABLES
.* &BMC0A01 - VECTOR OF BXLE VALUES; &BMC0A01(I) IS THE VALUE FOR
.*            PATH I; SET TO 0 BY PTHDEF; INCREMENTED BY PTHJMP,PTHTAB
.* &BMC0A02 - VECTOR; &BMC0A02(I) = NUMBER OF BITS USED FOR BXLE VALUE
.*            OF PATH I; SET TO 0 BY PTHDEF; INCREMENTED BY PTHENTRY,
.*            AND PTHJMP; READ BY PTHTAB
.* &BMC0A03 - NUMBER OF PATHS DEFINED; SET BY PTHDEF; RESET BY PTHTAB
.* &BMC0A04 - VECTOR OF OPEN PATHS; IF BIT &BMC0A03-I+1 OF &BMC0A04(J)
.*            IS 1 THEN PATH &BMC0C04(I) IS TO BE OPENED AT LABEL
.*            &BMC0C05(J); USED BY PTHJMP AND PTHCONT
.* &BMC0A05 - NUMBER OF ELEMENTS IN &BMC0A04 AND &BMC0C05; SET TO 0 BY
.*            PTHDEF; UPDATED BY PTHJMP,PTHCONT; RESET BY PTHTAB
.* &BMC0B01 - BIT VECTOR; &BMC0B01(I) = 1 --> PATH I IS OPEN
.*            SET TO 0 BY PTHDEF; CHANGED BY PTHENTRY,PTHJMP,PTHCONT
.* &BMC0C01 - WORK REGISTER FOR BXLE; SET BY PTHDEF, RESET BY PTHTAB
.* &BMC0C02 - LENGTH OF ENTRY IN PATH TABLE; SET BY PTHDEF, RESET BY
.*            PTHTAB TO '1'  (IF SIZE IS INVALID, SIZE=1 IS ASSUMED)    17JUL73G
.* &BMC0C03 - NAME OF TABLE; SET BY PTHDEF, RESET BY PTHTAB TO ''
.*            ALSO USED AS PREFIX FOR ENTRY POINT LABELS
.* &BMC0C04 - VECTOR OF PATHNAMES; SET BY PTHDEF
.* &BMC0C05 - VECTOR OF BRANCH LABELS STILL EXPECTED; USED BY PTHJMP,
.*            PTHCONT AND PTHTAB
.*
         GBLA  &BMC0A01(12),&BMC0A02(12),&BMC0A03,&BMC0A04(12),&BMC0A05
         GBLB  &BMC0B01(12)
         GBLC  &BMC0C01,&BMC0C02,&BMC0C03,&BMC0C04(12),&BMC0C05(12)
         LCLA  &I
         LCLC  &J
         AIF   ('&LABEL' EQ '').L1
&LABEL   DC    0H'0'
.L1      AIF   ('&BMC0C03' EQ '').L2
         MNOTE 4,'PTH001 PTHDEF: MACRO PTHDEF USED TWICE'
         MEXIT
.L2      ANOP
&BMC0A03 SETA  N'&PATHS
         AIF   (&BMC0A03 NE 0).L3
         MNOTE 4,'PTH002 PTHDEF: LIST OF PATHNAMES MUST BE SPECIFIED'
.L3      AIF   (&I GE &BMC0A03).L4
&I       SETA  &I+1
&BMC0A02(&I) SETA 0
&BMC0A01(&I) SETA 0
&BMC0B01(&I) SETB 0
&BMC0C04(&I) SETC '&PATHS(&I)'
         AIF   (K'&PATHS(&I) LE 7).L3
         MNOTE 0,'PTH003 PTHDEF: &PATHS(&I) LONG (WARNING)'
         AGO   .L3
.L4      AIF   ('&R' NE '').L5
         MNOTE 8,'PTH004 PTHDEF: R= OPERAND MUST BE SPECIFIED'
         AGO   .LL1
.L5      ANOP
&BMC0C01 SETC  '&R'
         AIF   (T'&R NE 'N').L6
         AIF   (&R/2*2 EQ &R).LL2
         AGO   .LL1
.L6      AIF   ('&R' GE 'R0').LL4
.LL5     MNOTE 0,'PTH005 PTHDEF: BE SHURE THAT R= SPECIFIES AN ODD REGI-
               ISTER;            MACRO CAN NOT CHECK IT.'
         AGO   .LL1
.LL4     AIF   ('&R' LE 'R9').LL3
         AIF   ('&R' LT 'R10').LL5
         AIF   ('&R' GT 'R15').LL5
.LL3     ANOP
&J       SETC  '&R'(2,2)
         AIF   (&J/2*2 NE &J).LL1
.LL2     MNOTE 4,'PTH006 PTHDEF: R= OPERAND MUST BE ODD REGISTER'
.LL1     ANOP                                                           17JUL73G
&BMC0C02 SETC  '&SIZE'                                                  17JUL73G
         AIF   ('&SIZE' EQ '2').L8
         AIF   ('&SIZE' EQ '4').L8
         AIF   ('&SIZE' EQ '1').L8
         MNOTE 4,'PTH007 PTHDEF: INVALID SIZE: MUST BE 1,2 OR 4'
&BMC0C02 SETC  '1'                                                      17JUL73G
.L8      AIF   ('&TAB' EQ '').L9
&BMC0C03 SETC  '&TAB'
         AGO   .L10
.L9      MNOTE *,'PTH008 PTHDEF: TABLE NAME IS BMC&SYSNDX'
&BMC0C03 SETC  'BMC&SYSNDX'
.L10     ANOP
&BMC0A05 SETA  0
         MEND
./ ADD NAME=PTHENTRY 0100-21053-21053-1621-00081-00081-00000-GRZ027  54
         MACRO
&LABEL   PTHENTRY &PATHS
.* DEFINE PATHS AND PATH CONSTANTS                      V:07SEP72-GEIST
.* PARAMETERS:                                        REV:23JUL73-GEIST 23JUL73G
.* P0  &LABEL  NO SPEC MEANING / OPTIONAL / SYMBOL
.* P1  &PATHS  LIST OF PATH NAMES ENTERING HERE
.*             IF OMITTED ALL DEFINED PATHS THAT HAVE NO ENTRY YET
.*
         GBLA  &BMC0A01(12),&BMC0A02(12),&BMC0A03,&BMC0A04(12),&BMC0A05
         GBLB  &BMC0B01(12)
         GBLC  &BMC0C01,&BMC0C02,&BMC0C03,&BMC0C04(12),&BMC0C05(12)
         LCLA  &I,&J,&K,&L,&X,&LA,&TI
         LCLB  &ENTRY
         LCLC  &S,&T(12),&PREFIX                                        23JUL73G
&X       SETA  N'&PATHS
&PREFIX  SETC  '&BMC0C03'(1,7)                                          23JUL73G
.L1      AIF   (&I GE &BMC0A03).L2     SET &LA = 1
&I       SETA  &I+1                    IF AT LEAST ONE PATH IS OPEN
         AIF   (NOT &BMC0B01(&I)).L1
&LA      SETA  1
.L2      AIF   (&X NE 0).L3            GO TO OPEN ALL SPECIFIED PATHS
.L4      AIF   (&K GE &BMC0A03).L5     OPEN ALL DEFINED PATHS
&K       SETA   &K+1
         AIF   (&BMC0A02(&K) NE 0).L2  THAT ARE NOT PREVIOUSLY OPENED
         AIF   (&LA NE 1).L6
&LA      SETA  2                       SAY BRANCH GENERATED
&LABEL   B     BMC&SYSNDX
.L6      ANOP
&S       SETC  'ABCDEFGHIJKL'(&K,1)
&PREFIX&S DS   0H                                                       23JUL73G
&BMC0B01(&K) SETB 1                    OPEN PATH &K
&BMC0A02(&K) SETA 1                    SAY ENTRY DEFINED
&ENTRY   SETB  1                       SAY AT LEAST ONE ENTRY GENERATED
         AGO   .L4
.L3      AIF   (&J GE &X).L5
&J       SETA  &J+1
&K       SETA  0
.L60     AIF   (&K GE &BMC0A03).L7
&K       SETA  &K+1
         AIF   ('&BMC0C04(&K)' NE '&PATHS(&J)').L60
         AIF   (&BMC0A02(&K) EQ 0).L8
         MNOTE 0,'PTH030 PTHENTRY: PATH &PATHS(&J) ALREADY ENTERED'
         AGO   .L3
.L8      AIF   (&LA NE 1).L9
&LA      SETA  2
&LABEL   B     BMC&SYSNDX
.L9      ANOP
&S       SETC  'ABCDEFGHIJKL'(&K,1)
&PREFIX&S DS   0H                      ENTRY LABEL                      23JUL73G
&BMC0B01(&K) SETB 1                    OPEN PATH
&BMC0A02(&K) SETA 1                    SAY ENTERED
&ENTRY   SETB  1                       AT LEAST ONE ENTRY GENERATED
         AGO   .L3
.L7      MNOTE 4,'PTH031 PTHENTRY: PATH &PATHS(&J) UNDEFINED'
         AGO   .L3
.L5      AIF   (&LA GE 2 OR '&LABEL' EQ '').L10
&LABEL   DC    0H'0'
.L10     AIF   (NOT &ENTRY).L11
         AIF   ('&BMC0C02' NE '2').L12
         LH    &BMC0C01,&BMC0C03-2(&BMC0C01)
         SLL   &BMC0C01,16
         AGO   .L13
.L12     AIF   ('&BMC0C02' NE '4').L14
         L     &BMC0C01,&BMC0C03-4(&BMC0C01)
         AGO   .L13
.L14     IC    &BMC0C01,&BMC0C03-1(&BMC0C01)
         SLL   &BMC0C01,24
.L13     AIF   (&LA NE 2).L11
BMC&SYSNDX DS  0H                      BRANCH AROUND ENTRY LABEL
.L11     AIF   (&L GE &BMC0A03).L16
&L       SETA  &L+1
         AIF   (NOT &BMC0B01(&L)).L11
&T(&TI+1) SETC ',&BMC0C04(&L)'
&TI      SETA  &TI+1
         AGO   .L11
.L16     AIF   ('&T(1)' EQ '').MEND
&T(1)    SETC  '&T(1)'(2,7)
         MNOTE *,'OPEN:&T(1)&T(2)&T(3)&T(4)&T(5)&T(6)&T(7)&T(8)&T(9)&T(-
               10)&T(11)&T(12)'
.MEND    MEND
./ ADD NAME=PTHGO    0100-21053-21053-1621-00047-00047-00000-GRZ027  54
         MACRO
&LABEL   PTHGO &PATH,&INDEX=
.* ENTER NET AS PATH &PATH                              V:07SEP72-GEIST
.* PARAMETERS:                                        REV:23JUL73-GEIST 23JUL73G
.* P0  &LABEL  NO SPEC MEANING / OPTIONAL / SYMBOL
.* P1  &PATH   NAME OF PATH TO BE ENTERED / MANDATORY / STRING(1-8)
.* K   &INDEX  SPEC CALL BY INDEX / OPTIONAL / (GPR) | SELF DEF TERM
.*
         GBLA  &BMC0A01(12),&BMC0A02(12),&BMC0A03,&BMC0A04(12),&BMC0A05
         GBLB  &BMC0B01(12)
         GBLC  &BMC0C01,&BMC0C02,&BMC0C03,&BMC0C04(12),&BMC0C05(12)
         LCLA  &I
         LCLC  &SUFFIX,&PREFIX                                          23JUL73G
         LCLB  &ERROR
         AIF   ('&BMC0C03' NE '').TST2
         MNOTE 4,'PTH021 PTHGO: MACRO PTHDEF MUST BE PREVIOUSLY USED'
&ERROR   SETB  1
.TST2    AIF   ('&PATH' NE '').GETINDX
         AIF   ('&INDEX' NE '').INDEX
         MNOTE 4,'PTH020 PTHGO: PATH TO BE ENTERED MUST BE SPECIFIED'
         AGO   .NAMEIT
.GETINDX AIF   (&ERROR).NAMEIT
.L3      AIF   (&I GE &BMC0A03).Y3
&I       SETA  &I+1
         AIF   ('&BMC0C04(&I)' NE '&PATH').L3
&SUFFIX  SETC  'ABCDEFGHIJKL'(&I,1)
         AIF   ('&INDEX' NE '').INDEX2
&LABEL   LA    &BMC0C01,&BMC0C02*&I
         AGO   .BRANCH2
.INDEX   AIF   (&ERROR).NAMEIT
.INDEX2  AIF   ('&BMC0C02' NE '1').NOTLEN1
&LABEL   BMCLA &BMC0C01,(&INDEX)                                        17JUL73G
         AGO   .BRANCH
.NOTLEN1 ANOP
&LABEL   LA    &BMC0C01,0(&INDEX(1),&INDEX(1))
         AIF   ('&BMC0C02' NE '4').BRANCH
         LA    &BMC0C01,0(&BMC0C01,&BMC0C01)
.BRANCH  AIF   ('&SUFFIX' EQ '').MEND
.BRANCH2 ANOP                                                           23JUL73G
&PREFIX  SETC  '&BMC0C03'(1,7)                                          23JUL73G
         B     &PREFIX&SUFFIX                                           23JUL73P
         MEXIT
.Y3      MNOTE 0,'PTH022 PTHGO: UNDEFINED PATH: &PATH'
.NAMEIT  AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
./ ADD NAME=PTHJMP   0100-21053-21053-1621-00133-00133-00000-GRZ027  54
         MACRO
&LABEL   PTHJMP &PATHS,&ADDR,&DROP=NO
.* JUMP OF SELECTIVE PATHS                              V:07SEP72 GEIST
.* PARAMETERS                                         REV:17JUL73 GEIST
.* P0  &LABEL  NO SPEC MEANING / OPTIONAL / SYMBOL
.* P1  &PATHS  PATHS THAT JUMP / OPTIONAL / DEFAULT:   ALL OPEN PATHS
.* P2  &ADDR   BRANCH ADDRESS  / OPTIONAL / DEFAULT: NO JUMP JUST CLOSE
.* K   &DROP   DROP PATHS ?    / OPTIONAL / YES | NO
.*
         GBLA  &BMC0A01(12),&BMC0A02(12),&BMC0A03,&BMC0A04(12),&BMC0A05
         GBLB  &BMC0B01(12)
         GBLC  &BMC0C01,&BMC0C02,&BMC0C03,&BMC0C04(12),&BMC0C05(12)
         LCLA  &I,&J,&K,&L,&N,&M,&TI,&X,&X2,&Y,&Z
         LCLB  &JMP,&M1(12)
         LCLC  &T(12),&P
&JMP     SETB  1
&N       SETA  N'&PATHS
         AIF   ('&ADDR' NE '').L1
         AIF   ('&PATHS' NE '').L2
.L4      AIF   (&I GE &BMC0A03).LL5
&I       SETA  &I+1
         AIF   (NOT &BMC0B01(&I)).L4
&BMC0B01(&I) SETB 0
&T(&TI+1) SETC ',&BMC0C04(&I)'                                          17JUL73G
&TI      SETA  &TI+1
&P       SETC  'EXIT:'
         AGO   .L4
.L2      AIF   (&J GE &N).L5
&J       SETA  &J+1
&I       SETA  0
.L7      AIF   (&I GE &BMC0A03).L6
&I       SETA  &I+1
         AIF   ('&BMC0C04(&I)' NE '&PATHS(&J)').L7
         AIF   (&BMC0B01(&I)).L8
         MNOTE 0,'PTH040 PTHJMP: PATH &PATHS(&J) ALREADY CLOSED'
         AGO   .L2
.L8      ANOP
&BMC0B01(&I) SETB 0
&JMP     SETB  0
         AGO   .L2
.L6      MNOTE 4,'PTH041 PTHJMP: PATH &PATHS(&J) UNDEFINED'
         AGO   .L2
.L5      AIF   ('&LABEL' EQ '').L27
&LABEL   DC    0H'0'
         AGO   .LL5
.L1      AIF   ('&PATHS' EQ '').L9
&JMP    SETB  0
.L11     AIF   (&I GE &BMC0A03).L9
&I       SETA  &I+1
         AIF   (NOT &BMC0B01(&I)).L11
&BMC0A01(&I) SETA 2*&BMC0A01(&I)
&BMC0A02(&I) SETA 1+&BMC0A02(&I)
         AGO   .L11
.L9      AIF   ('&DROP' EQ 'YES').LL1
.L91     AIF   (&K GE &BMC0A05).L12
&K       SETA  &K+1
         AIF   ('&BMC0C05(&K)' NE '').L13
&X2      SETA  &K
         AGO   .L91
.L13     AIF   ('&BMC0C05(&K)' NE '&ADDR').L91
&Y       SETA  &BMC0A04(&K)
.L15     AIF   (&L GE &BMC0A03).L14
&L       SETA  &L+1
&X       SETA  &Y
&Y       SETA  &Y/2
&M1(&L)  SETB  (2*&Y NE &X)
         AGO   .L15
.L14     ANOP
&BMC0A04(&K) SETA &Y
         AGO   .LL1
.L12     AIF   (&X2 NE 0).L16
&BMC0A05 SETA  &BMC0A05+1
&K       SETA  &BMC0A05
         AGO   .LL2
.L16     ANOP
&K       SETA  &X2
.LL2     ANOP
&BMC0C05(&K) SETC '&ADDR'
.LL1     AIF   (&JMP).LL3
&J       SETA  0
.L21     AIF   (&J GE &N).LL4
&J       SETA  &J+1
&I       SETA  0
.L19     AIF   (&I GE &BMC0A03).L18
&I       SETA  &I+1
         AIF   ('&PATHS(&J)' NE '&BMC0C04(&I)').L19
         AIF   (NOT &BMC0B01(&I)).L20
&BMC0B01(&I) SETB 0
&BMC0A01(&I) SETA &BMC0A01(&I)+1
&M1(&I)  SETB  1
         AGO   .L21
.L20     MNOTE 4,'PTH042 PTHJMP: PATH &PATHS(&J) ALREADY CLOSED'
         AGO   .L21
.L18     MNOTE 4,'PTH043 PTHJMP: PATH &PATHS(&J) UNDEFINED'
         AGO   .L21
.LL3     ANOP
&P       SETC  'EXIT:'
&I       SETA  0
.L23     AIF   (&I GE &BMC0A03).LL4
&I       SETA  &I+1
         AIF   (NOT &BMC0B01(&I)).L23
&BMC0B01(&I) SETB 0
&M1(&I)  SETB  1
&T(&TI+1) SETC ',&BMC0C04(&I)'
&TI      SETA  &TI+1
         AGO   .L23
.LL4     AIF   ('&DROP' EQ 'YES').L241
&L       SETA  1+&BMC0A03
.L25     AIF   (&L LE 1).L24
&L       SETA  &L-1
&Z       SETA  2*&Z+&M1(&L)
         AGO   .L25
.L24     ANOP
&BMC0A04(&K) SETA &Z
.L241    AIF   (&JMP).L26
&LABEL   BXLE  &BMC0C01,&BMC0C01,&ADDR
         AGO   .L27
.L26     AIF   (&BMC0A04(&K) EQ 0).MEND
&LABEL   B     &ADDR
.L27     AIF   (&JMP).LL5
&P       SETC  'CONT:'
.L30     AIF   (&M GE &BMC0A03).LL5
&M       SETA  &M+1
         AIF   (NOT &BMC0B01(&M)).L30
&T(&TI+1) SETC ',&BMC0C04(&M)'
&TI      SETA  &TI+1
         AGO   .L30
.LL5     AIF   (&TI EQ 0).MEND
&T(1)    SETC  '&T(1)'(2,7)
         MNOTE *,'&P&T(1)&T(2)&T(3)&T(4)&T(5)&T(6)&T(7)&T(8)&T(9)&T(10)-
               &T(11)&T(12)'
.MEND    MEND
./ ADD NAME=PTHTAB   0100-21053-21053-1621-00055-00055-00000-GRZ027  54
         MACRO
         PTHTAB
.*                                                      V:07SEP72 GEIST
.* GENERATE TABLE OF BXLE VALUES                      REV:23JUL73-GEIST 23JUL73G
.*
         GBLA  &BMC0A01(12),&BMC0A02(12),&BMC0A03,&BMC0A04(12),&BMC0A05
         GBLB  &BMC0B01(12)
         GBLC  &BMC0C01,&BMC0C02,&BMC0C03,&BMC0C04(12),&BMC0C05(12)
         LCLA  &X,&Y,&MAX,&K,&I,&TI,&L
         LCLC  &Z,&T(12)
&Z       SETC  'CHCF'(&BMC0C02,1)
&BMC0C03 DS    0&Z
&Y       SETA  8*&BMC0C02
.L5      AIF   (&I GE &BMC0A03).L1
&I       SETA  &I+1
&X       SETA  &BMC0A02(&I)
         AIF   (&X LT &Y).L20                                           17JUL73G
         MNOTE 4,'PTH050 PTHTAB: PATH &BMC0C04(&I) EXCEEDING LENGTH'
.L20     AIF   (&X EQ 0).L4                                             17JUL73G
.L2      AIF   (&X GE &Y).L3
&X       SETA  &X+1
&BMC0A01(&I) SETA 2*&BMC0A01(&I)+1
         AGO   .L2
.L3      AIF   (&BMC0A02(&I) LE &MAX).L4
&MAX     SETA  &BMC0A02(&I)
.L4      DC    FL&BMC0C02'&BMC0A01(&I)'                                 23JUL73G
         AGO   .L5
.L1      MNOTE *,'PTH051 PTHTAB: &MAX BITS USED'
.L6      AIF   (&K GE &BMC0A05).L7
&K       SETA  &K+1
         AIF   ('&BMC0C05(&K)' EQ '').L6
         MNOTE 0,'PTH052 PTHTAB: UNDEFINED LABEL &BMC0C05(&K) FOR BRANC-
               H'
&X       SETA  &BMC0A04(&K)
&L       SETA  0
.L8      AIF   (&L GE &BMC0A03).L6
&L       SETA  &L+1
&Y       SETA  &X
&X       SETA  &X/2
         AIF   (&Y EQ 2*&X).L8
&T(&TI+1) SETC ',&BMC0C04(&L)'
&TI      SETA  &TI+1
         AGO   .L8
.L7      AIF   ('&T(1)' EQ '').L9
&T(1)    SETC  '&T(1)'(2,7)
         MNOTE 0,'PTH053 PTHTAB: OPEN PATHS &T(1)&T(2)&T(3)&T(4)&T(5)&T-
               (6)&T(7)&T(8)&T(9)&T(10)&T(11)&T(12)'
.L9      ANOP                   RESET GLOBALS TO ALLOW A NEW PTHDEF
&BMC0A03 SETA  0                       NO PATH DEFINED
&BMC0A05 SETA  0                       NO OPEN LABEL LEFT
&BMC0C01 SETC  ''                      NO WORK REG DEFINED
&BMC0C02 SETC  '1'                     SIZE = 1                         17JUL73G
&BMC0C03 SETC  ''                      NO TABLE NAME DEFINED
         MEND
./ ADD NAME=SPFCB    0131-80105-84102-0851-00170-00118-00000-GRZ021  00
         MACRO
         SPFCB &TYPE=USER
SPFCB    DSECT , -
         AIF   ('&TYPE' NE 'INTERNAL').USER
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
* NAME :    SPFCB                                                     *
*                                                                     *
*                                                                     *
* FUNCTION: DATA FOR SPF INTERFACE ROUTINES                           *
*                                                                     *
* LEVEL NUMBER : 0.0                                                  *
*                                                                     *
* USED IN      : SPFINIT,  SPFEND,  SPFPT,  SPFPTGT,  SPFLINE,        *
*                SPFINITX, SPFENDX, SPFPTX, SPFPTGTX, SPFLINEX,       *
* USER PART IN : USER PROGRAM                                         *
*                                                                     *
* PSEUDO CODE:                                                        *
*           KAPITEL:                                                  *
* VERSION:                              LAST UPDATE:                  *
*           0.0                                     270480            *
* NOTES:                                                              *
*           USER PART OF CONTROL-BLOCK FOR PL/I IN GMD.PLI.MACLIB     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
         DS    0F
*                                      PTR TO INTERFACE ROUTINES
SPFENDA  DS    A                       END ROUTINE ADDRESS
SPFREQA  DS    A                       SPF REQUEST ROUTINE ADDRESS
SPFLINEA DS    A                       SET TO LINE I/O ROUTINE ADDRESS
SPFMENUA DS    A                       SPF MENU ROUTINE ADDRESS
SPFMSGA  DS    A                       SPF MENU MSG ROUTINE ADDRESS
SPFUSERA DS    A                       POINTER TO USER DATA START
***********************************************************************
*              NEW POINTERS MAY BE INSERTED HERE                      *
***********************************************************************
SPFFLAGS DS    X                       INTERNAL FLAGS
MENUOK   EQU   X'80'                   TLDPMENU CONTAINS VALID MENUNAME
ALTSCRN  EQU   X'40'                   ALTERNATE SCREEN MUST BE USED
SCRNSET  EQU   X'20'                   SEND ERASE/WRITE TO FORMAT SCRN
TEMPATTR DS    0X                      TEMP. BYTE OUTSIDE OF SPF
CNTL1    DS    X                       0 = FULLSCREEN MODE AT SPFINIT
*                                      ELSE NO FULLSCREEN MODE AT INIT
*
SPFMHABP DS    A                       TEMP. SAVED TLDMHABP
OWNMHABP DS    A                       SAVED TLDMHABP FOR INTERFACE
*                                      MHABP IS EXCHANGED FOR CALL TO
*                                      MHA AND MERR
*
SAVETLSP DS    A                       POINTER TO STARTING TLS SAVEAREA
*
MAXDISPL DS    0A                      NR. OF BYTES IN LOG. SCREEN
PARMPTR  DS    A                       FIELD FOR SVC PARAMETER
PARMFLD  DS    A                       FIELD FOR SVC PARAMETER
*                                      INTERNAL CONTROL BLOCK POINTERS
SPFTLDP  DS    A                       TLD POINTER (ZERO IF NO SPF)
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        USER PART WITH SPF VARIABLES                                 *
*                                                                     *
*        USED BY CALLER AS STRUCTURE                                  *
*        ADDRESS IS PASSED BY SPFINIT                                 *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
         AGO   .CONT
.USER    ANOP
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
* NAME :    SPFCB                                                     *
*                                                                     *
*                                                                     *
* FUNCTION: DATA AREA FOR SPF INTERFACE ROUTINES.                     *
*           ADDRESS OF THIS CONTROL BLOCK IS RETURNED FROM SUBROUTINE *
*           SPFINIT.                                                  *
*                                                                     *
* LEVEL NUMBER : 0                                                    *
*                                                                     *
* VERSION:                              LAST UPDATE:                  *
*           0                                       300480            *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
.CONT    ANOP
SPFUSER  DS    0F
SPFROW   DS    F                       CURSOR ROW
SPFCOL   DS    F                       CURSOR COLUMN
SPFCSCRN DS    F                       CURRENT SCREEN LENGTH (ROWS)
SPFMSCRN DS    F                       MAXIMUM SCREEN LENGTH (ROWS)
SPFUSCRN DS    F                       USER USED SCREEN LENGTH (ROWS)
*
SPFATTR  DS    0CL12                   ATTRIBUTE BYTES
SPFPTNO  DS    C                       OUTPUT FIELD NON-DISPLAY
SPFPTLO  DS    C                       OUTPUT FIELD LOW INTENSITY
SPFPTHI  DS    C                       OUTPUT FIELD HIGH INTENSITY
SPFGTNO  DS    C                       INPUT FIELD NON-DISPLAY
SPFGTLO  DS    C                       INPUT FIELD LOW INTENSITY
SPFGTHI  DS    C                       INPUT FIELD HIGH INTENSITY
SPFGTNOC DS    C                       INPUT FIELD CAPS NON-DISPLAY
SPFGTLOC DS    C                       INPUT FIELD CAPS LOW INTENSITY
SPFGTHIC DS    C                       INPUT FIELD CAPS HIGH INTENSITY
SPFPTNOS DS    C                       OUTPUT FIELD NON-DISPLAY SKIP
SPFPTLOS DS    C                       OUTPUT FIELD LOW INTENSITY SKIP
SPFPTHIS DS    C                       OUTPUT FIELD HIGH INTENSITY SKIP
*
SPFPPFK  DS    F                       PHYSICAL PFK
SPFPFK1  EQU   1,,C'#'                 PF1
SPFPFK2  EQU   2,,C'#'                 PF2
SPFPFK3  EQU   3,,C'#'                 PF3
SPFPFK4  EQU   4,,C'#'                 PF4
SPFPFK5  EQU   5,,C'#'                 PF5
SPFPFK6  EQU   6,,C'#'                 PF6
SPFPFK7  EQU   7,,C'#'                 PF7
SPFPFK8  EQU   8,,C'#'                 PF8
SPFPFK9  EQU   9,,C'#'                 PF9
SPFPFK10 EQU   10,,C'#'                PF10
SPFPFK11 EQU   11,,C'#'                PF11
SPFPFK12 EQU   12,,C'#'                PF12
SPFPFK13 EQU   13,,C'#'                PF13
SPFPFK14 EQU   14,,C'#'                PF14
SPFPFK15 EQU   15,,C'#'                PF15
SPFPFK16 EQU   16,,C'#'                PF16
SPFPFK17 EQU   17,,C'#'                PF17
SPFPFK18 EQU   18,,C'#'                PF18
SPFPFK19 EQU   19,,C'#'                PF19
SPFPFK20 EQU   20,,C'#'                PF20
SPFPFK21 EQU   21,,C'#'                PF21
SPFPFK22 EQU   22,,C'#'                PF22
SPFPFK23 EQU   23,,C'#'                PF23
SPFPFK24 EQU   24,,C'#'                PF24
SPFENTER EQU   28,,C'#'                PF28
*
SPFLPFK  DS    F                       LOGICAL PFK
SPFNOP   EQU   1,,C'#'                 NOP
SPFRED   EQU   2,,C'#'                 REDISPLAY
SPFSPL   EQU   3,,C'#'                 SPLIT
SPFSWP   EQU   4,,C'#'                 SWAP
SPFCSR   EQU   5,,C'#'                 CURSOR
SPFPRTH  EQU   6,,C'#'                 PRINT HIGH
SPFPRTL  EQU   7,,C'#'                 PRINT LOW
SPFNOPR  EQU   8,,C'#'                 NOP AND REDISPLAY
SPFLNE   EQU   9,,C'#'                 LINE COMMAND
SPFCMD   EQU   10,,C'#'                PRIMARY COMMAND
SPFNOPM  EQU   11,,C'#'                NOP WITH MESSAGE
SPFHLP   EQU   12,,C'#'                HELP
SPFRET   EQU   13,,C'#'                RETURN
SPFENDE  EQU   17,,C'#'                END
SPFENT   EQU   18,,C'#'                ENTER
SPFSCRU  EQU   25,,C'#'                SCROLL UP
SPFSCRD  EQU   26,,C'#'                SCROLL DOWN
SPFSCRL  EQU   27,,C'#'                SCROLL LEFT
SPFSCRR  EQU   28,,C'#'                SCROLL RIGHT
SPFFND   EQU   29,,C'#'                REPEAT FIND
SPFCHG   EQU   30,,C'#'                REPEAT CHANGE
*
SPFSPEC  DS    F                       SPECIAL FUNCTION
SPFPTONL EQU   B'10000000',,C'#'       TPUT ONLY (FIRST BIT ON)
SPFRSHW  EQU   1,,C'#'                 RESHOW SCREEN
SPFMBLD  EQU   2,,C'#'                 BUILD LOGICAL SCREEN,            LAY
*                                      DO NOT DISPLAY (SPFMENU)
SPFALARM EQU   4,,C'#'                 SOUND ALARM ON NEXT OUTPUT
SPFCFLD  EQU   8,,C'#'                 MARK FIRST FIELD AS CMD FIELD
*
SPFCB#   EQU   *-SPFCB,,C'#'
         AIF   ('&TYPE' NE 'INTERNAL').USER2
SPFPA2   EQU   26,,C'#'                PHYSICAL PA2 RESHOW KEY
LSCREEN  DS    0F
LSCROWS  EQU   43,,C'#'                NR. OF LINES IN LOG. SCREEN
LSCCOLS  EQU   80,,C'#'                NR. OF COLUMNS IN LOG. SCREEN
LSCSIZE  EQU   LSCROWS*LSCCOLS,,C'#'   LENGTH OF LOGICAL SCREEN
         ORG   LSCREEN+LSCSIZE
IOBUFSIZ EQU   2*LSCSIZE+100           SIZE OF TPUT/TGET BUFFER
IOBUFFER DS    0F                      TPUT/TGET BUFFER
         ORG   IOBUFFER+IOBUFSIZ
.USER2   ANOP
         MEND
./ ADD NAME=STA      0102-79143-79151-1005-00020-00021-00000-GRZP12  00
         MACRO
&LABEL   STA   &REG,&ADDRX,&R=0
.*                                                         03MAR70-PAHL
.*  STORE REGISTER INTO ADDRESS PART (BITS 8-31) OF A WORD 19FEB73-PAHL
.*
.*  &REG    : REG0-15   REGISTER CONTAINING AN ADDRESS TO BE INSERTED
.*  &ADDRX  : RX-ADDR   INTO THIS LOCATION, IN THE ADDRESS PART OF THE
.*                      WORD (BYTES 1-3).
.*  &R      : REG0-15   SPECIFIES THE AUXILIARY REGISTER TO BE USED.
.*
         AIF   ('&REG' EQ '' OR '&ADDRX' EQ '').Y1
&LABEL   IC    &R,&ADDRX
         ST    &REG,&ADDRX
         STC   &R,&ADDRX
         AIF   ('&REG(1)' NE '&R(1)').MEND
         BMCERMAC STA,136,FIRST
         MEXIT
.Y1      BMCERMAC STA,1,,,,&LABEL
.MEND    MEND
./ ADD NAME=STSP     0100-21053-21053-1621-00022-00022-00000-GRZ027  54
         MACRO
&LABEL   STSP  &REGA,&REGL,&ADDR
.*                                                         12JUL73-PAHL
.*  STORE STRING POINTER (INSTR.SET.EXTENSION; LENGTH=?)   20JUL73-PAHL 20JUL73P
.*
.*  &REGA   : GPR0-15   REGISTER HOLDING THE STRING ADDR.
.*            THE HI-O BYTE IS IGNORED.
.*  &REGL   : GPR0-15   REGISTER HOLDING THE STRING LENGTH IN ITS
.*            LO-O BYTE.  THE 3 HI-O BYTES ARE IGNORED.
.*  &ADDR   : RX-ADDR   FULLWORD THAT IS TO CONTAIN THE STRING POINTER.
.*       THE CONDITION CODE IS NOT CHANGED.
.*
         AIF   ('&REGA' EQ '' OR '&REGL' EQ '' OR '&ADDR' EQ '').Y1     19JUL73P
         AIF   ('&REGA' EQ '&REGL').Y2                                  19JUL73P
&LABEL   ST    &REGA,&ADDR             STRING ADDR
         STC   &REGL,&ADDR             STRING LENGTH
         MEXIT
.Y1      BMCERMAC STSP,001,,,,&LABEL                                    19JUL73P
         MEXIT                                                          19JUL73P
.Y2      BMCERMAC STSP,067,FIRST,SECOND,,&LABEL                         20JUL73P
         MEND
./ ADD NAME=TEXT     0100-21053-21053-1621-00078-00078-00000-GRZ027  54
         MACRO
&LABEL   TEXT  &TYPE
.*                                                         06MAR72-PAHL
.*  GENERATE TEXT CONSTANT                                 16JUN75-PAHL 16JUN75P
.*
.*  &TYPE   : CHAR.CODE   SPECIFIES LENGTH PREFIX FORMAT:
.*            OMITTED   TEXT WITHOUT LENGTH PREFIX
.*            "V"       TEXT WITH VARIABLE LENGTH RECORD DESCRIPTOR
.*            "H"       H'LENGTH',TEXT
.*            "L"       AL1(LENGTH),TEXT
.*            "E"       AL1(LENGTH-1),TEXT   (FOR EXECUTED MVC)
.*  &SYSLIST(2),...   TEXT CONSTANTS
.*            'CHAR.STR' |
.*            ANY VALID C-TYPE OR X-TYPE OPERAND OF "DC" STMT |
.*            ANY VALID OPERAND OF "DS" STMT |
.*            "SMI" (=X'4A') | "EOM" (=X'2A') | "NL" (=X'15')
.*
         LCLA  &K,&LMOD
         LCLC  &LAB,&LAB#
&LAB     SETC  '&LABEL'
         AIF   ('&LABEL' NE '').GO
&LAB     SETC  'BMC&SYSNDX'
.GO      ANOP
&LAB#    SETC  '&LAB'(1,7)'#'
&K       SETA  1
         AIF   ('&TYPE' EQ '' OR '&TYPE' EQ 'F').F
         AIF   ('&TYPE' EQ 'L').L
         AIF   ('&TYPE' EQ 'E').EX
         AIF   ('&TYPE' EQ 'H').H
         AIF   ('&TYPE' EQ 'V').V
         BMCERMAC TEXT,23,TYPE,&TYPE,
.F       ANOP
&LAB     EQU   *
         AGO   .LOOP
.L       ANOP
&LAB     DC    AL1(&LAB#)              LENGTH OF TEXT
&LMOD    SETA  1
         AGO   .LOOP
.EX      ANOP
&LAB     DC    AL1(&LAB#-1)            EXECUTE-LENGTH OF TEXT
&LMOD    SETA  1
         AGO    .LOOP
.H       ANOP
&LAB     DC    Y(&LAB#)                TEXT LENGTH
&LMOD    SETA  2
         AGO   .LOOP
.V       ANOP
&LAB     DC    Y(&LAB#+4,0)            V-RECORD DESCRIPTOR
&LMOD    SETA  4
.*
.LOOP    ANOP
&K       SETA  &K+1
         AIF   ('&SYSLIST(&K)' EQ '').LEN                               16JUN75P
         AIF   ('&SYSLIST(&K)'(1,1) EQ '''').DCC
         AIF   ('&SYSLIST(&K)'(K'&SYSLIST(&K),1) EQ '''').DC
         AIF   ('&SYSLIST(&K)' EQ 'SMI').SMI
         AIF   ('&SYSLIST(&K)' EQ 'NL').NL
         AIF   ('&SYSLIST(&K)' EQ 'EOM').EOM
         AIF   ('&SYSLIST(&K)'(K'&SYSLIST(&K),1) EQ ')' AND            -16JUN75P
               ('&SYSLIST(&K)'(1,1) EQ 'A' OR '&SYSLIST(&K)'(1,1) EQ 'Y-16JUN75P
               ')).DC                                                   16JUN75P
         DS    &SYSLIST(&K)
         AGO   .LOOP
.DCC     DC    C&SYSLIST(&K)
         AGO   .LOOP
.DC      DC    &SYSLIST(&K)
         AGO   .LOOP
.SMI     DC    X'4A'                   SMI
         AGO   .LOOP
.NL      DC    X'15'                   NL
         AGO   .LOOP
.EOM     DC    X'2A'                   EOM
         AGO   .LOOP
.LEN     ANOP
&LAB#    EQU   *-&LAB-&LMOD
         SPACE
         MEND
./ ADD NAME=TRIM     0100-21053-21053-1621-00058-00058-00000-GRZ027  54
         MACRO
&LABEL   TRIM  &FIELD,&LENGTH,&CHAR
.*                                                       17OKT78-ENNEN
.*| TYPE=DP
.*  FUNCTION:
.*      FIND IN FIELD LAST CHARAKTER
.*
.*  PARAMETERS:
.*     &FIELD   - RS-ADDR  | (GPR2 - 12)
.*                START ADDRESS OF FIELD TO BE SEARCHD
.*     &LENGTH  - SELF-DEF.TERM < 4093 |
.*                ABS.EXPR (1 < VALUE < 4093) | (GPR2 - 12)
.*                LENGTH OF FIELD
.*     &CHAR    - SELF-DEF.TERM < 4093
.*                TRAILING CHARAKTER
.*                DEFAULT IS : C' '
.*
.*  OPERATION:
.*     THIS MAKRO LOAD THE START ADDRESS AND THE LENGTH OF FIELD.
.*     THEN ELSE COMPAIRE THE LAST CHARAKTER IN FIELD WITH THE SEARCH
.*     CHARAKTER WHILE IT'S FOUND.
.*
.*  REGISTERS USED:
.*     GPR1  GPR0
.*
.*     GPR1 CONTENTS THE LENGTH OF FIELD TO THE LAST CHARAKTER
.*
.*
         LCLC  &C,&L
         AIF   ('&LABEL' EQ '').BEGIN
&LABEL   DS    0H
.BEGIN   ANOP
&C       SETC  'C'' '''
         AIF   ('&CHAR' EQ '').A
&C       SETC  '&CHAR'
.A       AIF   ('&FIELD' EQ '').YFIELD
         AIF   ('&LENGTH' EQ '').NLENGTH
         BMCLA 1,&LENGTH
         AGO   .B
.NLENGTH ANOP
&L       SETC  'L''&FIELD'
         LA    1,&L
.B       LTR   1,1
         BZ    M&SYSNDX+6
         BMCLA 0,&FIELD
         AR    1,0
L&SYSNDX BCTR  1,0
         CLI   0(1),&C
         BNE   M&SYSNDX
         CR    0,1
         BL    L&SYSNDX
         B     *+8
M&SYSNDX LA    1,1(1)
         SR    1,0
         MEXIT
.YFIELD  BMCERMAC BLANK,10,FIRST,,,&LABEL
.MEND    MEND
./ ADD NAME=TRL      0100-21053-21053-1621-00053-00053-00000-GRZ027  54
         MACRO
&LABEL   TRL   &FIELD,&LENGTH,&TRLTAB
.*                                                       17OKT78-ENNEN
.*| TYPE=DP
.*  FUNCTION:
.*      TRANSLATE LONG FIELD
.*
.*  PARAMETERS:
.*     &FIELD   - RS-ADDRESS | (GPR 2 - 12)
.*                START ADDRESS OF FIELD TO BE TRANSLATED
.*     &LENGTH  - SELF-DEF.TERM < 4093 |
.*                ABS.EXPR (1 < VALUE < 4093) | (GPR2 - 12)
.*                LENGTH OF FIELD TO BE TRANSLATED
.*     &TRLTAB  - RX-ADDRESS
.*                TRANSLATE TABLE
.*
.*  OPERATION:
.*     THIS MAKRO CALL THE  "TR"  INSTRUCTION WHILE THE FIELD LENGTH
.*     IS GREATER THEN 256 CHARACTER
.*
.*  REGISTERS USED:
.*     GPR15  GPR1  GPR0
.*
.*
         AIF   ('&LABEL' EQ '').BEGIN
&LABEL   DS    0H
.BEGIN   ANOP
.A       AIF   ('&FIELD' EQ '').YFIELD
         AIF   ('&LENGTH' EQ '').YLENGTH
         AIF   ('&TRLTAB' EQ '').YTRLTAB
         BMCLA 1,&FIELD
         BMCLA 15,&LENGTH
         LTR   15,15
         BZ    *+46
         LA    0,256
         CR    0,15
         BNL   *+30
         TR    0(256,1),&TRLTAB
         SR    15,0
         LA    1,256(,1)
         B     *-18
         TR    0(1,1),&TRLTAB
         BE    *+10
         BCTR  15,0
         EX    15,*-12
         MEXIT
.YTRLTAB MNOTE 12,'****** NO TRANSLATE TABLE '
         MEXIT
.YLENGTH MNOTE 12,'****** BLANK: ILLEGAL OR INDETERMINATE LENGTH'
         MEXIT
.YFIELD  BMCERMAC BLANK,10,FIRST,,,&LABEL
.MEND    MEND
./ ADD NAME=TRTAB    0100-21053-21053-1621-00054-00054-00000-GRZ027  54
         MACRO
&LABEL   TRTAB &FILL
.*                                                      00JAN69-BLASIUS
.* TRTAB GENERATES A TRANSLATE TABLE (LIST FORM ONLY).     19FEB73-PAHL
.*
.* MACRO INSTRUCTION FORMAT:    LABEL   TRTAB   <FILL>,<LIST>
.* <FILL> MUST BE THE OPERAND FIELD OF A DC INSTRUCTION DEFINING THE
.*        IMPLIED CONTENTS OF THE TABLE. EXAMPLES:  256C' '
.*                                                  256AL1(*-LABEL)
.* <LIST> IS A LIST OF MACRO INSTRUCTION OPERANDS EACH OF WHICH MUST
.*        BE OF THE FORM  (<OLD>,<NEW>).  <OLD> MUST BE A SELF-DEFINING
.*        TERM TELLING WHERE IN THE TABLE <NEW> IS TO BE GENERATED.
.*        <NEW> MUST BE EITHER A VALID OPERAND FOR A DC-INSTRUCTION OR
.*        A VALID SELF-DEFING TERM.
.*
.* EXAMPLES:
.* X TRTAB 256X'00',(C'A',X'0A0B0C0D0E0F'),(C'1',X'010203040506070809')
.* Y TRTAB 256AL1(*-Y),(C'0',AL1(0,1,2,3,4,5,6,7,8,9))
.* Z TRTAB 256C' ',(C'A',9AL1(*-Z)),(C'J',9AL1(*-Z)),(C'S',8AL1(*-Z))
.*
.* TABLE X CONVERTS ALL HEXADECIMAL DIGITS TO THEIR BINARY EQUIVALENT
.*    AND ALL OTHER CHARACTERS TO ZERO.
.* TABLE Y CONVERTS ALL DECIMAL DIGITS TO THEIR BINARY EQUIVALENT AND
.*    LEAVES ALL OTHER CHARACTERS UNCHANGED.
.* TABLE Z LEAVES ALL LETTERS UNCHANGED AND CONVERTS ALL OTHER
.*    CHARACTERS TO BLANKS.
.*
         LCLA  &C
         LCLC  &L
         AIF   ('&FILL' EQ '').Y1
&L       SETC  '&LABEL'
         AIF   ('&LABEL' NE '').GO
&L       SETC  'BMC&SYSNDX'
.GO      ANOP
&L       DC    &FILL
&C       SETA  1
.A       AIF   (&C GE N'&SYSLIST).ORG
&C       SETA  &C+1
         AIF   (N'&SYSLIST(&C) NE 2 OR '&SYSLIST(&C,1)' EQ '' OR '&SYSL-
               IST(&C,2)' EQ '').YARG
         ORG   &L+&SYSLIST(&C,1)
         AIF   ('&SYSLIST(&C,2)'(K'&SYSLIST(&C,2),1) EQ ''''     OR    -
               '&SYSLIST(&C,2)'(K'&SYSLIST(&C,2),1) EQ ')').DC
         DC    AL1(&SYSLIST(&C,2))
         AGO   .A
.DC      DC    &SYSLIST(&C,2)
         AGO   .A
.ORG     ORG   &L+256
         MEXIT
.YARG    BMCERMAC TRTAB,24,&C-TH,&SYSLIST(&C)
         AGO   .A
.Y1      BMCERMAC TRTAB,10,1ST(FILLER),,,&LABEL
         MEND
./ ADD NAME=TRTL     0100-21053-21053-1621-00059-00059-00000-GRZ027  54
         MACRO
&LABEL   TRTL  &FIELD,&LENGTH,&TRTLTAB
.*                                                       17OKT78-ENNEN
.*| TYPE=DP
.*  FUNCTION:
.*      TRANSLATE AND TEST LONG FIELD
.*
.*  OPERATION:
.*     THIS MAKRO CALL THE  "TRT"  INSTRUCTION WHILE THE FIELD LENGTH
.*     IS GREATER THEN 256 CHARACTER
.*
.*  PARAMETERS:
.*     &FIELD   - RS-ADDRESS | (GPR 2 - 12)
.*                START ADDRESS OF FIELD TO BE TRANSLATED
.*     &LENGTH  - SELF-DEF.TERM < 4093 |
.*                ABS.EXPR (1 < VALUE < 4093) | (GPR2 - 12)
.*                LENGTH OF FIELD TO BE TRANSLATED
.*     &TRLTAB  - RX-ADDRESS
.*                TRANSLATE TABLE
.*
.*  REGISTERS USED:
.*     GPR15  GPR0  GPR1  GPR2
.*
.*     GPR1 POINTS BEHIND TRANSLATED FIELD
.*
.*
         AIF   ('&LABEL' EQ '').BEGIN
&LABEL   DS    0H
.BEGIN   ANOP
.A       AIF   ('&FIELD' EQ '').YFIELD
         AIF   ('&LENGTH' EQ '').YLENGTH
         AIF   ('&TRTLTAB' EQ '').YTRTLTB
         BMCLA 1,&FIELD
         BMCLA 15,&LENGTH
         LTR   15,15
         BZ    *+52
         LA    0,256
         CR    0,15
         BNL   *+36
         TRT   0(256,1),&TRTLTAB
         BNZ   *+14
         SR    15,0
         LA    1,256(,1)
         B     *-22
         CR    0,15
         B     *+16
         TRT   0(1,1),&TRTLTAB
         BCTR  15,0
         EX    15,*-8
         BNZ   *+8
         LA    1,1(1,15)
         MEXIT
.YTRTLTB MNOTE 12,'****** NO TRANSLATE TABLE '
         MEXIT
.YLENGTH MNOTE 12,'****** BLANK: ILLEGAL OR INDETERMINATE LENGTH'
         MEXIT
.YFIELD  BMCERMAC BLANK,10,FIRST,,,&LABEL
.MEND    MEND
./ ADD NAME=UCBD     0101-77136-77136-1857-00850-00850-00001-GRZP11  11
         MACRO
         UCBD  &LIST=NO,&PREFIX=NO,&DEVD=
         PUSH  PRINT
         AIF   ('&LIST' EQ 'YES').UCB1
         PRINT OFF
.UCB1    ANOP
UCB      DSECT , -                 UCBPTR-512
         AIF   ('&PREFIX' NE 'YES').UCB001
UCBBGN   EQU   * -                                               MDC158
         DS    126F -              RESERVED
UCBPXST  EQU   * -                 START OF USED FIELDS IN PREFIX
*                                                                MDC187
UCBLOCK  DS    F -                 DEVICE LOCK                   MDC238
UCBIOQ   DS    A -                 ADDRESS OF LAST QUEUING ELEMENT USED
*                                  FOR THIS DEVICE.  ADDRESS OF ERP
*                                  WORK AREA DURING INTERCEPT AND
*                                  ASYNCHRONOUS ATTENTION/DEVICE END
*                                  WITH UNIT CHECK CONDITIONS.  WHEN
*                                  DIRECT ACCESS VOLUME VERIFICATION
*                                  (DAVV) IS WAITING FOR A VOLUME
*                                  MOUNT, THIS FIELD WILL POINT TO THE
*                                  DAVV SRB.                     MDC197
UCBCURPX EQU   *-UCBPXST -         ACTUAL PREFIX DATA LENGTH     MDC151
UCBPRFX  EQU   *-UCB -             TOTAL PREFIX LENGTH FOR PREFIX
*                                  ADDRESSABILITY                MDC152
         SPACE 3
.UCB001  ANOP
***********************************************************************
*
*              SYSGEN-INDEPENDENT
*              COMMON SECTION
*
UCBOB    DS    0F
         AIF   ('&PREFIX' EQ 'YES').UCB002
UCBBGN   EQU   * -                                               MDC158
.UCB002  ANOP
*
***********************************************************************
*
UCBCMSEG EQU   * -                 START OF COMMON SECTION       MDC168
UCBJBNR  DS    B -                 FLAG BYTE  (OS/VS2)           MDC012
UCBVRDEV EQU   X'80' -             UCB FOR VIRTUAL DEVICE        MDC012
UCBJES3  EQU   X'40' -             ALL VOLUME MOUNTING AND DEVICE
*                                  MANAGEMENT FOR THIS DEVICE IS
*                                  CONTROLLED BY JES3            MDC246
UCBRV002 EQU   X'20',,C'X' -       RESERVED
UCBRV003 EQU   X'10',,C'X' -       RESERVED
UCBOLDSM EQU   X'08' -             OLTEP COMMUNICATING DIRECTLY WITH
*                                  THE MASS STORAGE CONTROL (MSC),
*                                  NOT THROUGH THE MASS STORAGE SYSTEM
*                                  COMMUNICATOR (MSSC)
*                                  (MDC301)                    @Z30LP9A
UCBRSV02 EQU   X'04',,C'X' -       RESERVED
UCBRV011 EQU   X'02',,C'X' -       RESERVED                      MDC013
UCBMONT  EQU   X'01' -             VOLUME TO BE MOUNTED IS TO BE
*                                  RETAINED OR CONTAIN A PASSED DATA
*                                  SET (SET BY DEVICE ALLOCATION OR
*                                  DATA MANAGEMENT FOR OS/VS2)   MDC014
UCBFL5   DS    B -                 FLAGS
UCBDCC   EQU   X'80' -             DISCONNECT COMMAND CHAIN DEVICE
*                                                                MDC098
UCBAF    EQU   X'40' -             ATTENTION FOR THIS CONSOLE DEVICE
*                                  IS TO BE PROCESSED BY THE
*                                  COMMUNICATIONS TASK           ICB321
UCBAMV   EQU   X'40' -             SUCCESSFUL COMPARISON CHECKING OF
*                                  THE ACCESS METHOD CATALOG AND THE
*                                  VTOC (VSAM DIRECT ACCESS DEVICES
*                                  ONLY)                         ICB437
UCBSASK  EQU   X'20' -             DEVICE REQUIRES STAND ALONE
*                                  SEEK                          MDC099
UCBVSDR  EQU   X'10' -             DEVICE HAS VARIABLE LENGTH SDR'S
UCBENVRD EQU   X'08' -             DEVICE RETURNS ENVIRONMENTAL
*                                  DATA                          MDC100
UCBNALOC EQU   X'04' -             THIS OFFLINE DEVICE IS BEING USED BY
*                                  A SYSTEM COMPONENT.  THE DEVICE
*                                  STATUS MUST NOT CHANGE TO ONLINE NOR
*                                  WILL IT BE ALLOCATED.  THE LAST
*                                  PATH/CHANNEL/CPU TO THE DEVICE MUST
*                                  NOT BE VARY'ED OFFLINE.  THE DEVICE
*                                  IS UNAVAILABLE FOR USAGE BY ANOTHER
*                                  SYSTEM COMPONENT WHICH PROCESSES
*                                  OFFLINE DEVICES.  TO SET THIS
*                                  INDICATOR ON, A COMPONENT MUST
*                                  OBTAIN VIA ENQ, EXCLUSIVE, SYSTEM
*                                  LEVEL CONTROL OF RESOURCE SYSIEFSD,
*                                  Q4.  SERIALIZATION IS NOT REQUIRED
*                                  TO TURN THIS INDICATOR OFF.   MDC027
UCBALTCU EQU   X'02' -             DEVICE HAS AN ALTERNATE CONTROL UNIT
*                                  ADDRESS
UCBALTPH EQU   X'01' -             DEVICE HAS AN ALTERNATE PATH
UCBID    DS    C -                 UCB IDENTIFICATION (FF)
UCBSTND  EQU   X'FF' -             STANDARD UCB                  MDC101
UCBSTAT  DS    B -                 DEVICE STATUS
UCBONLI  EQU   X'80' -             DEVICE IS ONLINE
UCBCHGS  EQU   X'40' -             DEVICE STATUS IS TO BE CHANGED FROM
*                                  ONLINE TO OFFLINE, AND EITHER
*                                  ALLOCATION IS ENQUEUED ON DEVICES
*                                  OR THE DEVICE IS ALLOCATED.  (BIT 0
*                                  IS ALSO ON.)
UCBRESV  EQU   X'20' -             THE MOUNT STATUS OF THE VOLUME ON
*                                  THIS DEVICE IS RESERVED
UCBUNLD  EQU   X'10' -             UNLOAD OPERATOR COMMAND HAS BEEN
*                                  ADDRESSED TO THIS DEVICE.  THE
*                                  DEVICE IS NOT YET UNLOADED.
UCBALOC  EQU   X'08' -             DEVICE IS ALLOCATED
UCBPRES  EQU   X'04' -             THE MOUNT STATUS OF THE VOLUME ON
*                                  THIS DEVICE IS PERMANENTLY RESIDENT
UCBSYSR  EQU   X'02' -             SYSTEM RESIDENCE DEVICE OR
*                                  PRIMARY CONSOLE OR
*                                  ACTIVE CONSOLE
UCBDADI  EQU   X'01' -             STANDARD TAPE LABELS HAVE BEEN
*                                  VERIFIED FOR THIS TAPE VOLUME
*                                  OR SECONDARY CONSOLE OR
*                                  CONSOLE STATUS CHANGING
UCBCHAN  DS    0FL2 -              BINARY CHANNEL/UNIT ADDRESS   MDC102
UCBCHA   DS    FL1 -               BINARY CHANNEL ADDRESS OF LAST
*                                  STARTED I/O OPERATION
UCBUA    DS    FL1 -               BINARY UNIT ADDRESS
UCBSFLS  DS    0BL2 -              DEVICE STATUS FLAGS           MDC103
UCBFLA   DS    BL1 -               I/O SUPERVISOR FLAG BYTE A    MDC104
UCBFL1   EQU   UCBFLA -                ALIAS
UCBBSY   EQU   X'80' -             DEVICE IS BUSY                MDC105
UCBBUSYD EQU   UCBBSY -                ALIAS
UCBNRY   EQU   X'40' -             DEVICE NOT READY              MDC106
UCBNOTRD EQU   UCBNRY -                ALIAS
UCBPST   EQU   X'20' -             POST FLAG (ASSOC IOQE)        MDC107
UCBUSING EQU   UCBPST -                ALIAS
UCBPSNS  EQU   X'10' -             PENDING SENSE OPERATION       MDC108
UCBCUB   EQU   X'08' -             CONTROL UNIT BUSY             MDC109
UCBNOTRC EQU   UCBCUB -                ALIAS
UCBSAP   EQU   X'04' -             STAND ALONE PROCESS ON DEVICE ACTIVE
*                                  (EG., RESERVE)                MDC110
UCBACTV  EQU   X'02' -             CHANNEL PROGRAM ACTIVE ON DEVICE
*                                                                MDC111
UCBQISCE EQU   X'01' -             DEVICE QUIESCED               MDC112
UCBFLB   DS    BL1 -               I/O SUPERVISOR FLAG BYTE B    MDC113
UCBIORST EQU   X'80' -             I/O RESTART VIA ALTERNATE CPU
*                                  RECOVERY HAS FACTORED DEVICE OUT
*                                  OF CONFIGURATION BECAUSE OF
*                                  NON-ACCESSABILITY.  ALL INCOMING
*                                  I/O REQUESTS ARE INTERCEPTED AND
*                                  MARKED IN PERMANENT ERROR WITH A
*                                  COMPLETION CODE OF X'51'.
*                                  HOWEVER, IF CHANNEL RECONFIGURATION
*                                  HARDWARE (CRH) IS ACTIVE AND CRH
*                                  WILL BE USED TO ACCESS THE DEVICE
*                                  ASSOCIATED WITH THE UCB, THIS BIT
*                                  WILL BE ON IN EVERY UCB THAT HAS
*                                  OUTSTANDING I/O ACROSS A CRH PATH.
*                                  (MDC320)                    @Z30CQ9A
UCBASNS  EQU   X'40' -             SENSE ACTIVE ON DEVICE        MDC115
UCBSPST  EQU   X'20' -             SENSE POST INDICATOR          MDC116
UCBRESVH EQU   X'10' -             DEVICE RESERVED INDICATOR     MDC157
UCBCRHRV EQU   X'08' -             RESERVED PATH THROUGH A CHANNEL
*                                  RECONFIGURATION HARDWARE (CRH)
*                                  CONNECTION  (MDC303)        @Z30CQ9A
UCBCRHSN EQU   X'04' -             IF 1, SENSE PENDING FROM INOPERATIVE
*                                  CPU.  IF 0, SENSE PENDING FROM
*                                  OPERATIVE CPU.  BIT IS SET ONLY WHEN
*                                  CHANNEL RECONFIGURATION HARDWARE
*                                  (CRH) IS ACTIVE.  (MDC332)  @Z30CQ9A
UCBVALPH EQU   X'02' -             PATH VALIDATION  (MDC337)   @ZA00078
UCBFLB7  EQU   X'01',,C'X' -       RESERVED
UCBCHM   DS    0B -                PATH STATUS MASK FOR THIS DEVICE
*                                                                MDC198
UCBCHM1  DS    B -                 SAME AS UCBCHM                MDC199
UCBPTH0  EQU   X'C0' -             PATHS FROM CPU 0              MDC200
UCBPPA   EQU   X'80' -             PRIMARY PATH CPU 0            MDC201
UCBSPA   EQU   X'40' -             SECONDARY PATH CPU 0          MDC202
UCBPTH1  EQU   X'30' -             PATHS FROM CPU 1              MDC203
UCBPPB   EQU   X'20' -             PRIMARY PATH CPU 1            MDC204
UCBSPB   EQU   X'10' -             SECONDARY PATH CPU 1          MDC205
UCBRV014 EQU   X'08',,C'X' -       RESERVED
UCBRV015 EQU   X'04',,C'X' -       RESERVED
UCBRV016 EQU   X'02',,C'X' -       RESERVED
UCBRV017 EQU   X'01',,C'X' -       RESERVED
UCBCNT   DS    FL1 -               COUNT OF QUEUED REQUESTS WAITING
*                                  FOR DEVICE                    MDC206
UCBLCI   DS    FL1 -               INCREMENT WHICH, WHEN MULTIPLIED BY
*                                  8, BECOMES AN INDEX TO THE LOGICAL
*                                  CHANNEL TABLE (LCHTAB)
UCBCPU   DS    XL1 -               LAST SIO TO DEVICE ISSUED FROM THIS
*                                  CPUID                         MDC207
UCBWGT   DS    B -                 FLAGS
UCBIN    EQU   X'80' -             SYSIN
UCBOUT   EQU   X'40' -             SYSOUT
UCBPUB   EQU   X'20' -             ASSUMED THAT THIS DEVICE WILL BE
*                                  ALLOCATED FOR A PUBLIC VOLUME
*                                  REQUEST
UCBREW   EQU   X'10' -             REWIND COMMAND HAS BEEN ADDRESSED TO
*                                  THIS MAGNETIC DEVICE BY I/O SUPPORT
UCBMTPXP EQU   X'08' -             MULTIPLE EXPOSURE DEVICE      MDC117
UCBVORSN EQU   X'04' -             VARY COMMAND OPERATOR REASON
*                                  INDICATOR                     MDC118
UCBVHRSN EQU   X'02' -             VARY COMMAND HIERARCHY REASON
*                                  INDICATOR                     MDC119
UCBRV029 EQU   X'01',,C'X' -       RESERVED                      MDC028
UCBNAME  DS    CL3 -               UNIT NAME (EBCDIC)
UCBTYP   DS    0CL4 -              DEVICE TYPE
UCBTBYT1 DS    B -                 MODEL BITS
UCB1FEA0 EQU   X'80' -             BIT 0
UCB1FEA1 EQU   X'40' -             BIT 1
UCB1FEA2 EQU   X'20' -             BIT 2
UCB1FEA3 EQU   X'10' -             BIT 3
UCB1FEA4 EQU   X'08' -             BIT 4
UCB1FEA5 EQU   X'04' -             BIT 5
UCBD1600 EQU   X'04' -             1600 BPI                      ICB475
UCB1FEA6 EQU   X'02' -             BIT 6
UCBD6250 EQU   X'02' -             6250 BPI                      ICB475
UCB1FEA7 EQU   X'01' -             BIT 7
UCBTBYT2 DS    B -                 OPTION FLAGS
UCB2OPT0 EQU   X'80' -             FLAG 0
UCB2OPT1 EQU   X'40' -             FLAG 1
UCB2OPT2 EQU   X'20' -             FLAG 2
UCBDUDN1 EQU   X'20' -             DUAL DENSITY 800/1600 BPI     ICB475
UCBRR    EQU   X'20' -             THIS DEVICE IS SHARABLE BETWEEN
*                                  TWO CPU'S (DIRECT ACCESS)     MDC159
UCB2OPT3 EQU   X'10' -             FLAG 3
UCBDUDN2 EQU   X'10' -             DUAL DENSITY 1600/6250 BPI    ICB475
UCBRPS   EQU   X'10' -             ROTATIONAL POSITION SENSING (RPS)
*                                  DEVICE (DIRECT ACCESS)        MDC120
UCB2OPT4 EQU   X'08' -             FLAG 4
UCBRWTAU EQU   X'08' -             READ/WRITE TAPE CONTROL       MDC166
UCBRVDEV EQU   X'08' -             IF 0, REAL DEVICE.  IF 1, VIRTUAL
*                                  DEVICE.  (DIRECT ACCESS)
*                                  (MDC300)                    @Z30LP9A
UCB2OPT5 EQU   X'04' -             FLAG 5
UCB2OPT6 EQU   X'02' -             FLAG 6
UCBVLPWR EQU   X'02' -             VOLUME REQUIRES ALTERNATE POWER
*                                  SOURCE DEVICE  (MDC322)     @Z30AQ9A
UCB2OPT7 EQU   X'01' -             FLAG 7
UCBDVPWR EQU   X'01' -             DEVICE HAS ALTERNATE POWER SOURCE
*                                  (MDC323)                    @Z30AQ9A
UCBDVCLS DS    0B -                SAME AS UCBTBYT3              MDC169
UCBTBYT3 DS    B -                 CLASS BITS
UCB3TAPE EQU   X'80' -             TAPE
UCB3COMM EQU   X'40' -             COMMUNICATIONS
UCB3CTC  EQU   X'41' -             CHANNEL-TO-CHANNEL ADAPTER    MDC239
UCB3DACC EQU   X'20' -             DIRECT ACCESS
UCB3DISP EQU   X'10' -             DISPLAY
UCB3UREC EQU   X'08' -             UNIT RECORD
UCB3CHAR EQU   X'04' -             CHARACTER READER
UCBRSV10 EQU   X'02',,C'X' -       RESERVED
UCBRSV11 EQU   X'01',,C'X' -       RESERVED
UCBUNTYP DS    0C -                SAME AS UCBTBYT4              MDC170
UCBTBYT4 DS    C -                 DEVICE CODE
UCBDSM   EQU   X'42' -             MASS STORAGE CONTROL (MSC) (3851)
*                                  (MDC329)                    @Z30LP9A
UCB42AD1 EQU   X'11' -             2702 CONTROL UNIT WITH TYPE 1
*                                  ADAPTOR
UCB3211  EQU   X'09' -             3211 PRINTER                  MDC165
UCB3400  EQU   X'03' -             3400 MAGNETIC TAPE            MDC021
UCB2400  EQU   X'01' -             2400 SERIES MAGNETIC TAPE
*                                  DEVICE                        ICB376
UCBEXTPT DS    0A -                ADDRESS OF COMMON UCB EXTENSION
*                                                                MDC227
UCBFLC   DS    BL1 -               I/O SUPERVISOR FLAG BYTE C    MDC228
UCBATTP  EQU   X'80' -             ATTENTION PENDING             MDC229
UCBWAA   EQU   X'40' -             WORK AREA APPENDED            MDC230
UCBUDE   EQU   X'20' -             UNSOLICITED DEVICE END RECEIVED
*                                                                MDC231
UCBITF   EQU   X'10' -             INTERCEPT CONDITION           MDC232
UCBIVRS  EQU   X'08' -             INTERVENTION REQUIRED MESSAGE
*                                  ISSUED                        MDC233
UCBIVRR  EQU   X'04' -             INTERVENTION REQUIRED MESSAGE
*                                  IS NEEDED                     MDC234
UCBTICBT EQU   X'02' -             CHANNEL END AND/OR DEVICE END
*                                  OR MOUNT CONDITION PENDING.   MDC235
UCBDDRSW EQU   X'01' -             DDR SWITCH PENDING ON THIS
*                                  DEVICE                        MDC236
UCBEXTP  DS    AL3 -               ADDRESS OF COMMON UCB EXTENSION
*                                                                MDC237
*
SRTEJBNR EQU   UCBJBNR -           ALIAS
SRTESTAT EQU   UCBSTAT -           ALIAS
SRTEONLI EQU   UCBONLI -           ALIAS
SRTECHGS EQU   UCBCHGS -           ALIAS
SRTERESV EQU   UCBRESV -           ALIAS
SRTEALOC EQU   UCBALOC -           ALIAS
SRTEPRES EQU   UCBPRES -           ALIAS
SRTESYSR EQU   UCBSYSR -           ALIAS
SRTEDADI EQU   UCBDADI -           ALIAS
UCBFL2   EQU   UCBFL1 -            ALIAS (UCBCHA WAS ONCE UCBFL1)
*
***********************************************************************
*
*        DEVICE-DEPENDENT UCB SEGMENTS
*
UCBDEV   EQU   *
*
***********************************************************************
*
*   DIRECT ACCESS DEVICE SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
*        UCBVOLI, UCBSTAB AND UCBDMCT ARE SAME IN TAPE SEGMENT AS
*        IN DIRECT ACCESS SEGMENT
*
***********************************************************************
*
UCBVTOC  DS    CL4 -               RELATIVE ADDRESS OF VTOC FOR THIS
*                                  VOLUME, IN FORM TTR0          MDC085
UCBVOLI  DS    CL6 -               VOLUME SERIAL NUMBER
UCBSTAB  DS    BL1 -               VOLUME STATUS
UCBBSVL  EQU   X'80' -             VOLUME DEMOUNTABLE BY DATA
*                                  MANAGEMENT (DIRECT ACCESS)
*                                  (OS/VS2)                      MDC008
UCBDVSHR EQU   X'80' -             DEVICE NOT SHARABLE AMONG SEVERAL
*                                  CPU'S (3420 MAGNETIC TAPE DEVICES
*                                  ONLY)  (MDC245)              XA03017
UCBPGFL  EQU   X'40' -             UCB IS OPEN AND IS BEING USED AS A
*                                  PAGE FILE
UCBPRSRS EQU   X'20' -             DURING VOLUME ATTRIBUTE PROCESSING
*                                  THIS BIT IS USED BOTH TO DENOTE
*                                  UCB'S THAT WERE MARKED PERMANENTLY
*                                  RESIDENT PRIOR TO GETTING CONTROL
*                                  AND TO IDENTIFY DEVICES THAT WERE
*                                  SELECTED BY THE OPERATOR FOR
*                                  MOUNTING VOLUMES  (DIRECT ACCESS)
*                                                                MDC162
UCBBALB  EQU   X'20' -             ADDITIONAL VOLUME LABEL PROCESSING
*                                  (TAPE)
UCBBPRV  EQU   X'10' -             PRIVATE - VOLUME USE STATUS
UCBBPUB  EQU   X'08' -             PUBLIC - VOLUME USE STATUS
UCBBSTR  EQU   X'04' -             STORAGE - VOLUME USE STATUS
*                                  (DIRECT ACCESS)
*                                  THE VOLUME MOUNTED HAS AN AMERICAN
*                                  NATIONAL STANDARD LABEL  (TAPE)
UCBSHAR  EQU   X'02' -             VOLUME SHAREABLE AMONG JOB STEPS
*                                  (OS/VS2)                      MDC020
UCBBNUL  EQU   X'01' -             CONTROL VOLUME - A CATALOG DATA SET
*                                  IS ON THIS VOLUME  (DIRECT ACCESS)
*                                  IF THE MULTIPLE CONSOLE SUPPORT
*                                  OPTION IS IN THE SYSTEM, DEMOUNT OR
*                                  MOUNT MESSAGES HAVE BEEN ISSUED AND
*                                  THE MESSAGE ID'S ARE AT OFFSETS 40
*                                  THROUGH 45.  OPEN WILL DELETE THE
*                                  MESSAGES AND TURN THIS BIT OFF.
*                                  (TAPE)
UCBDMCT  DS    XL1 -               VOLUME USE BYTE
UCBMOUNT EQU   X'80' -             IF 0, A MOUNT VERIFICATION HAS BEEN
*                                  PERFORMED.  IF 1, A MOUNT REQUEST
*                                  HAS BEEN ISSUED.  (DIRECT ACCESS)
*                                  FOR TAPE, THE FOLLOWING MEANINGS
*                                  APPLY.
*                                  NORMAL SCHEDULER PROCESSING - IF 0,
*                                  NO VOLUME HAS BEEN MOUNTED.  IF 1,
*                                  A VOLUME HAS BEEN MOUNTED BUT NO
*                                  VOLUME LABEL PROCESSING HAS BEEN
*                                  PERFORMED.
*                                  SL OPEN ROUTINE - IF 0, STANDARD
*                                  VOLUME LABEL AND CORRECT SERIAL
*                                  NUMBER HAVE BEEN VERIFIED.  IF 1,
*                                  VOLUME LABEL IS NOT STANDARD FORMAT
*                                  OR SERIAL NUMBER IS NOT CORRECT.
*                                  (A MOUNT MESSAGE HAS BEEN ISSUED.)
*                                  NSL OPEN ROUTINE - IF 0,
*                                  NON-STANDARD VOLUME LABEL HAS BEEN
*                                  VERIFIED.  IF 1, VOLUME LABEL IS NOT
*                                  STANDARD FORMAT.  (CONTROL PASSES TO
*                                  THE PROCESSING PROGRAM'S
*                                  NON-STANDARD LABEL PROCESSING
*                                  ROUTINE.)  VOLUME LABEL IS STANDARD
*                                  FORMAT.  (CONTROL REMAINS WITH THE
*                                  OPEN ROUTINE.  A MOUNT MESSAGE HAS
*                                  BEEN ISSUED.)
*                                  BLP OPEN ROUTINE - IF 0, VOLUME
*                                  LABEL HAS NOT BEEN PROCESSED.
UCBDMC   EQU   X'7F' -             NUMBER OF DCB'S OPEN FOR THIS VOLUME
UCBDATP  EQU   * -                 END OF COMMON DIRECT ACCESS/TAPE
*                                  AREA
UCBSQC   DS    FL1 -               NUMBER OF RESERVE MACRO INSTRUCTIONS
*                                  ISSUED                        MDC086
UCBFL4   DS    BL1 -               DIRECT ACCESS FLAG BYTE       MDC087
UCBDAVV  EQU   X'80' -             DIRECT ACCESS VOLUME VERIFICATION
*                                  IN CONTROL (DAVV)             MDC127
UCBWDAV  EQU   X'40' -             DAVV WAITING FOR MOUNT        MDC128
UCBRV028 EQU   X'20',,C'X' -       RESERVED                      MDC157
UCBDSS   EQU   X'10' -             READ HOME ADDRESS AND READ RECORD
*                                  ZERO OPERATIONS HAVE BEEN PERFORMED
*                                  BY DYNAMIC SUPPORT SYSTEM (DSS)
*                                                                MDC088
UCBRV065 EQU   X'08',,C'X' -       RESERVED  (MDC302)
UCBFL45  EQU   X'04',,C'X' -       RESERVED
UCBFL46  EQU   X'02',,C'X' -       RESERVED
UCBFL47  EQU   X'01',,C'X' -       RESERVED
UCBUSER  DS    FL1 -               NUMBER OF CURRENT USERS       MDC089
UCBRES1A DS    XL1 -               RESERVED
UCBBASE  DS    A -                 ADDRESS OF BASE EXPOSURE UCB  MDC130
UCBNEXP  DS    A -                 BASE - ADDRESS OF LAST STARTED
*                                  EXPOSURE
*                                  NON-BASE - ADDRESS OF NEXT
*                                  EXPOSURE IN THE RING
*                                  THIS ADDRESS POINTS TO THE
*                                  MULTIPROCESSING PREFIX        MDC131
*
***********************************************************************
*
*   MAGNETIC TAPE SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
*        UCBVOLI, UCBSTAB AND UCBDMCT ARE SAME IN TAPE SEGMENT AS
*        IN DIRECT ACCESS SEGMENT
*
***********************************************************************
*
UCBFSCT  DS    H -                 DATA SET SEQUENCE COUNT       MDC090
UCBFSEQ  DS    H -                 DATA SET SEQUENCE NUMBER      MDC091
         DS    CL8 -               UCBVOLI, UCBSTAB AND UCBDMCT AS IN
*                                  DIRECT ACCESS SEGMENT
UCBFSER  DS    CL6 -               BEFORE OPEN, MESSAGE ID'S.  SEE
*                                  UCBSTAB BIT 7.  AFTER OPEN, DATA
*                                  SET SERIAL NUMBER             MDC092
UCBRES1B DS    XL1 -               RESERVED
UCBTFL1  DS    B -                 FLAG BYTE (TAPE DEVICES ONLY) MDC015
UCBNLTP  EQU   X'80' -             TAPE VOLUME DOES NOT CONTAIN
*                                  LABELS                        MDC016
UCBNSLTP EQU   X'40' -             TAPE CONTAINS NON-STANDARD
*                                  LABELS                        MDC017
UCBRV038 EQU   X'20',,C'X' -       RESERVED                      MDC164
UCBRV005 EQU   X'10',,C'X' -       RESERVED
UCBRV006 EQU   X'08',,C'X' -       RESERVED
UCBRV007 EQU   X'04',,C'X' -       RESERVED
UCBRV008 EQU   X'02',,C'X' -       RESERVED
UCBRV009 EQU   X'01',,C'X' -       RESERVED
UCBXTN   DS    0A -                ADDRESS OF THE MAGNETIC TAPE UCB
*                                  EXTENSION                     MDC093
UCBVOPT  DS    BL1 -               VOLUME STATISTICS OPTION BITS MDC094
UCBESV   EQU   X'80' -             ERROR STATISTICS BY VOLUME (ESV)
*                                  RECORDS KEPT                  MDC094
UCBEVA   EQU   X'40' -             ERROR VOLUME ANALYSIS (EVA) RECORDS
*                                  KEPT                          MDC094
UCBESVC  EQU   X'20' -             IF 0, ESV RECORDS SENT TO SYS1.MAN
*                                  (X OR Y) DATA SET.
*                                  IF 1, ESV RECORDS SENT TO CONSOLE.
*                                                                MDC094
UCBERPC  EQU   X'10' -             AN ERROR RECOVERY PROCEDURE HAS
*                                  CONTROL                       MDC094
UCBESVE  EQU   X'08' -             AN ESV RECORD HAS BEEN ISSUED FOR
*                                  THIS VOLUME BECAUSE OF AN EOV
*                                  CONDITION                     MDC094
UCBRSV20 EQU   X'04',,C'X' -       RESERVED                      MDC094
UCBRSV21 EQU   X'02',,C'X' -       RESERVED                      MDC094
UCBRSV22 EQU   X'01',,C'X' -       RESERVED                      MDC094
UCBXTNB  DS    AL3 -               ADDRESS OF THE MAGNETIC TAPE UCB
*                                  EXTENSION                     MDC095
*
SRTEVOLI EQU   UCBVOLI -           ALIAS
SRTESTAB EQU   UCBSTAB -           ALIAS
SRTEBSVL EQU   UCBBSVL -           ALIAS
SRTEBPRV EQU   UCBBPRV -           ALIAS
SRTEBPUB EQU   UCBBPUB -           ALIAS
SRTEBSTR EQU   UCBBSTR -           ALIAS
SRTEDMCT EQU   UCBDMCT -           ALIAS
SRTEFSCT EQU   UCBFSCT -           ALIAS
SRTEFSEQ EQU   UCBFSEQ -           ALIAS
SRTEUSER EQU   UCBUSER -           ALIAS
*
***********************************************************************
*
*             UNIT RECORD WITH
*             UNIVERSAL CHARACTER SET (1403, 3211)
*             OR OPTICAL CHARACTER READER (3886)
*             OR 3540 DEVICE                                   @Z30OP9A
*             UCB SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
***********************************************************************
*
UCBXTADR DS    A -                 ADDRESS OF UCS UCB EXTENSION (1403
*                                  OR 3211) OR ADDRESS OF OPTICAL
*                                  CHARACTER READER UCB EXTENSION
*                                  (3886) OR ADDRESS OF 3540 DEVICE
*                                  UCB EXTENSION (3540)
*                                  (MDC324)                    @Z30OP9A
*
***********************************************************************
*
*             GRAPHICS EXCEPT 3270
*             UCB SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
***********************************************************************
*
UCBSTART DS    H -                 LAST START ADDRESS  (MDC247)  YM4067
UCBOPEN  DS    FL1 -               NUMBER OF DCB'S THAT ARE CURRENTLY
*                                  OPEN FOR THIS DEVICE
UCBGCB   DS    C -                 GRAPHIC CONTROL BYTE USED FOR
*                                  ATTENTION HANDLING
UCBTEB   DS    A -                 ADDRESS OF TASK ENTRY (TE) BLOCK
UCBSNS   DS    XL4 -               SENSE INFORMATION  (MDC248)   YM4067
UCBBTA   DS    0A -                ADDRESS OF BUFFER TABLE
UCBDI    DS    FL1 -               DEVICE OR DEVICES ON A CONTROL UNIT
*                                  TO WHICH BUFFER SECTIONS ARE
*                                  ASSIGNED
UCBBTB   DS    AL3 -               ADDRESS OF BUFFER TABLE
*
***********************************************************************
*
*             3270 GRAPHICS
*             UCB SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT      ICB480
*
***********************************************************************
*
UCBAOF   DS    0BL2 -              ADDITIONAL OPTIONAL FEATURES.  AN
*                                  EXTENSION OF THE OPTIONAL FEATURES
*                                  BYTE OF THE UCBTYP FIELD.     ICB480
UCBAOF1  DS    B -                 FIRST BYTE OF UCBAOF          ICB480
UCBOFMCR EQU   X'80' -             MAGNETIC CARD READER ADAPTER -
*                                  FOR 3277 ONLY                 ICB480
UCBOFSP  EQU   X'40' -             SELECTOR PEN - FOR 3277 ONLY  ICB480
UCBOFNL  EQU   X'20' -             NUMERIC LOCK - FOR 3277 ONLY  ICB480
UCBRSV64 EQU   X'10',,C'X' -       RESERVED                      ICB480
UCBRSV65 EQU   X'08',,C'X' -       RESERVED                      ICB480
UCBRSV66 EQU   X'04',,C'X' -       RESERVED                      ICB480
UCBRSV67 EQU   X'02',,C'X' -       RESERVED                      ICB480
UCBRSV68 EQU   X'01',,C'X' -       RESERVED                      ICB480
UCBAOF2  DS    B -                 SECOND BYTE OF UCBAOF         ICB480
UCBRSV69 EQU   X'80',,C'X' -       RESERVED                      ICB480
UCBRSV70 EQU   X'40',,C'X' -       RESERVED                      ICB480
UCBRSV71 EQU   X'20',,C'X' -       RESERVED                      ICB480
UCBRSV72 EQU   X'10',,C'X' -       RESERVED                      ICB480
UCBRSV73 EQU   X'08',,C'X' -       RESERVED                      ICB480
UCBRSV74 EQU   X'04',,C'X' -       RESERVED                      ICB480
UCBRSV75 EQU   X'02',,C'X' -       RESERVED                      ICB480
UCBRSV76 EQU   X'01',,C'X' -       RESERVED                      ICB480
UCBATNCT DS    FL1 -               ATTENTION COUNT.  THE NUMBER OF
*                                  ATTENTIONS NOT SERVICED IN THE LINE
*                                  GROUP.  PRESENT ONLY IF THE DEVICE
*                                  INDEX FIELD IS 1.  OTHERWISE, THIS
*                                  FIELD IS RESERVED.            ICB480
         DS    B -                 UCBGCB - CONTROL BYTE.  USED FOR
*                                  ATTENTION HANDLING FLAGS      ICB480
UCBOLTEP EQU   X'80' -             OLTEP IN CONTROL OF THE DEVICE
*                                                                ICB480
UCBRSV77 EQU   X'40',,C'X' -       RESERVED                      ICB480
UCBRSV78 EQU   X'20',,C'X' -       RESERVED                      ICB480
UCBRSV79 EQU   X'10',,C'X' -       RESERVED                      ICB480
UCBRTIAC EQU   X'08' -             READ TI ACTIVE                MDC171
UCBRIPND EQU   X'04' -             READ INITIAL PENDING          ICB480
UCBSKPFG EQU   X'02' -             SKIP FLAG                     ICB480
UCBATRCD EQU   X'01' -             ATTENTION RECEIVED FROM THE
*                                  DEVICE                        ICB480
UCBIRB   DS    0A -                ADDRESS OF THE IRB USED FOR
*                                  SCHEDULING THE SECOND LEVEL
*                                  ATTENTION ROUTINE             ICB480
UCBGRAF  DS    B -                 GRAPHICS STATUS FLAGS (BTAM)  MDC172
UCBOIP   EQU   X'80' -             OPEN IS IN PROGRESS           MDC173
UCBDRO   EQU   X'40' -             DEVICE READY IN OPEN          MDC174
UCBDRNO  EQU   X'20' -             DEVICE READY - NOT IN OPEN    MDC175
UCBBTAM  EQU   X'10' -             USE BTAM - IGG019UP           MDC176
UCBUPM   EQU   X'08' -             USE PROVIDED MODULE           MDC177
UCBRPND  EQU   X'04' -             READY PROCESSING NOT DONE     MDC178
UCBDWNR  EQU   X'02' -             DEVICE WENT NOT READY         MDC179
UCBRV039 EQU   X'01' -             RESERVED - BTAM               MDC180
UCBIRBA  DS    AL3 -               ADDRESS OF THE IRB USED FOR
*                                  SCHEDULING THE SECOND LEVEL
*                                  ATTENTION ROUTINE             MDC181
UCBLDNCA DS    0A -                ADDRESS OF 3270 WORK AREA
*                                  ESTABLISHED BY VTAM           MDC132
UCBRDYQ  DS    0A -                ASYNCHRONOUS READY NOTIFICATION IRB
*                                  ADDRESS  (BTAM)               MDC182
UCBINRLN DS    0FL1 -              SAME AS UCBIRLN               MDC183
UCBIRLN  DS    FL1 -               INITIALIZED RLN.  THE RELATIVE LINE
*                                  NUMBER (RLN) OF THE IOB INITIALIZED
*                                  FOR A READ INITIAL.  IF 0, NO READ
*                                  INITIAL IS OUTSTANDING.  PRESENT
*                                  ONLY IF THE DEVICE INDEX FIELD IS 1.
*                                  OTHERWISE, THIS FIELD IS RESERVED.
*                                                                ICB480
UCBLDNCB DS    0AL3 -              ADDRESS OF 3270 WORK AREA
*                                  ESTABLISHED BY VTAM           MDC133
UCBRDYQA DS    AL3 -               ASYNCHRONOUS READY NOTIFICATION IRB
*                                  ADDRESS  (BTAM)               MDC184
UCBCTLNK DS    0A -                SAME AS UCBCTLNA BELOW        ICB480
UCBRLN   DS    FL1 -               DEVICE INDEX.  INDEX TO THE DEB UCB
*                                  ADDRESS FIELD FOR THIS DEVICE.
*                                  THIS VALUE IS ALSO THE RELATIVE
*                                  LINE NUMBER.                  ICB480
UCBCTLNA DS    AL3 -               CONTROL BLOCK LINK.  IF THE DEVICE
*                                  INDEX FIELD IS 1, THIS FIELD
*                                  CONTAINS THE ADDRESS OF THE DEB FOR
*                                  THE LINE GROUP.  IF THE DEVICE INDEX
*                                  FIELD IS BETWEEN 2 AND 255
*                                  INCLUSIVE, THIS FIELD CONTAINS THE
*                                  ADDRESS OF THE UCB WITH A DEVICE
*                                  INDEX OF 1.                   ICB480
*
***********************************************************************
*
*             3704, 3705 TELEPROCESSING DEVICE
*             UCB SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
***********************************************************************
*
UCBRV040 DS    A -                 RESERVED FOR USE AS TELEPROCESSING
*                                  EXTENSION POINTER             MDC185
UCBICNCB DS    A -                 POINTER TO VTAM'S ICNCB       MDC186
*
***********************************************************************
*
*             CHANNEL-TO-CHANNEL (CTC) DEVICE
*             UCB SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
***********************************************************************
*
UCBCTCAD DS    A -                 ADDRESS OF AN SRB/IOSB TO BE USED
*                                  FOR SENSE COMMAND BYTE BY IECTCATN
*                                                                MDC240
UCBCTCF1 DS    B -                 CHANNEL-TO-CHANNEL (CTC) DEVICE FLAG
*                                  BYTE                          MDC241
UCBRV042 DS    XL3 -               RESERVED                      MDC242
*
***********************************************************************
*
*             3851 DEVICE
*             UCB SEGMENT
*
         ORG   UCBDEV -            DEVICE-DEPENDENT SEGMENT
*
***********************************************************************
*
UCBIOSBA DS    A -                 ADDRESS OF IOSB.  SET BY IOS FOR
*                                  ERROR CONDITIONS.  (MDC330) @Z30LP9A
UCBRV066 DS    A -                 RESERVED  (MDC331)          @Z30LP9A
*
***********************************************************************
*
*       UNIT CONTROL BLOCK EXTENSIONS
*
***********************************************************************
*
*             COMMON UCB EXTENSION
*
*        THIS EXTENSION IS POINTED TO BY THE UCBEXTPT FIELD IN THE
*        COMMON SEGMENT AND IS NOT CONTIGUOUS TO THE UCB.
*
UCBCMEXT DSECT , -                                               MDC225
*
***********************************************************************
*
UCBETI   DS    FL1 -               A BINARY NUMBER USED BY THE EXIT
*                                  EFFECTOR ROUTINE TO COMPLETE THE
*                                  8-BYTE NAME OF AN IBM-SUPPLIED
*                                  ERROR ROUTINE FOR THIS DEVICE MDC209
UCBSTI   DS    FL1 -               INCREMENT WHICH, WHEN MULTIPLIED BY
*                                  10, BECOMES AN INDEX TO THE
*                                  STATISTICS TABLE (STATAB)     MDC210
UCBDTI   DS    FL1 -               INDEX TO THE DEVICE TABLE     MDC211
UCBATI   DS    FL1 -               INDEX TO THE ATTENTION TABLE (ANTAB)
*                                  OR OPTIONAL JOB ENTRY SUBSYSTEM
*                                  (JES) FLAG BYTE               MDC212
UCBRSV04 EQU   X'80',,C'X' -       RESERVED
UCBRSV05 EQU   X'40',,C'X' -       RESERVED
UCBRSV06 EQU   X'20',,C'X' -       RESERVED
UCBRSV07 EQU   X'10',,C'X' -       RESERVED
UCBRSV08 EQU   X'08',,C'X' -       RESERVED
UCBRSV09 EQU   X'04',,C'X' -       RESERVED
UCBHALI  EQU   X'02' -             OPTIONAL JOB ENTRY SUBSYSTEM (JES)
*                                  ALLOCATION INDICATOR          MDC213
UCBHPDV  EQU   X'01' -             OPTIONAL JOB ENTRY SUBSYSTEM (JES)
*                                  PSEUDO-DEVICE                 MDC214
UCBSNSCT DS    FL1 -               COUNT OF SENSE BYTES PRESENTED
*                                  BY THIS DEVICE                MDC215
UCBFLP1  DS    B -                 FLAG BYTE                     MDC216
UCBNSRCH EQU   X'80' -             THE CURRENTLY ALLOCATED VOLUME WAS
*                                  SPECIFICALLY REQUESTED BY VOLUME
*                                  SERIAL NUMBER.  IT IS NOT AVAILABLE
*                                  FOR ASSIGNMENT BY OPEN/EOV FOR A
*                                  NON-SPECIFIC VOLUME REQUEST.  MDC217
UCBSHRUP EQU   X'40' -             SHAREABLE WHEN IN UNIPROCESSOR MODE
*                                  (MDC333)                    @ZA00805
UCBRV031 EQU   X'20',,C'X' -       RESERVED                      MDC163
UCBRV032 EQU   X'10',,C'X' -       RESERVED                      MDC163
UCBRV033 EQU   X'08',,C'X' -       RESERVED                      MDC163
UCBRV034 EQU   X'04',,C'X' -       RESERVED                      MDC163
UCBRV035 EQU   X'02',,C'X' -       RESERVED                      MDC163
UCBRV036 EQU   X'01',,C'X' -       RESERVED                      MDC163
UCBRV041 DS    CL2 -               RESERVED                      MDC226
UCBCCWOF DS    H -                 OFFSET TO CCW PREFIX          MDC218
UCBPMSK  DS    BL2 -               PATH MASK FOR MESSAGES ISSUED MDC219
UCBMFCNT DS    H -                 MEASUREMENT FACILITIES TOTAL DEVICE
*                                  SIO COUNT.  DURING NIP UCB
*                                  INITIALIZATION, USED FOR PREVIOUSLY
*                                  TESTED INDICATOR.             MDC220
UCBASID  DS    H -                 ASID OF THE MEMORY TO WHICH THIS
*                                  DEVICE IS ALLOCATED           MDC221
UCBRV043 DS    CL1 -               RESERVED  (MDC249)            YM6828
UCBWTOID DS    CL3 -               WTO MESSAGE IDENTIFIER  (MDC250)
*                                                                YM6828
*
***********************************************************************
*
*             MAGNETIC TAPE
*             UCB EXTENSION
*
*        THIS EXTENSION IS POINTED TO BY THE UCBXTN FIELD OF THE
*        UCB AND IS NOT CONTIGUOUS TO THE UCB.
*
UCBMT    DSECT , -                 UCBXTN -> UCBMT
*
***********************************************************************
*
UCBCTD   DS    H -                 SERIAL NUMBER IN BINARY OF TAPE
*                                  DRIVE UPON WHICH THE VOLUME WAS
*                                  CREATED                       MDC097
UCBTRT   DS    FL1 -               TEMPORARY READ ERROR THRESHOLD (IF
*                                  0, EVA IS NOT IN EFFECT).  A BINARY
*                                  NUMBER FROM 1 THROUGH 255 AS
*                                  SELECTED AT SYSGEN TIME ON THE
*                                  SCHEDULR MACRO BY EVA=(N1,N2) WHERE
*                                  N1 = TEMPORARY READ ERROR THRESHOLD.
*                                                                MDC097
UCBTWT   DS    FL1 -               TEMPORARY WRITE ERROR THRESHOLD (IF
*                                  0, EVA IS NOT IN EFFECT).  A BINARY
*                                  NUMBER FROM 1 THROUGH 255 AS
*                                  SELECTED AT SYSGEN TIME ON THE
*                                  SCHEDULR MACRO BY EVA=(N1,N2) WHERE
*                                  N2 = TEMPORARY WRITE ERROR
*                                  THRESHOLD.                    MDC097
UCBTR    DS    FL1 -               THE NUMBER (BINARY) OF TEMPORARY
*                                  READ ERRORS THAT HAVE OCCURRED
*                                                                MDC097
UCBTW    DS    FL1 -               THE NUMBER (BINARY) OF TEMPORARY
*                                  WRITE ERRORS THAT HAVE OCCURRED
*                                                                MDC097
UCBSIO   DS    H -                 THE NUMBER (BINARY) OF START I/O
*                                  OPERATIONS THAT HAVE OCCURRED MDC097
UCBPR    DS    FL1 -               THE NUMBER (BINARY) OF PERMANENT
*                                  READ ERRORS THAT HAVE OCCURRED
*                                                                MDC097
UCBPW    DS    FL1 -               THE NUMBER (BINARY) OF PERMANENT
*                                  WRITE ERRORS THAT HAVE OCCURRED
*                                                                MDC097
UCBNB    DS    FL1 -               THE NUMBER (BINARY) OF NOISE BLOCKS
*                                  THAT HAVE BEEN ENCOUNTERED    MDC097
UCBMS    DS    CL1 -               MODE SET OPERATION CODE FOR DATA
*                                  BLOCKS ON A 3420 MAGNETIC TAPE UNIT
*                                                                MDC097
UCBERG   DS    H -                 THE NUMBER (BINARY) OF ERASE GAPS
*                                  THAT HAVE BEEN ENCOUNTERED    MDC097
UCBCLN   DS    H -                 THE NUMBER (BINARY) OF CLEANER
*                                  ACTIONS THAT HAVE OCCURRED    MDC097
*
***********************************************************************
*
*            OPTICAL CHARACTER READER (3886)
*            UCB EXTENSION
*
*        THIS EXTENSION IS POINTED TO BY THE UCBXTADR FIELD OF THE
*        UCB AND IS NOT CONTIGUOUS TO THE UCB.
*
UCBOCR   DSECT , -                 UCBXTADR -> UCBOCR            MDC024
*
***********************************************************************
*
UCBFRID  DS    CL4 -               CURRENT FORMAT RECORD ID (FRID)
*                                  LOADED                        MDC025
UCBRDATA DS    XL4 -               COMMAND DATA                  MDC026
*
***********************************************************************
*
*            3540 DEVICE                                       @Z30OP9A
*            UCB EXTENSION                                     @Z30OP9A
*
*        THIS EXTENSION IS POINTED TO BY THE UCBXTADR FIELD OF THE
*        UCB AND IS NOT CONTIGUOUS TO THE UCB.                 @Z30OP9A
*
UCB3540X DSECT , -                 UCBXTADR -> UCB3540X  (MDC325)
*                                                              @Z30OP9A
*
***********************************************************************
*
UCBVLSER DS    CL6 -               3540 VOLID  (MDC326)        @Z30OP9A
UCBDKBYT DS    B -                 FLAG BYTE  (MDC334)         @Z30OP9A
UCBDKAMX EQU   X'80' -             IBM-SUPPLIED DISKETTE READER,
*                                  DISKETTE WRITER OR COPY/RESTORE
*                                  UTILITIES ARE USING THIS 3540
*                                  DEVICE  (MDC335)            @Z30OP9A
UCBVLVER EQU   X'40' -             VOLUME VERIFICATION IS REQUIRED FOR
*                                  CERTAIN INTERVENTION REQUIRED
*                                  CONDITIONS WHILE 3540 DISKETTE
*                                  UTILITIES ARE USING THE DEVICE
*                                  (MDC336)                    @Z30OP9A
UCBRV067 EQU   X'20',,C'X' -       RESERVED                    @Z30OP9A
UCBRV068 EQU   X'10',,C'X' -       RESERVED                    @Z30OP9A
UCBRV069 EQU   X'08',,C'X' -       RESERVED                    @Z30OP9A
UCBRV070 EQU   X'04',,C'X' -       RESERVED                    @Z30OP9A
UCBRV071 EQU   X'02',,C'X' -       RESERVED                    @Z30OP9A
UCBRV072 EQU   X'01',,C'X' -       RESERVED                    @Z30OP9A
UCBRV073 DS    C -                 RESERVED                    @Z30OP9A
*
***********************************************************************
*
*              UNIT RECORD WITH
*              UNIVERSAL CHARACTER SET (1403, 3211)
*              UCB EXTENSION
*
*        THIS EXTENSION IS POINTED TO BY THE UCBXTADR FIELD OF THE
*        UCB AND IS NOT CONTIGUOUS TO THE UCB.
*
UCBUCS   DSECT , -                 UCBXTADR -> UCBUCS
*
***********************************************************************
*
UCBUCSID DS    CL4 -               UCS IMAGE IDENTIFICATION IN BUFFER
UCBUCSOP DS    B -                 FORMAT OF UCS IMAGE IN BUFFER
*                                  (O FOR OPTION)
UCBUCSO1 EQU   X'80' -             UCS IMAGE IS A DEFAULT IMAGE
UCBUCSO2 EQU   X'40' -             UCS IMAGE IS IN FOLD MODE
UCBRSV39 EQU   X'20',,C'X' -       RESERVED
UCBRSV40 EQU   X'10',,C'X' -       RESERVED
UCBRSV41 EQU   X'08',,C'X' -       RESERVED
UCBRSV42 EQU   X'04',,C'X' -       RESERVED
UCBRSV43 EQU   X'02',,C'X' -       RESERVED
UCBUCSPE EQU   X'01' -             UCS IMAGE HAS PARITY ERROR (3211)
UCBFCBOP DS    B -                 RESERVED (1403) OR FCB OPTIONS
*                                  (3211) (O FOR OPTION)
UCBFCBO1 EQU   X'80' -             FCB IMAGE IS A DEFAULT IMAGE
UCBRSV44 EQU   X'40',,C'X' -       RESERVED
UCBRSV45 EQU   X'20',,C'X' -       RESERVED
UCBRSV46 EQU   X'10',,C'X' -       RESERVED
UCBRSV47 EQU   X'08',,C'X' -       RESERVED
UCBRSV48 EQU   X'04',,C'X' -       RESERVED
UCBRSV49 EQU   X'02',,C'X' -       RESERVED
UCBRSV50 EQU   X'01',,C'X' -       RESERVED
UCBRSV51 DS    X -                 RESERVED
UCBERCNT DS    FL1 -               CONTAINS A COUNT OF THE ERRORS THAT
*                                  HAVE OCCURRED.  THE COUNT, WHICH MAY
*                                  WRAP AROUND, IS WRITTEN IN STANDARD
*                                  OBR RECORDS (ONE PER ERROR) AND IN
*                                  NEW DEVICE-DEPENDENT OBR RECORDS (0
*                                  TO 3 PER ERROR) AND SERVE TO RELATE
*                                  TO EACH OTHER THE STANDARD AND
*                                  DEVICE-DEPENDENT OBR RECORDS THAT
*                                  PERTAIN TO EACH ERROR  (3211)
UCBFCBID DS    CL4 -               THE FCB IMAGE IDENTIFICATION
UCBERADR DS    A -                 THE ADDRESS OF THE ERP LOGOUT AREA
         POP   PRINT
         MEND
./ ADD NAME=XCR      0100-21053-21053-1621-00018-00018-00000-GRZ027  54
         MACRO
&LABEL   XCR   &RA,&RB
.*
.*  EXCHANGE TWO REGISTERS
.*
.*  &RA,&RB : REG0-15
.*
         AIF   ('&RA' EQ '' OR '&RB' EQ '').YMISS
         AIF   ('&RA(1)' EQ '&RB(1)').LABEL
&LABEL   XR    &RA,&RB
         XR    &RB,&RA
         XR    &RA,&RB
         MEXIT
.YMISS   BMCERMAC XCR,1
.LABEL   AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
